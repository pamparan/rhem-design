import {
  angle_double_left_icon_default,
  angle_double_right_icon_default,
  angle_up_icon_default,
  arrow_right_icon_default,
  attention_bell_icon_default,
  copy_icon_default,
  eye_icon_default,
  eye_slash_icon_default,
  file_icon_default,
  in_progress_icon_default,
  minus_icon_default,
  outlined_calendar_alt_icon_default,
  outlined_clock_icon_default,
  plus_icon_default,
  resources_full_icon_default,
  search_icon_default,
  times_circle_icon_default
} from "./chunk-5IZ34DMV.js";
import {
  ASTERISK,
  ActionList,
  ActionListGroup,
  ActionListItem,
  Badge,
  Button,
  ButtonSize,
  ButtonState,
  ButtonType,
  ButtonVariant,
  Checkbox,
  Divider,
  DividerVariant,
  DrilldownMenu,
  Dropdown,
  DropdownGroup,
  DropdownItem,
  DropdownList,
  FocusTrap,
  FormControlIcon,
  GenerateId,
  KEYHANDLER_DIRECTION,
  KeyTypes,
  KeyboardHandler,
  Menu,
  MenuBreadcrumb,
  MenuContainer,
  MenuContent,
  MenuFooter,
  MenuGroup,
  MenuItem,
  MenuItemAction,
  MenuList,
  MenuSearch,
  MenuSearchInput,
  MenuToggle,
  MenuToggleAction,
  MenuToggleCheckbox,
  MenuToggleSize,
  MenuToggleStatus,
  Popover,
  PopoverPosition,
  Popper,
  SIDE,
  Select,
  SelectGroup,
  SelectList,
  SelectOption,
  Spinner,
  TextInput,
  TextInputBase,
  TextInputReadOnlyVariant,
  TextInputTypes,
  Tooltip,
  TooltipPosition,
  ValidatedOptions,
  breadcrumb_default,
  button_default,
  canUseDOM,
  capitalize,
  clearTimeouts,
  css,
  debounce,
  divider_default,
  fillTemplate,
  findTabbableElements,
  form_control_default,
  form_default,
  formatBreakpointMods,
  getBreakpoint,
  getDefaultOUIAId,
  getInlineStartProperty,
  getLanguageDirection,
  getNextIndex,
  getOUIAProps,
  getOpacityTransition,
  getReferenceElement,
  getResizeObserver,
  getTextWidth,
  getUniqueId,
  getVerticalBreakpoint,
  globalHeightBreakpoints,
  globalWidthBreakpoints,
  handleArrows,
  innerDimensions,
  isElementInView,
  isValidDate,
  keyHandler,
  menu_default,
  onToggleArrowKeydownDefault,
  pluralize,
  preventedEvents,
  setBreakpointCssVars,
  setTabIndex,
  sideElementIsOutOfView,
  spinnerSize,
  statusIcons,
  t_global_breakpoint_2xl_default,
  t_global_breakpoint_lg_default,
  t_global_breakpoint_md_default,
  t_global_breakpoint_xl_default,
  toCamel,
  trimLeft,
  useInterval,
  useIsomorphicLayoutEffect,
  useOUIAId,
  useOUIAProps
} from "./chunk-5CKKRT4D.js";
import {
  require_react_dom
} from "./chunk-QXLG2TGQ.js";
import {
  __awaiter,
  __rest,
  angle_down_icon_default,
  angle_left_icon_default,
  angle_right_icon_default,
  bell_icon_default,
  caret_down_icon_default,
  check_circle_icon_default,
  check_icon_default,
  exclamation_circle_icon_default,
  exclamation_triangle_icon_default,
  grip_vertical_icon_default,
  help_icon_default,
  info_circle_icon_default,
  times_icon_default
} from "./chunk-6HWQWHJU.js";
import {
  require_jsx_runtime
} from "./chunk-GRWX7YRK.js";
import {
  __commonJS,
  __toESM,
  require_react
} from "./chunk-I4MZPW7S.js";

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment25 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment25;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement14, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement14(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement14(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/attr-accept/dist/es/index.js
var require_es = __commonJS({
  "node_modules/attr-accept/dist/es/index.js"(exports) {
    "use strict";
    exports.__esModule = true;
    exports.default = function(file, acceptedFiles) {
      if (file && acceptedFiles) {
        var acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
        if (acceptedFilesArray.length === 0) {
          return true;
        }
        var fileName = file.name || "";
        var mimeType = (file.type || "").toLowerCase();
        var baseMimeType = mimeType.replace(/\/.*$/, "");
        return acceptedFilesArray.some(function(type) {
          var validType = type.trim().toLowerCase();
          if (validType.charAt(0) === ".") {
            return fileName.toLowerCase().endsWith(validType);
          } else if (validType.endsWith("/*")) {
            return baseMimeType === validType.replace(/\/.*$/, "");
          }
          return mimeType === validType;
        });
      }
      return true;
    };
  }
});

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModal.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-tokens/dist/esm/c_about_modal_box_BackgroundImage.js
var c_about_modal_box_BackgroundImage = {
  "name": "--pf-v6-c-about-modal-box--BackgroundImage",
  "value": "none",
  "var": "var(--pf-v6-c-about-modal-box--BackgroundImage)"
};
var c_about_modal_box_BackgroundImage_default = c_about_modal_box_BackgroundImage;

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxContent.js
var import_jsx_runtime = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/AboutModalBox/about-modal-box.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/AboutModalBox/about-modal-box.css";
var about_modal_box_default = {
  "aboutModalBox": "pf-v6-c-about-modal-box",
  "aboutModalBoxBrand": "pf-v6-c-about-modal-box__brand",
  "aboutModalBoxBrandImage": "pf-v6-c-about-modal-box__brand-image",
  "aboutModalBoxClose": "pf-v6-c-about-modal-box__close",
  "aboutModalBoxContent": "pf-v6-c-about-modal-box__content",
  "aboutModalBoxHeader": "pf-v6-c-about-modal-box__header",
  "aboutModalBoxStrapline": "pf-v6-c-about-modal-box__strapline",
  "button": "pf-v6-c-button",
  "dirRtl": "pf-v6-m-dir-rtl",
  "modifiers": {
    "plain": "pf-m-plain"
  }
};

// node_modules/@patternfly/react-styles/css/components/Content/content.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Content/content.css";
var content_default = {
  "content": "pf-v6-c-content",
  "contentA": "pf-v6-c-content--a",
  "contentBlockquote": "pf-v6-c-content--blockquote",
  "contentDd": "pf-v6-c-content--dd",
  "contentDl": "pf-v6-c-content--dl",
  "contentDt": "pf-v6-c-content--dt",
  "contentH1": "pf-v6-c-content--h1",
  "contentH2": "pf-v6-c-content--h2",
  "contentH3": "pf-v6-c-content--h3",
  "contentH4": "pf-v6-c-content--h4",
  "contentH5": "pf-v6-c-content--h5",
  "contentH6": "pf-v6-c-content--h6",
  "contentHr": "pf-v6-c-content--hr",
  "contentLi": "pf-v6-c-content--li",
  "contentOl": "pf-v6-c-content--ol",
  "contentP": "pf-v6-c-content--p",
  "contentPre": "pf-v6-c-content--pre",
  "contentSmall": "pf-v6-c-content--small",
  "contentTable": "pf-v6-c-content--table",
  "contentUl": "pf-v6-c-content--ul",
  "modifiers": {
    "editorial": "pf-m-editorial",
    "visited": "pf-m-visited",
    "pageTitle": "pf-m-page-title",
    "plain": "pf-m-plain"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxContent.js
var AboutModalBoxContent = (_a) => {
  var { children, trademark, hasNoContentContainer = false } = _a, props = __rest(_a, ["children", "trademark", "hasNoContentContainer"]);
  return (0, import_jsx_runtime.jsxs)("div", Object.assign({ className: css(about_modal_box_default.aboutModalBoxContent) }, props, { children: [(0, import_jsx_runtime.jsx)("div", { className: css(`${about_modal_box_default.aboutModalBox}__body`), children: hasNoContentContainer ? children : (0, import_jsx_runtime.jsx)("div", { className: css(content_default.content), children }) }), (0, import_jsx_runtime.jsx)("p", { className: css(about_modal_box_default.aboutModalBoxStrapline), children: trademark })] }));
};
AboutModalBoxContent.displayName = "AboutModalBoxContent";

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxHeader.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-core/dist/esm/components/Title/Title.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/Title/title.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Title/title.css";
var title_default = {
  "modifiers": {
    "4xl": "pf-m-4xl",
    "3xl": "pf-m-3xl",
    "2xl": "pf-m-2xl",
    "xl": "pf-m-xl",
    "lg": "pf-m-lg",
    "md": "pf-m-md",
    "h1": "pf-m-h1",
    "h2": "pf-m-h2",
    "h3": "pf-m-h3",
    "h4": "pf-m-h4",
    "h5": "pf-m-h5",
    "h6": "pf-m-h6",
    "pageTitle": "pf-m-page-title"
  },
  "title": "pf-v6-c-title"
};

// node_modules/@patternfly/react-core/dist/esm/components/Title/Title.js
var TitleSizes;
(function(TitleSizes2) {
  TitleSizes2["md"] = "md";
  TitleSizes2["lg"] = "lg";
  TitleSizes2["xl"] = "xl";
  TitleSizes2["2xl"] = "2xl";
  TitleSizes2["3xl"] = "3xl";
  TitleSizes2["4xl"] = "4xl";
})(TitleSizes || (TitleSizes = {}));
var Title = (_a) => {
  var { className = "", children = "", headingLevel: HeadingLevel, size, ouiaId, ouiaSafe = true } = _a, props = __rest(_a, ["className", "children", "headingLevel", "size", "ouiaId", "ouiaSafe"]);
  const ouiaProps = useOUIAProps(Title.displayName, ouiaId, ouiaSafe);
  return (0, import_jsx_runtime2.jsx)(HeadingLevel, Object.assign({}, ouiaProps, props, { className: css(title_default.title, size ? title_default.modifiers[size] : title_default.modifiers[HeadingLevel], className), children }));
};
Title.displayName = "Title";

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxHeader.js
var AboutModalBoxHeader = (_a) => {
  var { productName, id } = _a, props = __rest(_a, ["productName", "id"]);
  return (0, import_jsx_runtime3.jsx)("div", Object.assign({ className: css(about_modal_box_default.aboutModalBoxHeader) }, props, { children: (0, import_jsx_runtime3.jsx)(Title, { headingLevel: "h1", size: "4xl", id, children: productName }) }));
};
AboutModalBoxHeader.displayName = "AboutModalBoxHeader";

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxBrand.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var AboutModalBoxBrand = (_a) => {
  var { src, alt } = _a, props = __rest(_a, ["src", "alt"]);
  return (0, import_jsx_runtime4.jsx)("div", Object.assign({ className: css(about_modal_box_default.aboutModalBoxBrand) }, props, { children: (0, import_jsx_runtime4.jsx)("img", { className: css(about_modal_box_default.aboutModalBoxBrandImage), src, alt }) }));
};
AboutModalBoxBrand.displayName = "AboutModalBoxBrand";

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBoxCloseButton.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var AboutModalBoxCloseButton = (_a) => {
  var { onClose = (_e) => void 0, "aria-label": ariaLabel = "Close Dialog" } = _a, props = __rest(_a, ["onClose", "aria-label"]);
  return (0, import_jsx_runtime5.jsx)("div", Object.assign({ className: css(about_modal_box_default.aboutModalBoxClose) }, props, { children: (0, import_jsx_runtime5.jsx)(Button, { variant: "plain", onClick: onClose, "aria-label": ariaLabel, icon: (0, import_jsx_runtime5.jsx)(times_icon_default, {}) }) }));
};
AboutModalBoxCloseButton.displayName = "AboutModalBoxCloseButton";

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModalBox.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var AboutModalBox = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime6.jsx)("div", Object.assign({ className: css(about_modal_box_default.aboutModalBox, className) }, props, { children }));
};
AboutModalBox.displayName = "AboutModalBox";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/Modal.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());

// node_modules/@patternfly/react-styles/css/components/Backdrop/backdrop.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Backdrop/backdrop.css";
var backdrop_default = {
  "backdrop": "pf-v6-c-backdrop",
  "backdropOpen": "pf-v6-c-backdrop__open"
};

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalContent.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/layouts/Bullseye/bullseye.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/layouts/Bullseye/bullseye.css";
var bullseye_default = {
  "bullseye": "pf-v6-l-bullseye"
};

// node_modules/@patternfly/react-core/dist/esm/components/Backdrop/Backdrop.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var Backdrop = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime7.jsx)("div", Object.assign({}, props, { className: css(backdrop_default.backdrop, className), children }));
};
Backdrop.displayName = "Backdrop";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxCloseButton.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/ModalBox/modal-box.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/ModalBox/modal-box.css";
var modal_box_default = {
  "button": "pf-v6-c-button",
  "modalBox": "pf-v6-c-modal-box",
  "modalBoxBody": "pf-v6-c-modal-box__body",
  "modalBoxClose": "pf-v6-c-modal-box__close",
  "modalBoxDescription": "pf-v6-c-modal-box__description",
  "modalBoxFooter": "pf-v6-c-modal-box__footer",
  "modalBoxHeader": "pf-v6-c-modal-box__header",
  "modalBoxHeaderMain": "pf-v6-c-modal-box__header-main",
  "modalBoxTitle": "pf-v6-c-modal-box__title",
  "modalBoxTitleIcon": "pf-v6-c-modal-box__title-icon",
  "modalBoxTitleText": "pf-v6-c-modal-box__title-text",
  "modifiers": {
    "sm": "pf-m-sm",
    "md": "pf-m-md",
    "lg": "pf-m-lg",
    "alignTop": "pf-m-align-top",
    "danger": "pf-m-danger",
    "warning": "pf-m-warning",
    "success": "pf-m-success",
    "custom": "pf-m-custom",
    "info": "pf-m-info",
    "help": "pf-m-help",
    "icon": "pf-m-icon"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxCloseButton.js
var ModalBoxCloseButton = (_a) => {
  var { className, onClose, "aria-label": ariaLabel = "Close", ouiaId } = _a, props = __rest(_a, ["className", "onClose", "aria-label", "ouiaId"]);
  return (0, import_jsx_runtime8.jsx)("div", { className: css(modal_box_default.modalBoxClose, className), children: (0, import_jsx_runtime8.jsx)(Button, Object.assign({ variant: "plain", onClick: (event) => onClose(event), "aria-label": ariaLabel }, ouiaId && { ouiaId: `${ouiaId}-${ModalBoxCloseButton.displayName}` }, props, { icon: (0, import_jsx_runtime8.jsx)(times_icon_default, {}) })) });
};
ModalBoxCloseButton.displayName = "ModalBoxCloseButton";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBox.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-tokens/dist/esm/c_modal_box_m_align_top_spacer.js
var c_modal_box_m_align_top_spacer = {
  "name": "--pf-v6-c-modal-box--m-align-top--spacer",
  "value": "0.5rem",
  "var": "var(--pf-v6-c-modal-box--m-align-top--spacer)"
};
var c_modal_box_m_align_top_spacer_default = c_modal_box_m_align_top_spacer;

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBox.js
var ModalBox = (_a) => {
  var { children, className, variant = "default", position, positionOffset, "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel, "aria-describedby": ariaDescribedby, style } = _a, props = __rest(_a, ["children", "className", "variant", "position", "positionOffset", "aria-labelledby", "aria-label", "aria-describedby", "style"]);
  if (positionOffset) {
    style = style || {};
    style[c_modal_box_m_align_top_spacer_default.name] = positionOffset;
  }
  return (0, import_jsx_runtime9.jsx)("div", Object.assign({ role: "dialog", "aria-label": ariaLabel || null, "aria-labelledby": ariaLabelledby || null, "aria-describedby": ariaDescribedby, "aria-modal": "true", className: css(modal_box_default.modalBox, className, position === "top" && modal_box_default.modifiers.alignTop, variant === "large" && modal_box_default.modifiers.lg, variant === "small" && modal_box_default.modifiers.sm, variant === "medium" && modal_box_default.modifiers.md), style }, props, { children }));
};
ModalBox.displayName = "ModalBox";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalContent.js
var ModalContent = (_a) => {
  var { backdropClassName, children, className, isOpen = false, "aria-label": ariaLabel, "aria-describedby": ariaDescribedby, "aria-labelledby": ariaLabelledby, onClose, variant = "default", position, positionOffset, width, maxWidth, boxId, backdropId, disableFocusTrap = false, ouiaId, ouiaSafe = true, elementToFocus } = _a, props = __rest(_a, ["backdropClassName", "children", "className", "isOpen", "aria-label", "aria-describedby", "aria-labelledby", "onClose", "variant", "position", "positionOffset", "width", "maxWidth", "boxId", "backdropId", "disableFocusTrap", "ouiaId", "ouiaSafe", "elementToFocus"]);
  if (!isOpen) {
    return null;
  }
  const getAriaLabelledBy = () => {
    if (ariaLabelledby) {
      return ariaLabelledby;
    }
    if (ariaLabel) {
      return void 0;
    }
    return boxId;
  };
  const modalBox = (0, import_jsx_runtime10.jsxs)(ModalBox, Object.assign({ className: css(className), variant, position, positionOffset, "aria-label": ariaLabel, "aria-labelledby": getAriaLabelledBy(), "aria-describedby": ariaDescribedby }, getOUIAProps(ModalContent.displayName, ouiaId, ouiaSafe), { style: Object.assign(Object.assign({}, width && { "--pf-v6-c-modal-box--Width": typeof width !== "number" ? width : `${width}px` }), maxWidth && {
    "--pf-v6-c-modal-box--MaxWidth": typeof maxWidth !== "number" ? maxWidth : `${maxWidth}px`
  }) }, props, { id: boxId, children: [onClose && (0, import_jsx_runtime10.jsx)(ModalBoxCloseButton, { onClose: (event) => onClose(event), ouiaId }), children] }));
  return (0, import_jsx_runtime10.jsx)(Backdrop, { className: css(backdropClassName), id: backdropId, children: (0, import_jsx_runtime10.jsx)(FocusTrap, { active: !disableFocusTrap, focusTrapOptions: {
    clickOutsideDeactivates: true,
    tabbableOptions: { displayCheck: "none" },
    // FocusTrap's initialFocus can accept false as a value to prevent initial focus.
    // We want to prevent this in case false is ever passed in.
    initialFocus: elementToFocus || void 0
  }, className: css(bullseye_default.bullseye), children: modalBox }) });
};
ModalContent.displayName = "ModalContent";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/Modal.js
var ModalVariant;
(function(ModalVariant2) {
  ModalVariant2["small"] = "small";
  ModalVariant2["medium"] = "medium";
  ModalVariant2["large"] = "large";
  ModalVariant2["default"] = "default";
})(ModalVariant || (ModalVariant = {}));
var Modal = class _Modal extends import_react.Component {
  constructor(props) {
    super(props);
    this.boxId = "";
    this.backdropId = "";
    this.handleEscKeyClick = (event) => {
      var _a, _b;
      const { onEscapePress } = this.props;
      if (event.key === KeyTypes.Escape && this.props.isOpen) {
        onEscapePress ? onEscapePress(event) : (_b = (_a = this.props).onClose) === null || _b === void 0 ? void 0 : _b.call(_a, event);
      }
    };
    this.getElement = (appendTo) => {
      if (typeof appendTo === "function") {
        return appendTo();
      }
      return appendTo || document.body;
    };
    this.toggleSiblingsFromScreenReaders = (hide) => {
      const { appendTo } = this.props;
      const target = this.getElement(appendTo);
      const bodyChildren = target.children;
      for (const child of Array.from(bodyChildren)) {
        if (child.id !== this.backdropId) {
          hide ? child.setAttribute("aria-hidden", "" + hide) : child.removeAttribute("aria-hidden");
        }
      }
    };
    this.isEmpty = (value) => value === null || value === void 0 || value === "";
    const boxIdNum = _Modal.currentId++;
    const backdropId = boxIdNum + 1;
    this.boxId = props.id || `pf-modal-part-${boxIdNum}`;
    this.backdropId = `pf-modal-part-${backdropId}`;
    this.state = {
      ouiaStateId: getDefaultOUIAId(_Modal.displayName, props.variant)
    };
  }
  componentDidMount() {
    const { appendTo } = this.props;
    const target = this.getElement(appendTo);
    target.addEventListener("keydown", this.handleEscKeyClick, false);
    if (this.props.isOpen) {
      target.classList.add(css(backdrop_default.backdropOpen));
      this.toggleSiblingsFromScreenReaders(true);
    }
  }
  componentDidUpdate(prevProps) {
    const { appendTo } = this.props;
    const target = this.getElement(appendTo);
    if (this.props.isOpen) {
      target.classList.add(css(backdrop_default.backdropOpen));
      this.toggleSiblingsFromScreenReaders(true);
    } else {
      if (prevProps.isOpen !== this.props.isOpen) {
        target.classList.remove(css(backdrop_default.backdropOpen));
        this.toggleSiblingsFromScreenReaders(false);
      }
    }
  }
  componentWillUnmount() {
    const { appendTo } = this.props;
    const target = this.getElement(appendTo);
    target.removeEventListener("keydown", this.handleEscKeyClick, false);
    target.classList.remove(css(backdrop_default.backdropOpen));
    this.toggleSiblingsFromScreenReaders(false);
  }
  render() {
    const _a = this.props, {
      appendTo,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onEscapePress,
      "aria-labelledby": ariaLabelledby,
      "aria-label": ariaLabel,
      "aria-describedby": ariaDescribedby,
      ouiaId,
      ouiaSafe,
      position,
      elementToFocus
    } = _a, props = __rest(_a, ["appendTo", "onEscapePress", "aria-labelledby", "aria-label", "aria-describedby", "ouiaId", "ouiaSafe", "position", "elementToFocus"]);
    if (!canUseDOM || !this.getElement(appendTo)) {
      return null;
    }
    return ReactDOM.createPortal((0, import_jsx_runtime11.jsx)(ModalContent, Object.assign({ boxId: this.boxId, backdropId: this.backdropId, "aria-label": ariaLabel, "aria-describedby": ariaDescribedby, "aria-labelledby": ariaLabelledby, ouiaId: ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe, position, elementToFocus, backdropClassName: props.backdropClassName }, props)), this.getElement(appendTo));
  }
};
Modal.displayName = "Modal";
Modal.currentId = 0;
Modal.defaultProps = {
  isOpen: false,
  variant: "default",
  appendTo: () => document.body,
  ouiaSafe: true,
  position: "default"
};

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBody.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var ModalBody = (_a) => {
  var { children, className, "aria-label": ariaLabel, role } = _a, props = __rest(_a, ["children", "className", "aria-label", "role"]);
  const defaultModalBodyRole = ariaLabel ? "region" : void 0;
  return (0, import_jsx_runtime12.jsx)("div", Object.assign({ "aria-label": ariaLabel, role: role || defaultModalBodyRole, className: css(modal_box_default.modalBoxBody, className) }, props, { children }));
};
ModalBody.displayName = "ModalBody";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalHeader.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxDescription.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var ModalBoxDescription = (_a) => {
  var { children = null, className = "", id = "" } = _a, props = __rest(_a, ["children", "className", "id"]);
  return (0, import_jsx_runtime13.jsx)("div", Object.assign({}, props, { id, className: css(modal_box_default.modalBoxDescription, className), children }));
};
ModalBoxDescription.displayName = "ModalBoxDescription";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalBoxTitle.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var import_react2 = __toESM(require_react());
var isVariantIcon = (icon) => ["success", "danger", "warning", "info", "custom"].includes(icon);
var ModalBoxTitle = (_a) => {
  var { className, id, title, titleIconVariant, titleScreenReaderText } = _a, props = __rest(_a, ["className", "id", "title", "titleIconVariant", "titleScreenReaderText"]);
  const [hasTooltip, setHasTooltip] = (0, import_react2.useState)(false);
  const h1 = (0, import_react2.useRef)(null);
  const label = titleScreenReaderText || (isVariantIcon(titleIconVariant) ? `${capitalize(titleIconVariant)} alert:` : titleScreenReaderText);
  const variantIcons4 = {
    success: (0, import_jsx_runtime14.jsx)(check_circle_icon_default, {}),
    danger: (0, import_jsx_runtime14.jsx)(exclamation_circle_icon_default, {}),
    warning: (0, import_jsx_runtime14.jsx)(exclamation_triangle_icon_default, {}),
    info: (0, import_jsx_runtime14.jsx)(info_circle_icon_default, {}),
    custom: (0, import_jsx_runtime14.jsx)(bell_icon_default, {})
  };
  const CustomIcon = !isVariantIcon(titleIconVariant) && titleIconVariant;
  useIsomorphicLayoutEffect(() => {
    setHasTooltip(h1.current && h1.current.offsetWidth < h1.current.scrollWidth);
  }, []);
  const content = (0, import_jsx_runtime14.jsxs)("h1", Object.assign({ id, ref: h1, className: css(modal_box_default.modalBoxTitle, titleIconVariant && modal_box_default.modifiers.icon, isVariantIcon(titleIconVariant) && modal_box_default.modifiers[titleIconVariant], className) }, props, { children: [titleIconVariant && (0, import_jsx_runtime14.jsx)("span", { className: css(modal_box_default.modalBoxTitleIcon), children: isVariantIcon(titleIconVariant) ? variantIcons4[titleIconVariant] : (0, import_jsx_runtime14.jsx)(CustomIcon, {}) }), label && (0, import_jsx_runtime14.jsx)("span", { className: "pf-v6-screen-reader", children: label }), (0, import_jsx_runtime14.jsx)("span", { className: css(modal_box_default.modalBoxTitleText), children: title })] }));
  return hasTooltip ? (0, import_jsx_runtime14.jsx)(Tooltip, { content: title, children: content }) : content;
};
ModalBoxTitle.displayName = "ModalBoxTitle";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalHeader.js
var ModalHeader = (_a) => {
  var { children, className, descriptorId, description, labelId, title, titleIconVariant, titleScreenReaderText, help } = _a, props = __rest(_a, ["children", "className", "descriptorId", "description", "labelId", "title", "titleIconVariant", "titleScreenReaderText", "help"]);
  const headerContent = children ? children : (0, import_jsx_runtime15.jsxs)(import_jsx_runtime15.Fragment, { children: [(0, import_jsx_runtime15.jsx)(ModalBoxTitle, { title, titleIconVariant, titleScreenReaderText, id: labelId }), description && (0, import_jsx_runtime15.jsx)(ModalBoxDescription, { id: descriptorId, children: description })] });
  return (0, import_jsx_runtime15.jsxs)("header", Object.assign({ className: css(modal_box_default.modalBoxHeader, help && modal_box_default.modifiers.help, className) }, props, { children: [help && (0, import_jsx_runtime15.jsxs)(import_jsx_runtime15.Fragment, { children: [(0, import_jsx_runtime15.jsx)("div", { className: css(modal_box_default.modalBoxHeaderMain), children: headerContent }), (0, import_jsx_runtime15.jsx)("div", { className: `${modal_box_default.modalBoxHeader}-help`, children: help })] }), !help && headerContent] }));
};
ModalHeader.displayName = "ModalHeader";

// node_modules/@patternfly/react-core/dist/esm/components/Modal/ModalFooter.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var ModalFooter = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime16.jsx)("footer", Object.assign({}, props, { className: css(modal_box_default.modalBoxFooter, className), children }));
};
ModalFooter.displayName = "ModalFooter";

// node_modules/@patternfly/react-core/dist/esm/components/AboutModal/AboutModal.js
var AboutModal = (_a) => {
  var { children, className, isOpen = false, onClose = (_e) => void 0, productName, trademark, backgroundImageSrc, brandImageSrc, brandImageAlt, hasNoContentContainer = false, appendTo, closeButtonAriaLabel, "aria-label": ariaLabel, disableFocusTrap } = _a, props = __rest(_a, ["children", "className", "isOpen", "onClose", "productName", "trademark", "backgroundImageSrc", "brandImageSrc", "brandImageAlt", "hasNoContentContainer", "appendTo", "closeButtonAriaLabel", "aria-label", "disableFocusTrap"]);
  if (brandImageSrc && !brandImageAlt) {
    console.error("AboutModal:", "brandImageAlt is required when a brandImageSrc is specified, and should not be an empty string.");
  }
  if (!productName && !ariaLabel) {
    console.error("AboutModal:", "Either productName or ariaLabel is required for component to be accessible");
  }
  if (!isOpen) {
    return null;
  }
  return (0, import_jsx_runtime17.jsx)(GenerateId, { prefix: "pf-about-modal-title-", children: (ariaLabelledBy) => (0, import_jsx_runtime17.jsx)(Modal, Object.assign({ isOpen, variant: ModalVariant.large }, productName && { "aria-labelledby": ariaLabelledBy }, { "aria-label": ariaLabel, onEscapePress: onClose, appendTo, disableFocusTrap, children: (0, import_jsx_runtime17.jsxs)(AboutModalBox, { style: backgroundImageSrc ? { [c_about_modal_box_BackgroundImage_default.name]: `url(${backgroundImageSrc})` } : {}, className: css(className), children: [(0, import_jsx_runtime17.jsx)(AboutModalBoxBrand, { src: brandImageSrc, alt: brandImageAlt }), (0, import_jsx_runtime17.jsx)(AboutModalBoxCloseButton, { "aria-label": closeButtonAriaLabel, onClose }), productName && (0, import_jsx_runtime17.jsx)(AboutModalBoxHeader, { id: ariaLabelledBy, productName }), (0, import_jsx_runtime17.jsx)(AboutModalBoxContent, Object.assign({ trademark, hasNoContentContainer }, props, { children }))] }) })) });
};
AboutModal.displayName = "AboutModal";

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/Accordion.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/Accordion/accordion.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Accordion/accordion.css";
var accordion_default = {
  "accordion": "pf-v6-c-accordion",
  "accordionExpandableContent": "pf-v6-c-accordion__expandable-content",
  "accordionExpandableContentBody": "pf-v6-c-accordion__expandable-content-body",
  "accordionItem": "pf-v6-c-accordion__item",
  "accordionToggle": "pf-v6-c-accordion__toggle",
  "accordionToggleIcon": "pf-v6-c-accordion__toggle-icon",
  "accordionToggleText": "pf-v6-c-accordion__toggle-text",
  "dirRtl": "pf-v6-m-dir-rtl",
  "modifiers": {
    "toggleStart": "pf-m-toggle-start",
    "displayLg": "pf-m-display-lg",
    "bordered": "pf-m-bordered",
    "expanded": "pf-m-expanded",
    "fixed": "pf-m-fixed"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionContext.js
var import_react3 = __toESM(require_react());
var AccordionContext = (0, import_react3.createContext)({});
var AccordionItemContext = (0, import_react3.createContext)({});

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/Accordion.js
var Accordion = (_a) => {
  var { children = null, className = "", "aria-label": ariaLabel, headingLevel = "h3", asDefinitionList = true, isBordered = false, displaySize = "default", togglePosition = "end" } = _a, props = __rest(_a, ["children", "className", "aria-label", "headingLevel", "asDefinitionList", "isBordered", "displaySize", "togglePosition"]);
  const AccordionList = asDefinitionList ? "dl" : "div";
  return (0, import_jsx_runtime18.jsx)(AccordionList, Object.assign({ className: css(accordion_default.accordion, isBordered && accordion_default.modifiers.bordered, togglePosition === "start" && accordion_default.modifiers.toggleStart, displaySize === "lg" && accordion_default.modifiers.displayLg, className), "aria-label": ariaLabel }, !asDefinitionList && ariaLabel && { role: "region" }, props, { children: (0, import_jsx_runtime18.jsx)(AccordionContext.Provider, { value: {
    ContentContainer: asDefinitionList ? "dd" : "div",
    ToggleContainer: asDefinitionList ? "dt" : headingLevel,
    togglePosition
  }, children }) }));
};
Accordion.displayName = "Accordion";

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionContent.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var import_react4 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionExpandableContentBody.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var AccordionExpandableContentBody = (_a) => {
  var { children = null } = _a, props = __rest(_a, ["children"]);
  return (0, import_jsx_runtime19.jsx)("div", Object.assign({ className: css(accordion_default.accordionExpandableContentBody) }, props, { children }));
};
AccordionExpandableContentBody.displayName = "AccordionExpandableContentBody";

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionContent.js
var AccordionContent = (_a) => {
  var { className = "", children = null, id = "", isFixed = false, isCustomContent = false, "aria-label": ariaLabel = "", "aria-labelledby": ariaLabelledby, component, contentBodyProps } = _a, props = __rest(_a, ["className", "children", "id", "isFixed", "isCustomContent", "aria-label", "aria-labelledby", "component", "contentBodyProps"]);
  const [hasScrollbar, setHasScrollbar] = (0, import_react4.useState)(false);
  const containerRef = (0, import_react4.useRef)(null);
  const { isExpanded } = (0, import_react4.useContext)(AccordionItemContext);
  (0, import_react4.useEffect)(() => {
    if ((containerRef === null || containerRef === void 0 ? void 0 : containerRef.current) && isFixed && isExpanded) {
      const { offsetHeight, scrollHeight } = containerRef.current;
      setHasScrollbar(offsetHeight < scrollHeight);
    } else if (!isFixed) {
      setHasScrollbar(false);
    }
  }, [containerRef, isFixed, isExpanded]);
  return (0, import_jsx_runtime20.jsx)(AccordionContext.Consumer, { children: ({ ContentContainer }) => {
    const Container = component || ContentContainer;
    return (0, import_jsx_runtime20.jsx)(Container, Object.assign({ ref: containerRef, id, className: css(accordion_default.accordionExpandableContent, isFixed && accordion_default.modifiers.fixed, className), hidden: !isExpanded }, ariaLabel && { "aria-label": ariaLabel }, ariaLabelledby && { "aria-labelledby": ariaLabelledby }, hasScrollbar && { tabIndex: 0 }, hasScrollbar && Container === "div" && { role: "region" }, props, { children: isCustomContent ? children : (0, import_jsx_runtime20.jsx)(AccordionExpandableContentBody, Object.assign({}, contentBodyProps, { children })) }));
  } });
};
AccordionContent.displayName = "AccordionContent";

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionItem.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var AccordionItem = (_a) => {
  var { children = null, className, isExpanded: isExpandedProp = false } = _a, props = __rest(_a, ["children", "className", "isExpanded"]);
  return (0, import_jsx_runtime21.jsx)(AccordionItemContext.Provider, { value: {
    isExpanded: isExpandedProp
  }, children: (0, import_jsx_runtime21.jsx)("div", Object.assign({ className: css(accordion_default.accordionItem, isExpandedProp && accordion_default.modifiers.expanded, className) }, props, { children })) });
};
AccordionItem.displayName = "AccordionItem";

// node_modules/@patternfly/react-core/dist/esm/components/Accordion/AccordionToggle.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var import_react5 = __toESM(require_react());
var AccordionToggle = (_a) => {
  var { className = "", id, children = null, component } = _a, props = __rest(_a, ["className", "id", "children", "component"]);
  const renderToggleIcon = () => (0, import_jsx_runtime22.jsx)("span", { className: css(accordion_default.accordionToggleIcon), children: (0, import_jsx_runtime22.jsx)(angle_right_icon_default, {}) });
  const { isExpanded } = (0, import_react5.useContext)(AccordionItemContext);
  return (0, import_jsx_runtime22.jsx)(AccordionContext.Consumer, { children: ({ ToggleContainer, togglePosition }) => {
    const Container = component || ToggleContainer;
    const isToggleStartPositioned = togglePosition === "start";
    return (0, import_jsx_runtime22.jsx)(Container, { children: (0, import_jsx_runtime22.jsxs)("button", Object.assign({ id, className: css(accordion_default.accordionToggle, isExpanded && accordion_default.modifiers.expanded, className), "aria-expanded": isExpanded, type: "button" }, props, { children: [isToggleStartPositioned && renderToggleIcon(), (0, import_jsx_runtime22.jsx)("span", { className: css(accordion_default.accordionToggleText), children }), !isToggleStartPositioned && renderToggleIcon()] })) });
  } });
};
AccordionToggle.displayName = "AccordionToggle";

// node_modules/@patternfly/react-core/dist/esm/components/Alert/Alert.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var import_react9 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Alert/alert.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Alert/alert.css";
var alert_default = {
  "alert": "pf-v6-c-alert",
  "alertAction": "pf-v6-c-alert__action",
  "alertActionGroup": "pf-v6-c-alert__action-group",
  "alertDescription": "pf-v6-c-alert__description",
  "alertIcon": "pf-v6-c-alert__icon",
  "alertTitle": "pf-v6-c-alert__title",
  "alertToggle": "pf-v6-c-alert__toggle",
  "alertToggleIcon": "pf-v6-c-alert__toggle-icon",
  "button": "pf-v6-c-button",
  "dirRtl": "pf-v6-m-dir-rtl",
  "modifiers": {
    "custom": "pf-m-custom",
    "success": "pf-m-success",
    "danger": "pf-m-danger",
    "warning": "pf-m-warning",
    "info": "pf-m-info",
    "inline": "pf-m-inline",
    "plain": "pf-m-plain",
    "expandable": "pf-m-expandable",
    "expanded": "pf-m-expanded",
    "truncate": "pf-m-truncate"
  }
};

// node_modules/@patternfly/react-styles/css/components/Alert/alert-group.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Alert/alert-group.css";
var alert_group_default = {
  "alert": "pf-v6-c-alert",
  "alertGroup": "pf-v6-c-alert-group",
  "alertGroupItem": "pf-v6-c-alert-group__item",
  "alertGroupOverflowButton": "pf-v6-c-alert-group__overflow-button",
  "dirRtl": "pf-v6-m-dir-rtl",
  "modifiers": {
    "toast": "pf-m-toast",
    "offstageTop": "pf-m-offstage-top",
    "incoming": "pf-m-incoming",
    "offstageRight": "pf-m-offstage-right",
    "outgoing": "pf-m-outgoing"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertIcon.js
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var variantIcons = {
  success: check_circle_icon_default,
  danger: exclamation_circle_icon_default,
  warning: exclamation_triangle_icon_default,
  info: info_circle_icon_default,
  custom: bell_icon_default
};
var AlertIcon = (_a) => {
  var { variant, customIcon, className = "" } = _a, props = __rest(_a, ["variant", "customIcon", "className"]);
  const Icon2 = variantIcons[variant];
  return Icon2 ? (0, import_jsx_runtime23.jsx)("div", Object.assign({}, props, { className: css(alert_default.alertIcon, className), children: customIcon || (0, import_jsx_runtime23.jsx)(Icon2, {}) })) : null;
};

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertContext.js
var import_react6 = __toESM(require_react());
var AlertContext = (0, import_react6.createContext)(null);

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertGroupContext.js
var import_react7 = __toESM(require_react());
var AlertGroupContext = (0, import_react7.createContext)({
  hasAnimations: false,
  updateTransitionEnd: () => {
  }
});

// node_modules/@patternfly/react-tokens/dist/esm/c_alert__title_max_lines.js
var c_alert__title_max_lines = {
  "name": "--pf-v6-c-alert__title--max-lines",
  "value": "1",
  "var": "var(--pf-v6-c-alert__title--max-lines)"
};
var c_alert_title_max_lines_default = c_alert__title_max_lines;

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertToggleExpandButton.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var import_react8 = __toESM(require_react());
var AlertToggleExpandButton = (_a) => {
  var { "aria-label": ariaLabel = "", variantLabel, onToggleExpand, isExpanded = false } = _a, props = __rest(_a, ["aria-label", "variantLabel", "onToggleExpand", "isExpanded"]);
  const { title, variantLabel: alertVariantLabel } = (0, import_react8.useContext)(AlertContext);
  return (0, import_jsx_runtime24.jsx)(Button, Object.assign({ variant: ButtonVariant.plain, onClick: onToggleExpand, "aria-expanded": isExpanded, "aria-label": ariaLabel === "" ? `Toggle ${variantLabel || alertVariantLabel} alert: ${title}` : ariaLabel }, props, { icon: (0, import_jsx_runtime24.jsx)("span", { className: css(alert_default.alertToggleIcon), children: (0, import_jsx_runtime24.jsx)(angle_right_icon_default, {}) }) }));
};
AlertToggleExpandButton.displayName = "AlertToggleExpandButton";

// node_modules/@patternfly/react-core/dist/esm/components/Alert/Alert.js
var AlertVariant;
(function(AlertVariant2) {
  AlertVariant2["success"] = "success";
  AlertVariant2["danger"] = "danger";
  AlertVariant2["warning"] = "warning";
  AlertVariant2["info"] = "info";
  AlertVariant2["custom"] = "custom";
})(AlertVariant || (AlertVariant = {}));
var Alert = (_a) => {
  var { variant = AlertVariant.custom, isInline = false, isPlain = false, isLiveRegion = false, variantLabel = `${capitalize(variant)} alert:`, actionClose, actionLinks, title, component = "h4", children = "", className = "", ouiaId, ouiaSafe = true, timeout = false, timeoutAnimation = 3e3, onTimeout = () => {
  }, truncateTitle = 0, tooltipPosition, customIcon, isExpandable = false, toggleAriaLabel = `${capitalize(variant)} alert details`, onMouseEnter = () => {
  }, onMouseLeave = () => {
  }, id } = _a, props = __rest(_a, ["variant", "isInline", "isPlain", "isLiveRegion", "variantLabel", "actionClose", "actionLinks", "title", "component", "children", "className", "ouiaId", "ouiaSafe", "timeout", "timeoutAnimation", "onTimeout", "truncateTitle", "tooltipPosition", "customIcon", "isExpandable", "toggleAriaLabel", "onMouseEnter", "onMouseLeave", "id"]);
  const ouiaProps = useOUIAProps(Alert.displayName, ouiaId, ouiaSafe, variant);
  const getHeadingContent = (0, import_jsx_runtime25.jsxs)(import_react9.Fragment, { children: [(0, import_jsx_runtime25.jsx)("span", { className: "pf-v6-screen-reader", children: variantLabel }), title] });
  const titleRef = (0, import_react9.useRef)(null);
  const TitleComponent = component;
  const divRef = (0, import_react9.useRef)(void 0);
  const [isTooltipVisible, setIsTooltipVisible] = (0, import_react9.useState)(false);
  (0, import_react9.useEffect)(() => {
    if (!titleRef.current || !truncateTitle) {
      return;
    }
    titleRef.current.style.setProperty(c_alert_title_max_lines_default.name, truncateTitle.toString());
    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;
    if (isTooltipVisible !== showTooltip) {
      setIsTooltipVisible(showTooltip);
    }
  }, [titleRef, truncateTitle, isTooltipVisible]);
  const [timedOut, setTimedOut] = (0, import_react9.useState)(false);
  const [timedOutAnimation, setTimedOutAnimation] = (0, import_react9.useState)(true);
  const [isMouseOver, setIsMouseOver] = (0, import_react9.useState)();
  const [containsFocus, setContainsFocus] = (0, import_react9.useState)();
  const shouldDismiss = timedOut && timedOutAnimation && !isMouseOver && !containsFocus;
  const [isDismissed, setIsDismissed] = (0, import_react9.useState)(false);
  const { hasAnimations, updateTransitionEnd } = (0, import_react9.useContext)(AlertGroupContext);
  const { offstageRight } = alert_group_default.modifiers;
  const getParentAlertGroupItem = () => {
    var _a2;
    return (_a2 = divRef.current) === null || _a2 === void 0 ? void 0 : _a2.closest(`.${alert_group_default.alertGroupItem}`);
  };
  (0, import_react9.useEffect)(() => {
    const shouldSetDismissed = shouldDismiss && !isDismissed;
    if (!shouldSetDismissed) {
      return;
    }
    const alertGroupItem = getParentAlertGroupItem();
    alertGroupItem === null || alertGroupItem === void 0 ? void 0 : alertGroupItem.classList.add(offstageRight);
    if (hasAnimations) {
      updateTransitionEnd(() => {
        setIsDismissed(true);
      });
    } else {
      setIsDismissed(true);
    }
  }, [shouldDismiss, isDismissed]);
  (0, import_react9.useEffect)(() => {
    const calculatedTimeout = timeout === true ? 8e3 : Number(timeout);
    if (calculatedTimeout > 0) {
      const timer = setTimeout(() => setTimedOut(true), calculatedTimeout);
      return () => clearTimeout(timer);
    }
  }, [timeout]);
  (0, import_react9.useEffect)(() => {
    const onDocumentFocus = () => {
      if (divRef.current) {
        if (divRef.current.contains(document.activeElement)) {
          setContainsFocus(true);
          setTimedOutAnimation(false);
        } else if (containsFocus) {
          setContainsFocus(false);
        }
      }
    };
    document.addEventListener("focus", onDocumentFocus, true);
    return () => document.removeEventListener("focus", onDocumentFocus, true);
  }, [containsFocus]);
  (0, import_react9.useEffect)(() => {
    if (containsFocus === false || isMouseOver === false) {
      const timer = setTimeout(() => setTimedOutAnimation(true), timeoutAnimation);
      return () => clearTimeout(timer);
    }
  }, [containsFocus, isMouseOver, timeoutAnimation]);
  (0, import_react9.useEffect)(() => {
    isDismissed && onTimeout();
  }, [isDismissed, onTimeout]);
  (0, import_react9.useEffect)(() => {
    const alertGroupItem = getParentAlertGroupItem();
    setTimeout(() => alertGroupItem === null || alertGroupItem === void 0 ? void 0 : alertGroupItem.classList.remove(alert_group_default.modifiers.offstageTop), 0);
  }, []);
  const [isExpanded, setIsExpanded] = (0, import_react9.useState)(false);
  const onToggleExpand = () => {
    setIsExpanded(!isExpanded);
  };
  const myOnMouseEnter = (ev) => {
    setIsMouseOver(true);
    setTimedOutAnimation(false);
    onMouseEnter(ev);
  };
  const myOnMouseLeave = (ev) => {
    setIsMouseOver(false);
    onMouseLeave(ev);
  };
  if (shouldDismiss && isDismissed) {
    return null;
  }
  const Title2 = (0, import_jsx_runtime25.jsx)(TitleComponent, Object.assign({}, isTooltipVisible && { tabIndex: 0 }, { ref: titleRef, className: css(alert_default.alertTitle, truncateTitle && alert_default.modifiers.truncate), children: getHeadingContent }));
  return (0, import_jsx_runtime25.jsxs)("div", Object.assign({ ref: divRef, className: css(alert_default.alert, isInline && alert_default.modifiers.inline, isPlain && alert_default.modifiers.plain, isExpandable && alert_default.modifiers.expandable, isExpanded && alert_default.modifiers.expanded, alert_default.modifiers[variant], className) }, ouiaProps, isLiveRegion && {
    "aria-live": "polite",
    "aria-atomic": "false"
  }, { onMouseEnter: myOnMouseEnter, onMouseLeave: myOnMouseLeave, id }, props, { children: [isExpandable && (0, import_jsx_runtime25.jsx)(AlertContext.Provider, { value: { title, variantLabel }, children: (0, import_jsx_runtime25.jsx)("div", { className: css(alert_default.alertToggle), children: (0, import_jsx_runtime25.jsx)(AlertToggleExpandButton, { isExpanded, onToggleExpand, "aria-label": toggleAriaLabel }) }) }), (0, import_jsx_runtime25.jsx)(AlertIcon, { variant, customIcon }), isTooltipVisible ? (0, import_jsx_runtime25.jsx)(Tooltip, { content: getHeadingContent, position: tooltipPosition, children: Title2 }) : Title2, actionClose && (0, import_jsx_runtime25.jsx)(AlertContext.Provider, { value: { title, variantLabel }, children: (0, import_jsx_runtime25.jsx)("div", { className: css(alert_default.alertAction), children: actionClose }) }), children && (!isExpandable || isExpandable && isExpanded) && (0, import_jsx_runtime25.jsx)("div", { className: css(alert_default.alertDescription), children }), actionLinks && (0, import_jsx_runtime25.jsx)("div", { className: css(alert_default.alertActionGroup), children: actionLinks })] }));
};
Alert.displayName = "Alert";

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertActionCloseButton.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var import_react10 = __toESM(require_react());
var AlertActionCloseButton = (_a) => {
  var { className, onClose = () => void 0, "aria-label": ariaLabel = "", variantLabel } = _a, props = __rest(_a, ["className", "onClose", "aria-label", "variantLabel"]);
  const closeButtonRef = (0, import_react10.useRef)(null);
  const { hasAnimations, updateTransitionEnd } = (0, import_react10.useContext)(AlertGroupContext);
  const { offstageRight } = alert_group_default.modifiers;
  const getParentAlertGroupItem = () => {
    var _a2;
    return (_a2 = closeButtonRef.current) === null || _a2 === void 0 ? void 0 : _a2.closest(`.${alert_group_default.alertGroupItem}`);
  };
  const handleOnClick = () => {
    var _a2;
    if (hasAnimations) {
      (_a2 = getParentAlertGroupItem()) === null || _a2 === void 0 ? void 0 : _a2.classList.add(offstageRight);
      updateTransitionEnd(onClose);
    } else {
      onClose();
    }
  };
  return (0, import_jsx_runtime26.jsx)(AlertContext.Consumer, { children: ({ title, variantLabel: alertVariantLabel }) => (0, import_jsx_runtime26.jsx)(Button, Object.assign({ ref: closeButtonRef, variant: ButtonVariant.plain, onClick: handleOnClick, "aria-label": ariaLabel === "" ? `Close ${variantLabel || alertVariantLabel} alert: ${title}` : ariaLabel, className, icon: (0, import_jsx_runtime26.jsx)(times_icon_default, {}) }, props)) });
};
AlertActionCloseButton.displayName = "AlertActionCloseButton";

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertActionLink.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
var AlertActionLink = (_a) => {
  var { className = "", children } = _a, props = __rest(_a, ["className", "children"]);
  return (0, import_jsx_runtime27.jsx)(Button, Object.assign({ variant: ButtonVariant.link, isInline: true, className }, props, { children }));
};
AlertActionLink.displayName = "AlertActionLink";

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertGroup.js
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var import_react12 = __toESM(require_react());
var ReactDOM2 = __toESM(require_react_dom());

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertGroupInline.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var import_react11 = __toESM(require_react());
var AlertGroupInline = (_a) => {
  var { className, children, hasAnimations, isToast, isLiveRegion, onOverflowClick, overflowMessage } = _a, props = __rest(_a, ["className", "children", "hasAnimations", "isToast", "isLiveRegion", "onOverflowClick", "overflowMessage"]);
  const [handleTransitionEnd, setHandleTransitionEnd] = (0, import_react11.useState)(() => () => {
  });
  const updateTransitionEnd = (onTransitionEnd2) => {
    setHandleTransitionEnd(() => onTransitionEnd2);
  };
  (0, import_react11.useEffect)(() => () => {
    setHandleTransitionEnd(() => () => {
    });
  }, []);
  const onTransitionEnd = (event) => {
    var _a2;
    if (!hasAnimations) {
      return;
    }
    const prefersReducedMotion = !((_a2 = window.matchMedia("(prefers-reduced-motion: no-preference)")) === null || _a2 === void 0 ? void 0 : _a2.matches);
    if (
      // If a user has no motion preference, we want to target the grid template rows transition
      // so that the onClose is called after the "slide up" animation of other alerts finishes.
      // If they have motion preference, we don't need to check for a specific transition since only opacity should fire.
      (prefersReducedMotion || !prefersReducedMotion && event.propertyName === "grid-template-rows") && event.target.className.includes(alert_group_default.modifiers.offstageRight)
    ) {
      handleTransitionEnd();
      setHandleTransitionEnd(() => () => {
      });
    }
  };
  return (0, import_jsx_runtime28.jsx)(AlertGroupContext.Provider, { value: { hasAnimations, updateTransitionEnd }, children: (0, import_jsx_runtime28.jsxs)("ul", Object.assign({ role: "list", "aria-live": isLiveRegion ? "polite" : null, "aria-atomic": isLiveRegion ? false : null, className: css(alert_group_default.alertGroup, className, isToast ? alert_group_default.modifiers.toast : "") }, props, { children: [import_react11.Children.toArray(children).map((alert, index) => {
    var _a2;
    return (0, import_jsx_runtime28.jsx)("li", { onTransitionEnd, className: css(alert_group_default.alertGroupItem, hasAnimations && alert_group_default.modifiers.offstageTop), children: alert }, ((_a2 = alert.props) === null || _a2 === void 0 ? void 0 : _a2.id) || `alertGroupItem-${alert.key}` || index);
  }), overflowMessage && (0, import_jsx_runtime28.jsx)("li", { children: (0, import_jsx_runtime28.jsx)("button", { onClick: onOverflowClick, className: css(alert_group_default.alertGroupOverflowButton), children: overflowMessage }) })] })) });
};
AlertGroupInline.displayName = "AlertGroupInline";

// node_modules/@patternfly/react-core/dist/esm/components/Alert/AlertGroup.js
var AlertGroup = class extends import_react12.Component {
  constructor() {
    super(...arguments);
    this.state = {
      container: void 0
    };
  }
  componentDidMount() {
    const container = document.createElement("div");
    const target = this.getTargetElement();
    this.setState({ container });
    target.appendChild(container);
  }
  componentWillUnmount() {
    const target = this.getTargetElement();
    if (this.state.container) {
      target.removeChild(this.state.container);
    }
  }
  getTargetElement() {
    const appendTo = this.props.appendTo;
    if (typeof appendTo === "function") {
      return appendTo();
    }
    return appendTo || document.body;
  }
  render() {
    const _a = this.props, {
      className,
      children,
      hasAnimations = false,
      isToast,
      isLiveRegion,
      onOverflowClick,
      overflowMessage,
      "aria-label": ariaLabel,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      appendTo
    } = _a, props = __rest(_a, ["className", "children", "hasAnimations", "isToast", "isLiveRegion", "onOverflowClick", "overflowMessage", "aria-label", "appendTo"]);
    const alertGroup = (0, import_jsx_runtime29.jsx)(AlertGroupInline, Object.assign({ onOverflowClick, className, isToast, isLiveRegion, overflowMessage, "aria-label": ariaLabel, hasAnimations }, props, { children }));
    if (!this.props.isToast) {
      return alertGroup;
    }
    const container = this.state.container;
    if (!canUseDOM || !container) {
      return null;
    }
    return ReactDOM2.createPortal(alertGroup, container);
  }
};
AlertGroup.displayName = "AlertGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Avatar/Avatar.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/Avatar/avatar.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Avatar/avatar.css";
var avatar_default = {
  "avatar": "pf-v6-c-avatar",
  "modifiers": {
    "bordered": "pf-m-bordered",
    "sm": "pf-m-sm",
    "md": "pf-m-md",
    "lg": "pf-m-lg",
    "xl": "pf-m-xl"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Avatar/Avatar.js
var Avatar = (_a) => {
  var { className, src = "", alt, isBordered, size } = _a, props = __rest(_a, ["className", "src", "alt", "isBordered", "size"]);
  return (0, import_jsx_runtime30.jsx)("img", Object.assign({ src, alt, className: css(avatar_default.avatar, avatar_default.modifiers[size], isBordered && avatar_default.modifiers.bordered, className) }, props));
};
Avatar.displayName = "Avatar";

// node_modules/@patternfly/react-core/dist/esm/components/BackToTop/BackToTop.js
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
var import_react13 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/BackToTop/back-to-top.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/BackToTop/back-to-top.css";
var back_to_top_default = {
  "backToTop": "pf-v6-c-back-to-top",
  "button": "pf-v6-c-button",
  "modifiers": {
    "hidden": "pf-m-hidden"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/BackToTop/BackToTop.js
var BackToTopBase = (_a) => {
  var { className, title = "Back to top", innerRef, scrollableSelector, isAlwaysVisible = false } = _a, props = __rest(_a, ["className", "title", "innerRef", "scrollableSelector", "isAlwaysVisible"]);
  const [visible, setVisible] = (0, import_react13.useState)(isAlwaysVisible);
  (0, import_react13.useEffect)(() => {
    setVisible(isAlwaysVisible);
  }, [isAlwaysVisible]);
  const [scrollElement, setScrollElement] = (0, import_react13.useState)(null);
  const toggleVisible = () => {
    if (scrollElement) {
      const scrolled = scrollElement.scrollY ? scrollElement.scrollY : scrollElement.scrollTop;
      if (!isAlwaysVisible) {
        if (scrolled > 400) {
          setVisible(true);
        } else {
          setVisible(false);
        }
      }
    }
  };
  (0, import_react13.useEffect)(() => {
    const hasScrollSpy = Boolean(scrollableSelector);
    if (hasScrollSpy) {
      const scrollEl = document.querySelector(scrollableSelector);
      if (!canUseDOM || !(scrollEl instanceof HTMLElement)) {
        return;
      }
      setScrollElement(scrollEl);
      scrollEl.addEventListener("scroll", toggleVisible);
      return () => {
        scrollEl.removeEventListener("scroll", toggleVisible);
      };
    } else {
      if (!canUseDOM) {
        return;
      }
      const scrollEl = window;
      setScrollElement(scrollEl);
      scrollEl.addEventListener("scroll", toggleVisible);
      return () => {
        scrollEl.removeEventListener("scroll", toggleVisible);
      };
    }
  }, [scrollableSelector, toggleVisible]);
  const handleClick = () => {
    scrollElement.scrollTo({ top: 0, behavior: "smooth" });
  };
  return (0, import_jsx_runtime31.jsx)("div", Object.assign({ className: css(back_to_top_default.backToTop, !visible && back_to_top_default.modifiers.hidden, className), ref: innerRef, onClick: handleClick }, props, { children: (0, import_jsx_runtime31.jsx)(Button, { variant: "primary", icon: (0, import_jsx_runtime31.jsx)(angle_up_icon_default, {}), iconPosition: "end", children: title }) }));
};
var BackToTop = (0, import_react13.forwardRef)((props, ref) => (0, import_jsx_runtime31.jsx)(BackToTopBase, Object.assign({ innerRef: ref }, props)));
BackToTop.displayName = "BackToTop";

// node_modules/@patternfly/react-core/dist/esm/components/BackgroundImage/BackgroundImage.js
var import_jsx_runtime32 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/BackgroundImage/background-image.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/BackgroundImage/background-image.css";
var background_image_default = {
  "backgroundImage": "pf-v6-c-background-image",
  "dirRtl": "pf-v6-m-dir-rtl"
};

// node_modules/@patternfly/react-tokens/dist/esm/c_background_image_BackgroundImage.js
var c_background_image_BackgroundImage = {
  "name": "--pf-v6-c-background-image--BackgroundImage",
  "value": "none",
  "var": "var(--pf-v6-c-background-image--BackgroundImage)"
};
var c_background_image_BackgroundImage_default = c_background_image_BackgroundImage;

// node_modules/@patternfly/react-core/dist/esm/components/BackgroundImage/BackgroundImage.js
var BackgroundImage = (_a) => {
  var { className, src } = _a, props = __rest(_a, ["className", "src"]);
  return (0, import_jsx_runtime32.jsx)("div", Object.assign({ className: css(background_image_default.backgroundImage, className), style: {
    [c_background_image_BackgroundImage_default.name]: `url(${src})`
  } }, props));
};
BackgroundImage.displayName = "BackgroundImage";

// node_modules/@patternfly/react-core/dist/esm/components/Banner/Banner.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/Banner/banner.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Banner/banner.css";
var banner_default = {
  "banner": "pf-v6-c-banner",
  "button": "pf-v6-c-button",
  "modifiers": {
    "danger": "pf-m-danger",
    "success": "pf-m-success",
    "warning": "pf-m-warning",
    "info": "pf-m-info",
    "custom": "pf-m-custom",
    "red": "pf-m-red",
    "orangered": "pf-m-orangered",
    "orange": "pf-m-orange",
    "yellow": "pf-m-yellow",
    "green": "pf-m-green",
    "teal": "pf-m-teal",
    "blue": "pf-m-blue",
    "purple": "pf-m-purple",
    "sticky": "pf-m-sticky",
    "disabled": "pf-m-disabled",
    "inline": "pf-m-inline"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Banner/Banner.js
var Banner = (_a) => {
  var { children, className, screenReaderText, isSticky = false, color, status } = _a, props = __rest(_a, ["children", "className", "screenReaderText", "isSticky", "color", "status"]);
  const getStatusOrColorModifier = () => {
    if (status) {
      return banner_default.modifiers[status];
    }
    if (color) {
      return banner_default.modifiers[color];
    }
  };
  return (0, import_jsx_runtime33.jsxs)("div", Object.assign({ className: css(banner_default.banner, getStatusOrColorModifier(), isSticky && banner_default.modifiers.sticky, className) }, props, { children: [screenReaderText && (0, import_jsx_runtime33.jsx)("span", { className: "pf-v6-screen-reader", children: screenReaderText }), children] }));
};
Banner.displayName = "Banner";

// node_modules/@patternfly/react-core/dist/esm/components/Brand/Brand.js
var import_jsx_runtime34 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/Brand/brand.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Brand/brand.css";
var brand_default = {
  "brand": "pf-v6-c-brand",
  "modifiers": {
    "picture": "pf-m-picture"
  }
};

// node_modules/@patternfly/react-tokens/dist/esm/c_brand_Height.js
var c_brand_Height = {
  "name": "--pf-v6-c-brand--Height",
  "value": "auto",
  "var": "var(--pf-v6-c-brand--Height)"
};
var c_brand_Height_default = c_brand_Height;

// node_modules/@patternfly/react-tokens/dist/esm/c_brand_Width.js
var c_brand_Width = {
  "name": "--pf-v6-c-brand--Width",
  "value": "auto",
  "var": "var(--pf-v6-c-brand--Width)"
};
var c_brand_Width_default = c_brand_Width;

// node_modules/@patternfly/react-core/dist/esm/components/Brand/Brand.js
var Brand = (_a) => {
  var { className = "", src = "", alt, children, widths, heights, style } = _a, props = __rest(_a, ["className", "src", "alt", "children", "widths", "heights", "style"]);
  let responsiveStyles;
  if (widths !== void 0) {
    responsiveStyles = Object.assign({}, setBreakpointCssVars(widths, c_brand_Width_default.name));
  }
  if (heights !== void 0) {
    responsiveStyles = Object.assign(Object.assign({}, responsiveStyles), setBreakpointCssVars(heights, c_brand_Height_default.name));
  }
  return (
    /** the brand component currently contains no styling the 'pf-v6-c-brand' string will be used for the className */
    children !== void 0 ? (0, import_jsx_runtime34.jsxs)("picture", Object.assign({ className: css(brand_default.brand, brand_default.modifiers.picture, className), style: Object.assign(Object.assign({}, style), responsiveStyles) }, props, { children: [children, (0, import_jsx_runtime34.jsx)("img", { src, alt })] })) : (0, import_jsx_runtime34.jsx)("img", Object.assign({}, props, { className: css(brand_default.brand, className), style: Object.assign(Object.assign({}, style), responsiveStyles), src, alt }))
  );
};
Brand.displayName = "Brand";

// node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/Breadcrumb.js
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
var import_react14 = __toESM(require_react());
var Breadcrumb = (_a) => {
  var { children = null, className = "", "aria-label": ariaLabel = "Breadcrumb", ouiaId, ouiaSafe = true } = _a, props = __rest(_a, ["children", "className", "aria-label", "ouiaId", "ouiaSafe"]);
  const ouiaProps = useOUIAProps(Breadcrumb.displayName, ouiaId, ouiaSafe);
  return (0, import_jsx_runtime35.jsx)("nav", Object.assign({}, props, { "aria-label": ariaLabel, className: css(breadcrumb_default.breadcrumb, className) }, ouiaProps, { children: (0, import_jsx_runtime35.jsx)("ol", { className: breadcrumb_default.breadcrumbList, role: "list", children: import_react14.Children.map(children, (child, index) => {
    const showDivider = index > 0;
    if ((0, import_react14.isValidElement)(child)) {
      return (0, import_react14.cloneElement)(child, { showDivider });
    }
    return child;
  }) }) }));
};
Breadcrumb.displayName = "Breadcrumb";

// node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbItem.js
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var BreadcrumbItem = (_a) => {
  var { children = null, className: classNameProp = "", to = void 0, isActive = false, isDropdown = false, showDivider, target = void 0, component = "a", render = void 0 } = _a, props = __rest(_a, ["children", "className", "to", "isActive", "isDropdown", "showDivider", "target", "component", "render"]);
  const Component32 = component;
  const ariaCurrent = isActive ? "page" : void 0;
  const className = css(breadcrumb_default.breadcrumbLink, isActive && breadcrumb_default.modifiers.current);
  return (0, import_jsx_runtime36.jsxs)("li", Object.assign({}, props, { className: css(breadcrumb_default.breadcrumbItem, classNameProp), children: [showDivider && (0, import_jsx_runtime36.jsx)("span", { className: breadcrumb_default.breadcrumbItemDivider, children: (0, import_jsx_runtime36.jsx)(angle_right_icon_default, {}) }), component === "button" && (0, import_jsx_runtime36.jsx)("button", { className, "aria-current": ariaCurrent, type: "button", children }), isDropdown && (0, import_jsx_runtime36.jsx)("span", { className: css(breadcrumb_default.breadcrumbDropdown), children }), render && render({ className, ariaCurrent }), to && !render && (0, import_jsx_runtime36.jsx)(Component32, { href: to, target, className, "aria-current": ariaCurrent, children }), !to && component !== "button" && !isDropdown && children] }));
};
BreadcrumbItem.displayName = "BreadcrumbItem";

// node_modules/@patternfly/react-core/dist/esm/components/Breadcrumb/BreadcrumbHeading.js
var import_jsx_runtime37 = __toESM(require_jsx_runtime());
var import_react15 = __toESM(require_react());
var BreadcrumbHeading = (_a) => {
  var { children = null, className = "", to = void 0, target = void 0, component = "a", showDivider } = _a, props = __rest(_a, ["children", "className", "to", "target", "component", "showDivider"]);
  const Component32 = component;
  return (0, import_jsx_runtime37.jsxs)("li", Object.assign({}, props, { className: css(breadcrumb_default.breadcrumbItem, className), children: [showDivider && (0, import_jsx_runtime37.jsx)("span", { className: breadcrumb_default.breadcrumbItemDivider, children: (0, import_jsx_runtime37.jsx)(angle_right_icon_default, {}) }), (0, import_jsx_runtime37.jsxs)("h1", { className: breadcrumb_default.breadcrumbHeading, children: [!to && component === "button" && (0, import_jsx_runtime37.jsx)("button", { className: css(breadcrumb_default.breadcrumbLink, breadcrumb_default.modifiers.current), "aria-current": true, type: "button", children }), to && (0, import_jsx_runtime37.jsx)(Component32, { href: to, target, className: css(breadcrumb_default.breadcrumbLink, breadcrumb_default.modifiers.current), "aria-current": "page", children }), !to && component !== "button" && (0, import_jsx_runtime37.jsx)(import_react15.Fragment, { children })] })] }));
};
BreadcrumbHeading.displayName = "BreadcrumbHeading";

// node_modules/@patternfly/react-core/dist/esm/components/CalendarMonth/CalendarMonth.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime());
var import_react17 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroup.js
var import_jsx_runtime38 = __toESM(require_jsx_runtime());
var import_react16 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/InputGroup/input-group.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/InputGroup/input-group.css";
var input_group_default = {
  "inputGroup": "pf-v6-c-input-group",
  "inputGroupItem": "pf-v6-c-input-group__item",
  "inputGroupText": "pf-v6-c-input-group__text",
  "modifiers": {
    "searchExpandable": "pf-m-search-expandable",
    "expanded": "pf-m-expanded",
    "searchInput": "pf-m-search-input",
    "searchExpand": "pf-m-search-expand",
    "searchAction": "pf-m-search-action",
    "expandStart": "pf-m-expand-start",
    "box": "pf-m-box",
    "plain": "pf-m-plain",
    "disabled": "pf-m-disabled",
    "fill": "pf-m-fill"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroup.js
var InputGroupBase = (_a) => {
  var { className, children, innerRef } = _a, props = __rest(_a, ["className", "children", "innerRef"]);
  const ref = (0, import_react16.useRef)(null);
  const inputGroupRef = innerRef || ref;
  return (0, import_jsx_runtime38.jsx)("div", Object.assign({ ref: inputGroupRef, className: css(input_group_default.inputGroup, className) }, props, { children }));
};
InputGroupBase.displayName = "InputGroupBase";
var InputGroup = (0, import_react16.forwardRef)((props, ref) => (0, import_jsx_runtime38.jsx)(InputGroupBase, Object.assign({ innerRef: ref }, props)));
InputGroup.displayName = "InputGroup";

// node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroupItem.js
var import_jsx_runtime39 = __toESM(require_jsx_runtime());
var InputGroupItem = (_a) => {
  var { className, children, isFill = false, isBox = false, isPlain, isDisabled } = _a, props = __rest(_a, ["className", "children", "isFill", "isBox", "isPlain", "isDisabled"]);
  return (0, import_jsx_runtime39.jsx)("div", Object.assign({ className: css(input_group_default.inputGroupItem, isFill && input_group_default.modifiers.fill, isBox && input_group_default.modifiers.box, isPlain && input_group_default.modifiers.plain, isDisabled && input_group_default.modifiers.disabled, className) }, props, { children }));
};
InputGroupItem.displayName = "InputGroupItem";

// node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroupText.js
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
var InputGroupText = (_a) => {
  var { className, component = "span", children, isPlain, isDisabled } = _a, props = __rest(_a, ["className", "component", "children", "isPlain", "isDisabled"]);
  const Component32 = component;
  return (0, import_jsx_runtime40.jsx)(InputGroupItem, { isPlain, isBox: true, isDisabled, children: (0, import_jsx_runtime40.jsx)(Component32, Object.assign({ className: css(input_group_default.inputGroupText, className) }, props, { children })) });
};
InputGroupText.displayName = "InputGroupText";

// node_modules/@patternfly/react-styles/css/components/CalendarMonth/calendar-month.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/CalendarMonth/calendar-month.css";
var calendar_month_default = {
  "calendarMonth": "pf-v6-c-calendar-month",
  "calendarMonthCalendar": "pf-v6-c-calendar-month__calendar",
  "calendarMonthDate": "pf-v6-c-calendar-month__date",
  "calendarMonthDatesCell": "pf-v6-c-calendar-month__dates-cell",
  "calendarMonthDatesRow": "pf-v6-c-calendar-month__dates-row",
  "calendarMonthDay": "pf-v6-c-calendar-month__day",
  "calendarMonthDays": "pf-v6-c-calendar-month__days",
  "calendarMonthHeader": "pf-v6-c-calendar-month__header",
  "calendarMonthHeaderMonth": "pf-v6-c-calendar-month__header-month",
  "calendarMonthHeaderNavControl": "pf-v6-c-calendar-month__header-nav-control",
  "calendarMonthHeaderYear": "pf-v6-c-calendar-month__header-year",
  "dirRtl": "pf-v6-m-dir-rtl",
  "menuToggle": "pf-v6-c-menu-toggle",
  "modifiers": {
    "current": "pf-m-current",
    "inRange": "pf-m-in-range",
    "startRange": "pf-m-start-range",
    "endRange": "pf-m-end-range",
    "adjacentMonth": "pf-m-adjacent-month",
    "selected": "pf-m-selected",
    "disabled": "pf-m-disabled",
    "hover": "pf-m-hover",
    "focus": "pf-m-focus"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/CalendarMonth/CalendarMonth.js
var Weekday;
(function(Weekday2) {
  Weekday2[Weekday2["Sunday"] = 0] = "Sunday";
  Weekday2[Weekday2["Monday"] = 1] = "Monday";
  Weekday2[Weekday2["Tuesday"] = 2] = "Tuesday";
  Weekday2[Weekday2["Wednesday"] = 3] = "Wednesday";
  Weekday2[Weekday2["Thursday"] = 4] = "Thursday";
  Weekday2[Weekday2["Friday"] = 5] = "Friday";
  Weekday2[Weekday2["Saturday"] = 6] = "Saturday";
})(Weekday || (Weekday = {}));
var buildCalendar = (year, month, weekStart, validators) => {
  const defaultDate = new Date(year, month);
  const firstDayOfWeek = new Date(defaultDate);
  firstDayOfWeek.setDate(firstDayOfWeek.getDate() - firstDayOfWeek.getDay() + weekStart);
  const calendarWeeks = [];
  if (firstDayOfWeek.getMonth() === defaultDate.getMonth() && firstDayOfWeek.getDate() !== 1) {
    firstDayOfWeek.setDate(firstDayOfWeek.getDate() - 7);
  }
  for (let i = 0; i < 6; i++) {
    const week = [];
    for (let j = 0; j < 7; j++) {
      const date = new Date(firstDayOfWeek);
      week.push({
        date,
        isValid: validators.every((validator) => validator(date))
      });
      firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 1);
    }
    calendarWeeks.push(week);
    if (firstDayOfWeek.getMonth() !== defaultDate.getMonth()) {
      break;
    }
  }
  return calendarWeeks;
};
var isSameDate = (d1, d2) => d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();
var today = /* @__PURE__ */ new Date();
var CalendarMonth = (_a) => {
  var {
    date: dateProp,
    locale = void 0,
    monthFormat = (date) => date.toLocaleDateString(locale, { month: "long" }),
    weekdayFormat = (date) => date.toLocaleDateString(locale, { weekday: "narrow" }),
    longWeekdayFormat = (date) => date.toLocaleDateString(locale, { weekday: "long" }),
    dayFormat = (date) => date.getDate(),
    weekStart = 0,
    // Use the American Sunday as a default
    onChange = () => {
    },
    validators = [() => true],
    className,
    onSelectToggle = () => {
    },
    onMonthChange = () => {
    },
    rangeStart,
    prevMonthAriaLabel = "Previous month",
    nextMonthAriaLabel = "Next month",
    yearInputAriaLabel = "Select year",
    cellAriaLabel,
    isDateFocused = false,
    inlineProps
  } = _a, props = __rest(_a, ["date", "locale", "monthFormat", "weekdayFormat", "longWeekdayFormat", "dayFormat", "weekStart", "onChange", "validators", "className", "onSelectToggle", "onMonthChange", "rangeStart", "prevMonthAriaLabel", "nextMonthAriaLabel", "yearInputAriaLabel", "cellAriaLabel", "isDateFocused", "inlineProps"]);
  const longMonths = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map((monthNum) => new Date(1990, monthNum)).map(monthFormat);
  const [isSelectOpen, setIsSelectOpen] = (0, import_react17.useState)(false);
  const getInitialDate = () => {
    if (isValidDate(dateProp)) {
      return dateProp;
    }
    if (isValidDate(rangeStart)) {
      return rangeStart;
    }
    return today;
  };
  const initialDate = getInitialDate();
  const [focusedDate, setFocusedDate] = (0, import_react17.useState)(initialDate);
  const yearFormat = (date) => date.getFullYear();
  const yearFormatted = yearFormat(focusedDate);
  const [yearInput, setYearInput] = (0, import_react17.useState)(yearFormatted.toString());
  const [hoveredDate, setHoveredDate] = (0, import_react17.useState)(void 0);
  const focusRef = (0, import_react17.useRef)(void 0);
  const [hiddenMonthId] = (0, import_react17.useState)(getUniqueId("hidden-month-span"));
  const [shouldFocus, setShouldFocus] = (0, import_react17.useState)(false);
  const isValidated = (date) => validators.every((validator) => validator(date));
  const focusedDateValidated = isValidated(focusedDate);
  (0, import_react17.useEffect)(() => {
    if (isValidDate(dateProp) && !isSameDate(focusedDate, dateProp)) {
      setFocusedDate(dateProp);
    } else if (!dateProp) {
      setFocusedDate(today);
    }
  }, [dateProp]);
  (0, import_react17.useEffect)(() => {
    if ((shouldFocus || isDateFocused) && focusedDateValidated && focusRef.current) {
      focusRef.current.focus();
    }
  }, [focusedDate, isDateFocused, focusedDateValidated, focusRef]);
  const onMonthClick = (ev, newDate) => {
    setFocusedDate(newDate);
    setShouldFocus(false);
    onMonthChange(ev, newDate);
    setYearInput(yearFormat(newDate).toString());
  };
  const onKeyDown = (ev) => {
    const newDate = new Date(focusedDate);
    if (ev.key === "ArrowUp") {
      newDate.setDate(newDate.getDate() - 7);
    } else if (ev.key === "ArrowRight") {
      newDate.setDate(newDate.getDate() + 1);
    } else if (ev.key === "ArrowDown") {
      newDate.setDate(newDate.getDate() + 7);
    } else if (ev.key === "ArrowLeft") {
      newDate.setDate(newDate.getDate() - 1);
    }
    if (newDate.getTime() !== focusedDate.getTime() && isValidated(newDate)) {
      ev.preventDefault();
      setFocusedDate(newDate);
      setShouldFocus(true);
    }
  };
  const changeYear = (newYear) => changeMonth(focusedDate.getMonth(), newYear);
  const changeMonth = (newMonth, newYear) => new Date(newYear !== null && newYear !== void 0 ? newYear : focusedDate.getFullYear(), newMonth, 1);
  const MIN_YEAR = 1900;
  const MAX_YEAR = 2100;
  const handleYearInputChange = (event, yearStr) => {
    if (!/^\d{0,4}$/.test(yearStr)) {
      return;
    }
    setYearInput(yearStr);
    if (yearStr.length === 4) {
      const yearNum = Number(yearStr);
      if (yearNum >= MIN_YEAR && yearNum <= MAX_YEAR) {
        const newDate = changeYear(yearNum);
        setFocusedDate(newDate);
        setShouldFocus(false);
        event.target.focus();
        onMonthChange(event, newDate);
      } else {
        setYearInput(yearFormatted.toString());
      }
    }
  };
  const addMonth = (toAdd) => {
    let newMonth = focusedDate.getMonth() + toAdd;
    let newYear = focusedDate.getFullYear();
    if (newMonth === -1) {
      newMonth = 11;
      newYear--;
    } else if (newMonth === 12) {
      newMonth = 0;
      newYear++;
    }
    return changeMonth(newMonth, newYear);
  };
  const prevMonth = addMonth(-1);
  const nextMonth = addMonth(1);
  const focusedYear = focusedDate.getFullYear();
  const focusedMonth = focusedDate.getMonth();
  const calendar = (0, import_react17.useMemo)(() => buildCalendar(focusedYear, focusedMonth, weekStart, validators), [focusedYear, focusedMonth, weekStart, validators]);
  if (!focusedDateValidated) {
    const toFocus = calendar.reduce((acc, cur) => [...acc, ...cur], []).filter(({ date, isValid }) => isValid && date.getMonth() === focusedMonth).map(({ date }) => ({ date, days: Math.abs(focusedDate.getTime() - date.getTime()) })).sort((o1, o2) => o1.days - o2.days).map(({ date }) => date)[0];
    if (toFocus) {
      setFocusedDate(toFocus);
    }
  }
  const isHoveredDateValid = hoveredDate && isValidated(hoveredDate);
  const monthFormatted = monthFormat(focusedDate);
  const calendarToRender = (0, import_jsx_runtime41.jsxs)("div", Object.assign({ className: css(calendar_month_default.calendarMonth, className) }, props, { children: [(0, import_jsx_runtime41.jsxs)("div", { className: calendar_month_default.calendarMonthHeader, children: [(0, import_jsx_runtime41.jsx)("div", { className: css(calendar_month_default.calendarMonthHeaderNavControl, "pf-m-prev-month"), children: (0, import_jsx_runtime41.jsx)(Button, { variant: "plain", "aria-label": prevMonthAriaLabel, onClick: (ev) => onMonthClick(ev, prevMonth), icon: (0, import_jsx_runtime41.jsx)(angle_left_icon_default, {}) }) }), (0, import_jsx_runtime41.jsxs)(InputGroup, { children: [(0, import_jsx_runtime41.jsx)(InputGroupItem, { isFill: true, children: (0, import_jsx_runtime41.jsxs)("div", { className: calendar_month_default.calendarMonthHeaderMonth, children: [(0, import_jsx_runtime41.jsx)("span", { id: hiddenMonthId, hidden: true, children: "Month" }), (0, import_jsx_runtime41.jsx)(Select, { toggle: (toggleRef) => (0, import_jsx_runtime41.jsx)(MenuToggle, { ref: toggleRef, onClick: () => setIsSelectOpen(!isSelectOpen), isExpanded: isSelectOpen, style: { width: "140px" }, children: monthFormatted }), "aria-labelledby": hiddenMonthId, isOpen: isSelectOpen, onOpenChange: (isOpen) => {
    setIsSelectOpen(isOpen);
    onSelectToggle(isOpen);
  }, onSelect: (ev, monthNum) => {
    setIsSelectOpen(false);
    onSelectToggle(false);
    const newDate = changeMonth(Number(monthNum));
    setFocusedDate(newDate);
    setShouldFocus(false);
    onMonthChange(ev, newDate);
  }, selected: monthFormatted, popperProps: { appendTo: "inline" }, children: (0, import_jsx_runtime41.jsx)(SelectList, { children: longMonths.map((longMonth, index) => (0, import_jsx_runtime41.jsx)(SelectOption, { value: index, isSelected: longMonth === monthFormatted, children: longMonth }, index)) }) })] }) }), (0, import_jsx_runtime41.jsx)(InputGroupItem, { children: (0, import_jsx_runtime41.jsx)("div", { className: calendar_month_default.calendarMonthHeaderYear, children: (0, import_jsx_runtime41.jsx)(TextInput, { "aria-label": yearInputAriaLabel, type: "number", value: yearInput, onChange: handleYearInputChange }) }) })] }), (0, import_jsx_runtime41.jsx)("div", { className: css(calendar_month_default.calendarMonthHeaderNavControl, "pf-m-next-month"), children: (0, import_jsx_runtime41.jsx)(Button, { variant: "plain", "aria-label": nextMonthAriaLabel, onClick: (ev) => onMonthClick(ev, nextMonth), icon: (0, import_jsx_runtime41.jsx)(angle_right_icon_default, {}) }) })] }), (0, import_jsx_runtime41.jsxs)("table", { className: calendar_month_default.calendarMonthCalendar, onMouseLeave: () => setHoveredDate(void 0), children: [(0, import_jsx_runtime41.jsx)("thead", { className: calendar_month_default.calendarMonthDays, children: (0, import_jsx_runtime41.jsx)("tr", { children: calendar[0].map(({ date }, index) => (0, import_jsx_runtime41.jsxs)("th", { className: calendar_month_default.calendarMonthDay, scope: "col", children: [(0, import_jsx_runtime41.jsx)("span", { className: "pf-v6-screen-reader", children: longWeekdayFormat(date) }), (0, import_jsx_runtime41.jsx)("span", { "aria-hidden": true, children: weekdayFormat(date) })] }, index)) }) }), (0, import_jsx_runtime41.jsx)("tbody", { onKeyDown, children: calendar.map((week, index) => (0, import_jsx_runtime41.jsx)("tr", { className: calendar_month_default.calendarMonthDatesRow, children: week.map(({ date, isValid }, index2) => {
    const dayFormatted = dayFormat(date);
    const isToday = isSameDate(date, today);
    const isSelected = isValidDate(dateProp) && isSameDate(date, dateProp);
    const isFocused = isSameDate(date, focusedDate);
    const isAdjacentMonth = date.getMonth() !== focusedDate.getMonth();
    const isRangeStart = isValidDate(rangeStart) && isSameDate(date, rangeStart);
    let isInRange = false;
    let isRangeEnd = false;
    if (isValidDate(rangeStart)) {
      let rangeEndDate;
      if (isValidDate(dateProp)) {
        rangeEndDate = dateProp;
      }
      if (isHoveredDateValid && (!isValidDate(dateProp) || hoveredDate > dateProp)) {
        rangeEndDate = hoveredDate;
      }
      if (rangeEndDate) {
        isInRange = date >= rangeStart && date <= rangeEndDate;
        isRangeEnd = isSameDate(date, rangeEndDate);
      }
    }
    return (0, import_jsx_runtime41.jsx)("td", { className: css(calendar_month_default.calendarMonthDatesCell, isAdjacentMonth && calendar_month_default.modifiers.adjacentMonth, isToday && calendar_month_default.modifiers.current, (isSelected || isRangeStart) && calendar_month_default.modifiers.selected, !isValid && !(isInRange || isRangeStart || isRangeEnd || isSelected) && calendar_month_default.modifiers.disabled, isInRange && calendar_month_default.modifiers.inRange, isRangeStart && calendar_month_default.modifiers.startRange, isRangeEnd && calendar_month_default.modifiers.endRange), children: (0, import_jsx_runtime41.jsx)("button", Object.assign({ className: css(calendar_month_default.calendarMonthDate, isRangeEnd && calendar_month_default.modifiers.hover, !isValid && calendar_month_default.modifiers.disabled), type: "button", onClick: (event) => onChange(event, date), onMouseOver: () => setHoveredDate(date), tabIndex: isFocused ? 0 : -1, disabled: !isValid, "aria-label": cellAriaLabel ? cellAriaLabel(date) : `${dayFormat(date)} ${monthFormat(date)} ${yearFormat(date)}` }, isFocused && { ref: focusRef }, { children: dayFormatted })) }, index2);
  }) }, index)) })] })] }));
  if (inlineProps !== void 0) {
    const Component32 = inlineProps.component ? inlineProps.component : "article";
    return (0, import_jsx_runtime41.jsxs)(Component32, Object.assign({}, inlineProps.ariaLabelledby && { "aria-labelledby": inlineProps.ariaLabelledby }, { children: [inlineProps.title, calendarToRender] }));
  }
  return calendarToRender;
};
CalendarMonth.displayName = "CalendarMonth";

// node_modules/@patternfly/react-core/dist/esm/components/Card/Card.js
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
var import_react18 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Card/card.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Card/card.css";
var card_default = {
  "button": "pf-v6-c-button",
  "card": "pf-v6-c-card",
  "cardActions": "pf-v6-c-card__actions",
  "cardBody": "pf-v6-c-card__body",
  "cardClickableAction": "pf-v6-c-card__clickable-action",
  "cardExpandableContent": "pf-v6-c-card__expandable-content",
  "cardFooter": "pf-v6-c-card__footer",
  "cardHeader": "pf-v6-c-card__header",
  "cardHeaderMain": "pf-v6-c-card__header-main",
  "cardHeaderToggle": "pf-v6-c-card__header-toggle",
  "cardHeaderToggleIcon": "pf-v6-c-card__header-toggle-icon",
  "cardSelectableActions": "pf-v6-c-card__selectable-actions",
  "cardTitle": "pf-v6-c-card__title",
  "cardTitleText": "pf-v6-c-card__title-text",
  "check": "pf-v6-c-check",
  "checkInput": "pf-v6-c-check__input",
  "checkLabel": "pf-v6-c-check__label",
  "dirRtl": "pf-v6-m-dir-rtl",
  "divider": "pf-v6-c-divider",
  "modifiers": {
    "selectable": "pf-m-selectable",
    "clickable": "pf-m-clickable",
    "current": "pf-m-current",
    "selected": "pf-m-selected",
    "disabled": "pf-m-disabled",
    "compact": "pf-m-compact",
    "displayLg": "pf-m-display-lg",
    "secondary": "pf-m-secondary",
    "plain": "pf-m-plain",
    "expanded": "pf-m-expanded",
    "fullHeight": "pf-m-full-height",
    "toggleRight": "pf-m-toggle-right",
    "wrap": "pf-m-wrap",
    "noOffset": "pf-m-no-offset",
    "inline": "pf-m-inline",
    "noFill": "pf-m-no-fill"
  },
  "radio": "pf-v6-c-radio",
  "radioInput": "pf-v6-c-radio__input",
  "radioLabel": "pf-v6-c-radio__label"
};

// node_modules/@patternfly/react-core/dist/esm/components/Card/Card.js
var CardContext = (0, import_react18.createContext)({
  cardId: "",
  isExpanded: false,
  isClickable: false,
  isSelectable: false,
  isSelected: false,
  isClicked: false,
  isDisabled: false
});
var Card = (_a) => {
  var { children, id = "", className, component = "div", isCompact = false, isSelectable = false, isClickable = false, isDisabled = false, isSelected = false, isClicked = false, isExpanded = false, isLarge = false, isFullHeight = false, isPlain = false, variant = "default", ouiaId, ouiaSafe = true } = _a, props = __rest(_a, ["children", "id", "className", "component", "isCompact", "isSelectable", "isClickable", "isDisabled", "isSelected", "isClicked", "isExpanded", "isLarge", "isFullHeight", "isPlain", "variant", "ouiaId", "ouiaSafe"]);
  const Component32 = component;
  const ouiaProps = useOUIAProps(Card.displayName, ouiaId, ouiaSafe);
  if (isCompact && isLarge) {
    console.warn("Card: Cannot use isCompact with isLarge. Defaulting to isCompact");
    isLarge = false;
  }
  const getSelectableModifiers = () => {
    if (isSelectable && isClickable) {
      return css(card_default.modifiers.selectable, card_default.modifiers.clickable, (isSelected || isClicked) && card_default.modifiers.current);
    }
    if (isSelectable) {
      return css(card_default.modifiers.selectable, isSelected && card_default.modifiers.selected);
    }
    if (isClickable) {
      return css(card_default.modifiers.clickable, isClicked && card_default.modifiers.current);
    }
    return "";
  };
  return (0, import_jsx_runtime42.jsx)(CardContext.Provider, { value: {
    cardId: id,
    isExpanded,
    isClickable,
    isSelectable,
    isSelected,
    isClicked,
    isDisabled
  }, children: (0, import_jsx_runtime42.jsx)(Component32, Object.assign({ id, className: css(card_default.card, isCompact && card_default.modifiers.compact, isExpanded && card_default.modifiers.expanded, isLarge && card_default.modifiers.displayLg, isFullHeight && card_default.modifiers.fullHeight, isPlain && card_default.modifiers.plain, variant === "secondary" && card_default.modifiers.secondary, getSelectableModifiers(), isDisabled && card_default.modifiers.disabled, className) }, props, ouiaProps, { children })) });
};
Card.displayName = "Card";

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardBody.js
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
var CardBody = (_a) => {
  var { children, className, component = "div", isFilled = true } = _a, props = __rest(_a, ["children", "className", "component", "isFilled"]);
  const Component32 = component;
  return (0, import_jsx_runtime43.jsx)(Component32, Object.assign({ className: css(card_default.cardBody, !isFilled && card_default.modifiers.noFill, className) }, props, { children }));
};
CardBody.displayName = "CardBody";

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardExpandableContent.js
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
var CardExpandableContent = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime44.jsx)(CardContext.Consumer, { children: ({ isExpanded }) => isExpanded ? (0, import_jsx_runtime44.jsx)("div", Object.assign({ className: css(card_default.cardExpandableContent, className) }, props, { children })) : null });
};
CardExpandableContent.displayName = "CardExpandableContent";

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardFooter.js
var import_jsx_runtime45 = __toESM(require_jsx_runtime());
var CardFooter = (_a) => {
  var { children, className, component = "div" } = _a, props = __rest(_a, ["children", "className", "component"]);
  const Component32 = component;
  return (0, import_jsx_runtime45.jsx)(Component32, Object.assign({ className: css(card_default.cardFooter, className) }, props, { children }));
};
CardFooter.displayName = "CardFooter";

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardTitle.js
var import_jsx_runtime46 = __toESM(require_jsx_runtime());
var import_react19 = __toESM(require_react());
var CardTitle = (_a) => {
  var { children, className, component = "div" } = _a, props = __rest(_a, ["children", "className", "component"]);
  const { cardId } = (0, import_react19.useContext)(CardContext);
  const Component32 = component;
  const titleId = cardId ? `${cardId}-title` : "";
  return (0, import_jsx_runtime46.jsx)("div", { className: css(card_default.cardTitle), children: (0, import_jsx_runtime46.jsx)(Component32, Object.assign({ className: css(card_default.cardTitleText, className), id: titleId || void 0 }, props, { children })) });
};
CardTitle.displayName = "CardTitle";

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardHeader.js
var import_jsx_runtime51 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardHeaderMain.js
var import_jsx_runtime47 = __toESM(require_jsx_runtime());
var CardHeaderMain = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime47.jsx)("div", Object.assign({ className: css(card_default.cardHeaderMain, className) }, props, { children }));
};
CardHeaderMain.displayName = "CardHeaderMain";

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardActions.js
var import_jsx_runtime48 = __toESM(require_jsx_runtime());
var CardActions = (_a) => {
  var { children, className, hasNoOffset = false } = _a, props = __rest(_a, ["children", "className", "hasNoOffset"]);
  return (0, import_jsx_runtime48.jsx)("div", Object.assign({ className: css(card_default.cardActions, hasNoOffset && card_default.modifiers.noOffset, className) }, props, { children }));
};
CardActions.displayName = "CardActions";

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardSelectableActions.js
var import_jsx_runtime49 = __toESM(require_jsx_runtime());
var CardSelectableActions = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime49.jsx)("div", Object.assign({ className: css(card_default.cardSelectableActions, className) }, props, { children }));
};
CardSelectableActions.displayName = "CardSelectableActions";

// node_modules/@patternfly/react-core/dist/esm/components/Radio/Radio.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime());
var import_react20 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Radio/radio.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Radio/radio.css";
var radio_default = {
  "modifiers": {
    "standalone": "pf-m-standalone",
    "disabled": "pf-m-disabled"
  },
  "radio": "pf-v6-c-radio",
  "radioBody": "pf-v6-c-radio__body",
  "radioDescription": "pf-v6-c-radio__description",
  "radioInput": "pf-v6-c-radio__input",
  "radioLabel": "pf-v6-c-radio__label"
};

// node_modules/@patternfly/react-core/dist/esm/components/Radio/Radio.js
var Radio = class _Radio extends import_react20.Component {
  constructor(props) {
    super(props);
    this.handleChange = (event) => {
      this.props.onChange(event, event.currentTarget.checked);
    };
    if (!props.label && !props["aria-label"]) {
      console.error("Radio:", "Radio requires an aria-label to be specified");
    }
    this.state = {
      ouiaStateId: getDefaultOUIAId(_Radio.displayName)
    };
  }
  render() {
    const _a = this.props, {
      "aria-label": ariaLabel,
      checked,
      className,
      inputClassName,
      defaultChecked,
      isLabelWrapped,
      labelPosition = "end",
      isChecked,
      isDisabled,
      isValid,
      label,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onChange,
      description,
      body,
      ouiaId,
      ouiaSafe = true,
      component
    } = _a, props = __rest(_a, ["aria-label", "checked", "className", "inputClassName", "defaultChecked", "isLabelWrapped", "labelPosition", "isChecked", "isDisabled", "isValid", "label", "onChange", "description", "body", "ouiaId", "ouiaSafe", "component"]);
    if (!props.id) {
      console.error("Radio:", "id is required to make input accessible");
    }
    const inputRendered = (0, import_jsx_runtime50.jsx)("input", Object.assign({}, props, { className: css(radio_default.radioInput, inputClassName), type: "radio", onChange: this.handleChange, "aria-invalid": !isValid, disabled: isDisabled, checked: checked || isChecked }, checked === void 0 && { defaultChecked }, !label && { "aria-label": ariaLabel }, getOUIAProps(_Radio.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe)));
    const wrapWithLabel = isLabelWrapped && !component || component === "label";
    const Label2 = wrapWithLabel ? "span" : "label";
    const labelRendered = label ? (0, import_jsx_runtime50.jsx)(Label2, { className: css(radio_default.radioLabel, isDisabled && radio_default.modifiers.disabled), htmlFor: !wrapWithLabel ? props.id : void 0, children: label }) : null;
    const Component32 = component !== null && component !== void 0 ? component : wrapWithLabel ? "label" : "div";
    return (0, import_jsx_runtime50.jsxs)(Component32, { className: css(radio_default.radio, !label && radio_default.modifiers.standalone, className), htmlFor: wrapWithLabel ? props.id : void 0, children: [labelPosition === "start" ? (0, import_jsx_runtime50.jsxs)(import_jsx_runtime50.Fragment, { children: [labelRendered, inputRendered] }) : (0, import_jsx_runtime50.jsxs)(import_jsx_runtime50.Fragment, { children: [inputRendered, labelRendered] }), description && (0, import_jsx_runtime50.jsx)("span", { className: css(radio_default.radioDescription), children: description }), body && (0, import_jsx_runtime50.jsx)("span", { className: css(radio_default.radioBody), children: body })] });
  }
};
Radio.displayName = "Radio";
Radio.defaultProps = {
  className: "",
  isDisabled: false,
  isValid: true,
  onChange: () => {
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Card/CardHeader.js
var CardHeader = (_a) => {
  var { children, className, actions, selectableActions, id, onExpand, toggleButtonProps, isToggleRightAligned, hasWrap } = _a, props = __rest(_a, ["children", "className", "actions", "selectableActions", "id", "onExpand", "toggleButtonProps", "isToggleRightAligned", "hasWrap"]);
  return (0, import_jsx_runtime51.jsx)(GenerateId, { children: (randomId) => (0, import_jsx_runtime51.jsx)(CardContext.Consumer, { children: ({ cardId, isClickable, isSelectable, isSelected, isDisabled: isCardDisabled }) => {
    const cardHeaderToggle = (0, import_jsx_runtime51.jsx)("div", { className: css(card_default.cardHeaderToggle), children: (0, import_jsx_runtime51.jsx)(Button, Object.assign({ variant: "plain", type: "button", onClick: (evt) => {
      onExpand(evt, cardId);
    } }, toggleButtonProps, { icon: (0, import_jsx_runtime51.jsx)("span", { className: css(card_default.cardHeaderToggleIcon), children: (0, import_jsx_runtime51.jsx)(angle_right_icon_default, {}) }) })) });
    const isClickableOrSelectableOnly = isClickable && !isSelectable || isSelectable && !isClickable;
    if ((actions === null || actions === void 0 ? void 0 : actions.actions) && isClickableOrSelectableOnly) {
      console.error(`Card: ${isClickable ? "Clickable" : "Selectable"} only cards should not contain any other actions. If you wish to include additional actions, use a clickable and selectable card.`);
    }
    const isClickableOnlyCard = isClickable && !isSelectable;
    if ((isClickableOnlyCard || isSelectable) && !(selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.selectableActionAriaLabel) && !(selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.selectableActionAriaLabelledby)) {
      console.error(`Card: ${isClickableOnlyCard ? "Clickable-only cards" : "Cards with a selectable input"} must have either the selectableActions.selectableActionAriaLabel or selectableActions.selectableActionAriaLabelledby prop passed in order to provide an accessible name to the clickable element.`);
    }
    const SelectableCardInput = (selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.variant) === "single" ? Radio : Checkbox;
    const getSelectableProps = () => {
      var _a2, _b;
      return Object.assign({ className: css("pf-m-standalone"), inputClassName: css((selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.isHidden) && "pf-v6-screen-reader"), label: (0, import_jsx_runtime51.jsx)(import_jsx_runtime51.Fragment, {}), "aria-label": selectableActions.selectableActionAriaLabel, "aria-labelledby": selectableActions.selectableActionAriaLabelledby, id: (_a2 = selectableActions.selectableActionId) !== null && _a2 !== void 0 ? _a2 : `card-selectable-${randomId}`, name: selectableActions.name, isDisabled: isCardDisabled, onChange: selectableActions.onChange, isChecked: (_b = selectableActions.isChecked) !== null && _b !== void 0 ? _b : isSelected }, selectableActions.selectableActionProps);
    };
    const isClickableLinkCard = (selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.to) !== void 0;
    const ClickableCardComponent = isClickableLinkCard ? "a" : "button";
    const getClickableProps = () => {
      const isDisabledLinkCard = isCardDisabled && isClickableLinkCard;
      const baseProps = Object.assign({ className: css("pf-v6-c-card__clickable-action", isDisabledLinkCard && card_default.modifiers.disabled, (selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.isHidden) && "pf-v6-screen-reader"), id: selectableActions.selectableActionId, "aria-label": selectableActions.selectableActionAriaLabel, "aria-labelledby": selectableActions.selectableActionAriaLabelledby }, selectableActions.selectableActionProps);
      if (isClickableLinkCard) {
        return Object.assign(Object.assign(Object.assign(Object.assign({}, baseProps), { href: selectableActions.to }), isCardDisabled && { tabIndex: -1, "aria-disabled": true }), selectableActions.isExternalLink && { target: "_blank" });
      }
      return Object.assign(Object.assign({}, baseProps), { type: "button", disabled: isCardDisabled, onClick: selectableActions.onClickAction });
    };
    return (0, import_jsx_runtime51.jsxs)("div", Object.assign({ className: css(card_default.cardHeader, isToggleRightAligned && card_default.modifiers.toggleRight, hasWrap && card_default.modifiers.wrap, className), id }, props, { children: [onExpand && !isToggleRightAligned && cardHeaderToggle, (actions || selectableActions && (isClickable || isSelectable)) && (0, import_jsx_runtime51.jsxs)(CardActions, { className: actions === null || actions === void 0 ? void 0 : actions.className, hasNoOffset: (actions === null || actions === void 0 ? void 0 : actions.hasNoOffset) || (selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.hasNoOffset), children: [actions === null || actions === void 0 ? void 0 : actions.actions, selectableActions && (isClickable || isSelectable) && (0, import_jsx_runtime51.jsxs)(CardSelectableActions, { className: selectableActions === null || selectableActions === void 0 ? void 0 : selectableActions.className, children: [isSelectable && (0, import_jsx_runtime51.jsx)(SelectableCardInput, Object.assign({}, getSelectableProps())), isClickableOnlyCard && (0, import_jsx_runtime51.jsx)(ClickableCardComponent, Object.assign({}, getClickableProps()))] })] }), children && (0, import_jsx_runtime51.jsx)(CardHeaderMain, { children }), onExpand && isToggleRightAligned && cardHeaderToggle] }));
  } }) });
};
CardHeader.displayName = "CardHeader";

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopy.js
var import_jsx_runtime56 = __toESM(require_jsx_runtime());
var import_react24 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/ClipboardCopy/clipboard-copy.css";
var clipboard_copy_default = {
  "button": "pf-v6-c-button",
  "clipboardCopy": "pf-v6-c-clipboard-copy",
  "clipboardCopyActions": "pf-v6-c-clipboard-copy__actions",
  "clipboardCopyActionsItem": "pf-v6-c-clipboard-copy__actions-item",
  "clipboardCopyExpandableContent": "pf-v6-c-clipboard-copy__expandable-content",
  "clipboardCopyGroup": "pf-v6-c-clipboard-copy__group",
  "clipboardCopyText": "pf-v6-c-clipboard-copy__text",
  "clipboardCopyToggleIcon": "pf-v6-c-clipboard-copy__toggle-icon",
  "dirRtl": "pf-v6-m-dir-rtl",
  "modifiers": {
    "expanded": "pf-m-expanded",
    "inline": "pf-m-inline",
    "block": "pf-m-block",
    "truncate": "pf-m-truncate",
    "code": "pf-m-code",
    "plain": "pf-m-plain"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Truncate/Truncate.js
var import_jsx_runtime52 = __toESM(require_jsx_runtime());
var import_react21 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Truncate/truncate.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Truncate/truncate.css";
var truncate_default = {
  "dirRtl": "pf-v6-m-dir-rtl",
  "modifiers": {
    "fixed": "pf-m-fixed"
  },
  "truncate": "pf-v6-c-truncate",
  "truncateEnd": "pf-v6-c-truncate__end",
  "truncateStart": "pf-v6-c-truncate__start"
};

// node_modules/@patternfly/react-core/dist/esm/components/Truncate/Truncate.js
var TruncatePosition;
(function(TruncatePosition2) {
  TruncatePosition2["start"] = "start";
  TruncatePosition2["end"] = "end";
  TruncatePosition2["middle"] = "middle";
})(TruncatePosition || (TruncatePosition = {}));
var truncateStyles = {
  start: truncate_default.truncateEnd,
  end: truncate_default.truncateStart
};
var minWidthCharacters = 12;
var sliceTrailingContent = (str, slice) => [str.slice(0, str.length - slice), str.slice(-slice)];
var TruncateBase = (_a) => {
  var { className, href, position = "end", tooltipPosition = "top", tooltipProps, trailingNumChars = 7, maxCharsDisplayed, omissionContent = "…", content } = _a, props = __rest(_a, ["className", "href", "position", "tooltipPosition", "tooltipProps", "trailingNumChars", "maxCharsDisplayed", "omissionContent", "content"]);
  const [isTruncated, setIsTruncated] = (0, import_react21.useState)(true);
  const [parentElement, setParentElement] = (0, import_react21.useState)(null);
  const [textElement, setTextElement] = (0, import_react21.useState)(null);
  const [shouldRenderByMaxChars, setShouldRenderByMaxChars] = (0, import_react21.useState)(maxCharsDisplayed > 0);
  const textRef = (0, import_react21.useRef)(null);
  const defaultSubParentRef = (0, import_react21.useRef)(null);
  const subParentRef = (tooltipProps === null || tooltipProps === void 0 ? void 0 : tooltipProps.triggerRef) || defaultSubParentRef;
  const observer = (0, import_react21.useRef)(null);
  if (maxCharsDisplayed <= 0) {
    console.warn("Truncate: the maxCharsDisplayed must be greater than 0, otherwise no content will be visible.");
  }
  const getActualWidth = (element) => {
    const computedStyle = getComputedStyle(element);
    return parseFloat(computedStyle.width) - parseFloat(computedStyle.paddingLeft) - parseFloat(computedStyle.paddingRight) - parseFloat(computedStyle.borderRight) - parseFloat(computedStyle.borderLeft);
  };
  const calculateTotalTextWidth = (element, trailingNumChars2, content2) => {
    const firstTextWidth = element.scrollWidth;
    const firstTextLength = content2.length;
    return firstTextWidth / firstTextLength * trailingNumChars2 + firstTextWidth;
  };
  (0, import_react21.useEffect)(() => {
    if (textRef && textRef.current && !textElement) {
      setTextElement(textRef.current);
    }
  }, [textRef, textElement]);
  (0, import_react21.useEffect)(() => {
    const refElement = getReferenceElement(subParentRef);
    if ((refElement === null || refElement === void 0 ? void 0 : refElement.parentElement) && !parentElement) {
      setParentElement(refElement.parentElement);
    }
  }, [subParentRef, parentElement]);
  (0, import_react21.useEffect)(() => {
    if (textElement && parentElement && !observer.current && !shouldRenderByMaxChars) {
      const totalTextWidth = calculateTotalTextWidth(textElement, trailingNumChars, content);
      const textWidth = position === "middle" ? totalTextWidth : textElement.scrollWidth;
      const handleResize = () => {
        const parentWidth = getActualWidth(parentElement);
        setIsTruncated(textWidth >= parentWidth);
      };
      const observer2 = getResizeObserver(parentElement, handleResize);
      return () => {
        observer2();
      };
    }
  }, [textElement, parentElement, trailingNumChars, content, position, shouldRenderByMaxChars]);
  (0, import_react21.useEffect)(() => {
    if (shouldRenderByMaxChars) {
      setIsTruncated(content.length > maxCharsDisplayed);
    }
  }, [shouldRenderByMaxChars]);
  (0, import_react21.useEffect)(() => {
    setShouldRenderByMaxChars(maxCharsDisplayed > 0);
  }, [maxCharsDisplayed]);
  const lrmEntity = (0, import_jsx_runtime52.jsx)(import_react21.Fragment, { children: "‎" });
  const isStartPosition = position === TruncatePosition.start;
  const isEndPosition = position === TruncatePosition.end;
  const renderResizeObserverContent = () => {
    if (isEndPosition || isStartPosition) {
      return (0, import_jsx_runtime52.jsx)(import_jsx_runtime52.Fragment, { children: (0, import_jsx_runtime52.jsxs)("span", { ref: textRef, className: truncateStyles[position], children: [isStartPosition && lrmEntity, content, isStartPosition && lrmEntity] }) });
    }
    const shouldSliceContent = content.length - trailingNumChars > minWidthCharacters;
    return (0, import_jsx_runtime52.jsx)(import_jsx_runtime52.Fragment, { children: (0, import_jsx_runtime52.jsxs)(import_react21.Fragment, { children: [(0, import_jsx_runtime52.jsx)("span", { ref: textRef, className: truncate_default.truncateStart, children: shouldSliceContent ? sliceTrailingContent(content, trailingNumChars)[0] : content }), shouldSliceContent && (0, import_jsx_runtime52.jsx)("span", { className: truncate_default.truncateEnd, children: sliceTrailingContent(content, trailingNumChars)[1] })] }) });
  };
  const renderMaxDisplayContent = () => {
    const renderVisibleContent = (contentToRender) => (0, import_jsx_runtime52.jsx)("span", { className: `${truncate_default.truncate}__text`, children: contentToRender });
    if (!isTruncated) {
      return renderVisibleContent(content);
    }
    const omissionElement = (0, import_jsx_runtime52.jsx)("span", { className: `${truncate_default.truncate}__omission`, "aria-hidden": "true", children: omissionContent });
    const renderVisuallyHiddenContent = (contentToHide) => (0, import_jsx_runtime52.jsx)("span", { className: "pf-v6-screen-reader", children: contentToHide });
    if (position === TruncatePosition.start) {
      return (0, import_jsx_runtime52.jsxs)(import_jsx_runtime52.Fragment, { children: [renderVisuallyHiddenContent(content.slice(0, maxCharsDisplayed * -1)), omissionElement, renderVisibleContent(content.slice(maxCharsDisplayed * -1))] });
    }
    if (isEndPosition) {
      return (0, import_jsx_runtime52.jsxs)(import_jsx_runtime52.Fragment, { children: [renderVisibleContent(content.slice(0, maxCharsDisplayed)), omissionElement, renderVisuallyHiddenContent(content.slice(maxCharsDisplayed))] });
    }
    const trueMiddleStart = Math.floor(maxCharsDisplayed / 2);
    const trueMiddleEnd = Math.ceil(maxCharsDisplayed / 2) * -1;
    return (0, import_jsx_runtime52.jsxs)(import_jsx_runtime52.Fragment, { children: [renderVisibleContent(content.slice(0, trueMiddleStart)), omissionElement, renderVisuallyHiddenContent(content.slice(trueMiddleStart, trueMiddleEnd)), renderVisibleContent(content.slice(trueMiddleEnd))] });
  };
  const TruncateWrapper = href ? "a" : "span";
  const truncateBody = (0, import_jsx_runtime52.jsx)(TruncateWrapper, Object.assign({ ref: !(tooltipProps === null || tooltipProps === void 0 ? void 0 : tooltipProps.triggerRef) ? subParentRef : null, href, className: css(truncate_default.truncate, shouldRenderByMaxChars && truncate_default.modifiers.fixed, className) }, isTruncated && !href && !(tooltipProps === null || tooltipProps === void 0 ? void 0 : tooltipProps.triggerRef) && { tabIndex: 0 }, props, { children: !shouldRenderByMaxChars ? renderResizeObserverContent() : renderMaxDisplayContent() }));
  return (0, import_jsx_runtime52.jsxs)(import_jsx_runtime52.Fragment, { children: [isTruncated && (0, import_jsx_runtime52.jsx)(Tooltip, Object.assign({ hidden: !isTruncated, position: tooltipPosition, content, triggerRef: subParentRef }, tooltipProps)), truncateBody] });
};
var Truncate = (0, import_react21.forwardRef)((props, ref) => (0, import_jsx_runtime52.jsx)(TruncateBase, Object.assign({ innerRef: ref }, props)));
Truncate.displayName = "Truncate";

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyButton.js
var import_jsx_runtime53 = __toESM(require_jsx_runtime());
var import_react22 = __toESM(require_react());
var ClipboardCopyButton = (_a) => {
  var { onClick, exitDelay = 0, entryDelay = 300, maxWidth = "100px", position = "top", "aria-label": ariaLabel = "Copyable input", id, textId, children, variant = "control", onTooltipHidden = () => {
  }, className, hasNoPadding = false } = _a, props = __rest(_a, ["onClick", "exitDelay", "entryDelay", "maxWidth", "position", "aria-label", "id", "textId", "children", "variant", "onTooltipHidden", "className", "hasNoPadding"]);
  const triggerRef = (0, import_react22.createRef)();
  return (0, import_jsx_runtime53.jsx)(Tooltip, { trigger: "mouseenter focus click", triggerRef, exitDelay, entryDelay, maxWidth, position, "aria-live": "polite", aria: "none", content: (0, import_jsx_runtime53.jsx)("div", { children }), onTooltipHidden, children: (0, import_jsx_runtime53.jsx)(Button, Object.assign({ type: "button", variant, hasNoPadding, onClick, "aria-label": ariaLabel, className, id, "aria-labelledby": `${id} ${textId}`, icon: (0, import_jsx_runtime53.jsx)(copy_icon_default, {}) }, props, { ref: triggerRef })) });
};
ClipboardCopyButton.displayName = "ClipboardCopyButton";

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyToggle.js
var import_jsx_runtime54 = __toESM(require_jsx_runtime());
var ClipboardCopyToggle = (_a) => {
  var { onClick, id, textId, contentId, isExpanded = false } = _a, props = __rest(_a, ["onClick", "id", "textId", "contentId", "isExpanded"]);
  return (0, import_jsx_runtime54.jsx)(Button, Object.assign({ type: "button", variant: "control", onClick, id, "aria-labelledby": `${id} ${textId}`, "aria-controls": isExpanded ? contentId : void 0, "aria-expanded": isExpanded }, props, { icon: (0, import_jsx_runtime54.jsx)("div", { className: css(clipboard_copy_default.clipboardCopyToggleIcon), children: (0, import_jsx_runtime54.jsx)(angle_right_icon_default, {}) }) }));
};
ClipboardCopyToggle.displayName = "ClipboardCopyToggle";

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyExpanded.js
var import_jsx_runtime55 = __toESM(require_jsx_runtime());
var import_react23 = __toESM(require_react());
var ClipboardCopyExpanded = class extends import_react23.Component {
  constructor(props) {
    super(props);
  }
  render() {
    const _a = this.props, { className, children, onChange, isReadOnly, isCode } = _a, props = __rest(_a, ["className", "children", "onChange", "isReadOnly", "isCode"]);
    return (0, import_jsx_runtime55.jsx)("div", Object.assign({ suppressContentEditableWarning: true, className: css(clipboard_copy_default.clipboardCopyExpandableContent, className), onInput: (e) => onChange(e, e.target.innerText), contentEditable: !isReadOnly }, props, { children: isCode ? (0, import_jsx_runtime55.jsx)("pre", { dir: "ltr", children }) : children }));
  }
};
ClipboardCopyExpanded.displayName = "ClipboardCopyExpanded";
ClipboardCopyExpanded.defaultProps = {
  onChange: () => void 0,
  className: "",
  isReadOnly: false,
  isCode: false
};

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopy.js
var clipboardCopyFunc = (_event, text) => {
  try {
    navigator.clipboard.writeText(text.toString());
  } catch (error) {
    console.warn("Clipboard API not found, this copy function will not work. This is likely because you're using an", "unsupported browser or you're not using HTTPS. \n\nIf you're a developer building an application which needs", "to support copying to the clipboard without the clipboard API, you'll have to create your own copy", "function and pass it to the ClipboardCopy component as the onCopy prop. For more information see", "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/clipboard");
    console.error(error);
  }
};
var ClipboardCopyVariant;
(function(ClipboardCopyVariant2) {
  ClipboardCopyVariant2["inline"] = "inline";
  ClipboardCopyVariant2["expansion"] = "expansion";
  ClipboardCopyVariant2["inlineCompact"] = "inline-compact";
})(ClipboardCopyVariant || (ClipboardCopyVariant = {}));
var ClipboardCopy = class _ClipboardCopy extends import_react24.Component {
  constructor(props) {
    super(props);
    this.timer = null;
    this.componentDidUpdate = (prevProps, prevState) => {
      if (prevProps.children !== this.props.children) {
        const newText = Array.isArray(this.props.children) ? this.props.children.join(" ") : this.props.children;
        this.setState({ text: newText, textWhenExpanded: newText });
      }
    };
    this.componentWillUnmount = () => {
      if (this.timer) {
        window.clearTimeout(this.timer);
      }
    };
    this.expandContent = (_event) => {
      this.setState((prevState) => ({
        expanded: !prevState.expanded
      }));
    };
    this.updateText = (event, text2) => {
      this.setState({ text: text2 });
      this.props.onChange(event, text2);
    };
    this.updateTextWhenExpanded = (event, text2) => {
      this.setState({ textWhenExpanded: text2 });
      this.props.onChange(event, text2);
    };
    this.render = () => {
      const _a = this.props, {
        /* eslint-disable @typescript-eslint/no-unused-vars */
        isExpanded,
        onChange,
        // Don't pass to <div>
        /* eslint-enable @typescript-eslint/no-unused-vars */
        isReadOnly,
        isCode,
        isBlock,
        exitDelay,
        maxWidth,
        entryDelay,
        onCopy,
        hoverTip,
        clickTip,
        textAriaLabel,
        toggleAriaLabel,
        variant,
        position,
        className,
        additionalActions,
        truncation,
        ouiaId,
        ouiaSafe
      } = _a, divProps = __rest(_a, ["isExpanded", "onChange", "isReadOnly", "isCode", "isBlock", "exitDelay", "maxWidth", "entryDelay", "onCopy", "hoverTip", "clickTip", "textAriaLabel", "toggleAriaLabel", "variant", "position", "className", "additionalActions", "truncation", "ouiaId", "ouiaSafe"]);
      const textIdPrefix = "text-input-";
      const toggleIdPrefix = "toggle-";
      const contentIdPrefix = "content-";
      const copyableText = this.state.text;
      const shouldTruncate = variant === ClipboardCopyVariant.inlineCompact && truncation;
      const inlineCompactContent = shouldTruncate ? (0, import_jsx_runtime56.jsx)(Truncate, Object.assign({ tooltipProps: { triggerRef: this.clipboardRef }, content: copyableText }, typeof truncation === "object" && truncation)) : copyableText;
      return (0, import_jsx_runtime56.jsxs)("div", Object.assign({ className: css(clipboard_copy_default.clipboardCopy, variant === ClipboardCopyVariant.inlineCompact && clipboard_copy_default.modifiers.inline, isBlock && clipboard_copy_default.modifiers.block, this.state.expanded && clipboard_copy_default.modifiers.expanded, shouldTruncate && clipboard_copy_default.modifiers.truncate, className), ref: this.clipboardRef }, shouldTruncate && { tabIndex: 0 }, divProps, getOUIAProps(_ClipboardCopy.displayName, ouiaId, ouiaSafe), { children: [variant === ClipboardCopyVariant.inlineCompact && (0, import_jsx_runtime56.jsx)(GenerateId, { prefix: "", children: (id) => (0, import_jsx_runtime56.jsxs)(import_react24.Fragment, { children: [!isCode && (0, import_jsx_runtime56.jsx)("span", { className: css(clipboard_copy_default.clipboardCopyText), id: `${textIdPrefix}${id}`, children: inlineCompactContent }), isCode && (0, import_jsx_runtime56.jsx)("code", { className: css(clipboard_copy_default.clipboardCopyText, clipboard_copy_default.modifiers.code), id: `${textIdPrefix}${id}`, children: inlineCompactContent }), (0, import_jsx_runtime56.jsxs)("span", { className: css(clipboard_copy_default.clipboardCopyActions), children: [(0, import_jsx_runtime56.jsx)("span", { className: css(clipboard_copy_default.clipboardCopyActionsItem), children: (0, import_jsx_runtime56.jsx)(ClipboardCopyButton, { variant: "plain", exitDelay, entryDelay, maxWidth, position, id: `copy-button-${id}`, textId: `text-input-${id}`, "aria-label": hoverTip, onClick: (event) => {
        onCopy(event, copyableText);
        this.setState({ copied: true });
      }, onTooltipHidden: () => this.setState({ copied: false }), hasNoPadding: true, children: this.state.copied ? clickTip : hoverTip }) }), additionalActions && additionalActions] })] }) }), variant !== ClipboardCopyVariant.inlineCompact && (0, import_jsx_runtime56.jsx)(GenerateId, { prefix: "", children: (id) => (0, import_jsx_runtime56.jsxs)(import_react24.Fragment, { children: [(0, import_jsx_runtime56.jsxs)("div", { className: css(clipboard_copy_default.clipboardCopyGroup), children: [variant === ClipboardCopyVariant.expansion && (0, import_jsx_runtime56.jsx)(ClipboardCopyToggle, { isExpanded: this.state.expanded, onClick: (_event) => {
        this.expandContent(_event);
        if (this.state.expanded) {
          this.setState({ text: this.state.textWhenExpanded });
        } else {
          this.setState({ textWhenExpanded: copyableText });
        }
      }, id: `${toggleIdPrefix}${id}`, textId: `${textIdPrefix}${id}`, contentId: `${contentIdPrefix}${id}`, "aria-label": toggleAriaLabel }), (0, import_jsx_runtime56.jsx)(TextInput, Object.assign({ readOnlyVariant: isReadOnly || this.state.expanded ? "default" : void 0, onChange: this.updateText, value: this.state.expanded ? this.state.textWhenExpanded : copyableText, id: `text-input-${id}`, "aria-label": textAriaLabel }, isCode && { dir: "ltr" })), (0, import_jsx_runtime56.jsx)(ClipboardCopyButton, { exitDelay, entryDelay, maxWidth, position, id: `copy-button-${id}`, textId: `text-input-${id}`, "aria-label": hoverTip, onClick: (event) => {
        onCopy(event, this.state.expanded ? this.state.textWhenExpanded : copyableText);
        this.setState({ copied: true });
      }, onTooltipHidden: () => this.setState({ copied: false }), children: this.state.copied ? clickTip : hoverTip })] }), this.state.expanded && (0, import_jsx_runtime56.jsx)(ClipboardCopyExpanded, { isReadOnly, isCode, id: `content-${id}`, onChange: this.updateTextWhenExpanded, children: copyableText })] }) })] }));
    };
    const text = Array.isArray(this.props.children) ? this.props.children.join(" ") : this.props.children;
    this.state = {
      text,
      expanded: this.props.isExpanded,
      copied: false,
      textWhenExpanded: text
    };
    this.clipboardRef = (0, import_react24.createRef)();
  }
};
ClipboardCopy.displayName = "ClipboardCopy";
ClipboardCopy.defaultProps = {
  hoverTip: "Copy to clipboard",
  clickTip: "Successfully copied to clipboard!",
  isReadOnly: false,
  isExpanded: false,
  isCode: false,
  variant: "inline",
  position: TooltipPosition.top,
  maxWidth: "150px",
  exitDelay: 1500,
  entryDelay: 300,
  onCopy: clipboardCopyFunc,
  onChange: () => void 0,
  textAriaLabel: "Copyable input",
  toggleAriaLabel: "Show content",
  additionalActions: null,
  truncation: false,
  ouiaSafe: true
};

// node_modules/@patternfly/react-core/dist/esm/components/ClipboardCopy/ClipboardCopyAction.js
var import_jsx_runtime57 = __toESM(require_jsx_runtime());
var ClipboardCopyAction = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime57.jsx)("span", Object.assign({ className: css(clipboard_copy_default.clipboardCopyActionsItem, className) }, props, { children }));
};
ClipboardCopyAction.displayName = "ClipboardCopyAction";

// node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlock.js
var import_jsx_runtime58 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/CodeBlock/code-block.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/CodeBlock/code-block.css";
var code_block_default = {
  "codeBlock": "pf-v6-c-code-block",
  "codeBlockActions": "pf-v6-c-code-block__actions",
  "codeBlockCode": "pf-v6-c-code-block__code",
  "codeBlockContent": "pf-v6-c-code-block__content",
  "codeBlockHeader": "pf-v6-c-code-block__header",
  "codeBlockPre": "pf-v6-c-code-block__pre"
};

// node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlock.js
var CodeBlock = (_a) => {
  var { children = null, className, actions = null } = _a, props = __rest(_a, ["children", "className", "actions"]);
  return (0, import_jsx_runtime58.jsxs)("div", Object.assign({ className: css(code_block_default.codeBlock, className) }, props, { children: [actions && (0, import_jsx_runtime58.jsx)("div", { className: css(code_block_default.codeBlockHeader), children: (0, import_jsx_runtime58.jsx)("div", { className: css(code_block_default.codeBlockActions), children: actions }) }), (0, import_jsx_runtime58.jsx)("div", { className: css(code_block_default.codeBlockContent), children })] }));
};
CodeBlock.displayName = "CodeBlock";

// node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlockCode.js
var import_jsx_runtime59 = __toESM(require_jsx_runtime());
var CodeBlockCode = (_a) => {
  var { children = null, className, codeClassName } = _a, props = __rest(_a, ["children", "className", "codeClassName"]);
  return (0, import_jsx_runtime59.jsx)("pre", Object.assign({ className: css(code_block_default.codeBlockPre, className) }, props, { children: (0, import_jsx_runtime59.jsx)("code", { className: css(code_block_default.codeBlockCode, codeClassName), children }) }));
};
CodeBlockCode.displayName = "CodeBlockCode";

// node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlockAction.js
var import_jsx_runtime60 = __toESM(require_jsx_runtime());
var CodeBlockAction = (_a) => {
  var { children = null, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime60.jsx)("div", Object.assign({ className: css(`${code_block_default.codeBlockActions}-item`, className) }, props, { children }));
};
CodeBlockAction.displayName = "CodeBlockAction";

// node_modules/@patternfly/react-core/dist/esm/components/Content/Content.js
var import_jsx_runtime61 = __toESM(require_jsx_runtime());
var ContentVariants;
(function(ContentVariants2) {
  ContentVariants2["h1"] = "h1";
  ContentVariants2["h2"] = "h2";
  ContentVariants2["h3"] = "h3";
  ContentVariants2["h4"] = "h4";
  ContentVariants2["h5"] = "h5";
  ContentVariants2["h6"] = "h6";
  ContentVariants2["p"] = "p";
  ContentVariants2["a"] = "a";
  ContentVariants2["small"] = "small";
  ContentVariants2["blockquote"] = "blockquote";
  ContentVariants2["pre"] = "pre";
  ContentVariants2["hr"] = "hr";
  ContentVariants2["ul"] = "ul";
  ContentVariants2["ol"] = "ol";
  ContentVariants2["dl"] = "dl";
  ContentVariants2["li"] = "li";
  ContentVariants2["dt"] = "dt";
  ContentVariants2["dd"] = "dd";
})(ContentVariants || (ContentVariants = {}));
var componentStyles = {
  div: content_default.content,
  h1: content_default.contentH1,
  h2: content_default.contentH2,
  h3: content_default.contentH3,
  h4: content_default.contentH4,
  h5: content_default.contentH5,
  h6: content_default.contentH6,
  p: content_default.contentP,
  a: content_default.contentA,
  small: content_default.contentSmall,
  blockquote: content_default.contentBlockquote,
  pre: content_default.contentPre,
  hr: content_default.contentHr,
  ul: content_default.contentUl,
  ol: content_default.contentOl,
  dl: content_default.contentDl,
  li: content_default.contentLi,
  dt: content_default.contentDt,
  dd: content_default.contentDd
};
var Content = (_a) => {
  var { children, className = "", component, isPlainList = false, isVisitedLink = false, ouiaId, ouiaSafe = true, isEditorial = false } = _a, props = __rest(_a, ["children", "className", "component", "isPlainList", "isVisitedLink", "ouiaId", "ouiaSafe", "isEditorial"]);
  const wrappingComponent = component !== null && component !== void 0 ? component : "div";
  const Component32 = wrappingComponent;
  const ouiaProps = useOUIAProps(Content.displayName, ouiaId, ouiaSafe);
  const isList = ["ul", "ol", "dl"].includes(wrappingComponent);
  return (0, import_jsx_runtime61.jsx)(Component32, Object.assign({}, ouiaProps, props, { "data-pf-content": true, className: css(componentStyles[wrappingComponent], isList && isPlainList && content_default.modifiers.plain, isVisitedLink && content_default.modifiers.visited, isEditorial && content_default.modifiers.editorial, className), children }));
};
Content.displayName = "Content";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataList.js
var import_jsx_runtime62 = __toESM(require_jsx_runtime());
var import_react25 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/DataList/data-list.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/DataList/data-list.css";
var data_list_default = {
  "dataList": "pf-v6-c-data-list",
  "dataListCell": "pf-v6-c-data-list__cell",
  "dataListCheck": "pf-v6-c-data-list__check",
  "dataListExpandableContent": "pf-v6-c-data-list__expandable-content",
  "dataListExpandableContentBody": "pf-v6-c-data-list__expandable-content-body",
  "dataListItem": "pf-v6-c-data-list__item",
  "dataListItemAction": "pf-v6-c-data-list__item-action",
  "dataListItemContent": "pf-v6-c-data-list__item-content",
  "dataListItemControl": "pf-v6-c-data-list__item-control",
  "dataListItemDraggableButton": "pf-v6-c-data-list__item-draggable-button",
  "dataListItemDraggableIcon": "pf-v6-c-data-list__item-draggable-icon",
  "dataListItemRow": "pf-v6-c-data-list__item-row",
  "dataListText": "pf-v6-c-data-list__text",
  "dataListToggle": "pf-v6-c-data-list__toggle",
  "dataListToggleIcon": "pf-v6-c-data-list__toggle-icon",
  "dirRtl": "pf-v6-m-dir-rtl",
  "modifiers": {
    "icon": "pf-m-icon",
    "alignRight": "pf-m-align-right",
    "noFill": "pf-m-no-fill",
    "flex_2": "pf-m-flex-2",
    "flex_3": "pf-m-flex-3",
    "flex_4": "pf-m-flex-4",
    "flex_5": "pf-m-flex-5",
    "gridNone": "pf-m-grid-none",
    "gridSm": "pf-m-grid-sm",
    "gridMd": "pf-m-grid-md",
    "gridLg": "pf-m-grid-lg",
    "gridXl": "pf-m-grid-xl",
    "grid_2xl": "pf-m-grid-2xl",
    "compact": "pf-m-compact",
    "dragOver": "pf-m-drag-over",
    "truncate": "pf-m-truncate",
    "breakWord": "pf-m-break-word",
    "nowrap": "pf-m-nowrap",
    "clickable": "pf-m-clickable",
    "selected": "pf-m-selected",
    "ghostRow": "pf-m-ghost-row",
    "expanded": "pf-m-expanded",
    "disabled": "pf-m-disabled",
    "hidden": "pf-m-hidden",
    "hiddenOnSm": "pf-m-hidden-on-sm",
    "visibleOnSm": "pf-m-visible-on-sm",
    "hiddenOnMd": "pf-m-hidden-on-md",
    "visibleOnMd": "pf-m-visible-on-md",
    "hiddenOnLg": "pf-m-hidden-on-lg",
    "visibleOnLg": "pf-m-visible-on-lg",
    "hiddenOnXl": "pf-m-hidden-on-xl",
    "visibleOnXl": "pf-m-visible-on-xl",
    "hiddenOn_2xl": "pf-m-hidden-on-2xl",
    "visibleOn_2xl": "pf-m-visible-on-2xl",
    "noPadding": "pf-m-no-padding"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataList.js
var gridBreakpointClasses = {
  none: data_list_default.modifiers.gridNone,
  always: "pf-m-grid",
  // Placeholder per https://github.com/patternfly/patternfly-react/issues/4965#issuecomment-704984236
  sm: data_list_default.modifiers.gridSm,
  md: data_list_default.modifiers.gridMd,
  lg: data_list_default.modifiers.gridLg,
  xl: data_list_default.modifiers.gridXl,
  "2xl": data_list_default.modifiers.grid_2xl
};
var DataListWrapModifier;
(function(DataListWrapModifier2) {
  DataListWrapModifier2["nowrap"] = "nowrap";
  DataListWrapModifier2["truncate"] = "truncate";
  DataListWrapModifier2["breakWord"] = "breakWord";
})(DataListWrapModifier || (DataListWrapModifier = {}));
var DataListContext = (0, import_react25.createContext)({
  isSelectable: false
});
var DataListBase = (_a) => {
  var { children = null, className = "", "aria-label": ariaLabel, onSelectDataListItem, selectedDataListItemId = "", isCompact = false, gridBreakpoint = "md", wrapModifier = null, onSelectableRowChange, innerRef } = _a, props = __rest(_a, ["children", "className", "aria-label", "onSelectDataListItem", "selectedDataListItemId", "isCompact", "gridBreakpoint", "wrapModifier", "onSelectableRowChange", "innerRef"]);
  const isSelectable = onSelectDataListItem !== void 0;
  const updateSelectedDataListItem = (event, id) => {
    onSelectDataListItem(event, id);
  };
  return (0, import_jsx_runtime62.jsx)(DataListContext.Provider, { value: {
    isSelectable,
    selectedDataListItemId,
    updateSelectedDataListItem,
    onSelectableRowChange
  }, children: (0, import_jsx_runtime62.jsx)("ul", Object.assign({ className: css(data_list_default.dataList, isCompact && data_list_default.modifiers.compact, gridBreakpointClasses[gridBreakpoint], wrapModifier && data_list_default.modifiers[wrapModifier], className), style: props.style, role: "list", "aria-label": ariaLabel, ref: innerRef }, props, { children })) });
};
DataListBase.displayName = "DataListBase";
var DataList = (0, import_react25.forwardRef)((props, ref) => (0, import_jsx_runtime62.jsx)(DataListBase, Object.assign({ innerRef: ref }, props)));
DataList.displayName = "DataList";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListAction.js
var import_jsx_runtime63 = __toESM(require_jsx_runtime());
var DataListAction = (_a) => {
  var {
    children,
    className,
    visibility,
    /* eslint-disable @typescript-eslint/no-unused-vars */
    id,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy
  } = _a, props = __rest(_a, ["children", "className", "visibility", "id", "aria-label", "aria-labelledby"]);
  return (0, import_jsx_runtime63.jsx)("div", Object.assign({ className: css(data_list_default.dataListItemAction, formatBreakpointMods(visibility, data_list_default), className) }, props, { children }));
};
DataListAction.displayName = "DataListAction";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListCell.js
var import_jsx_runtime64 = __toESM(require_jsx_runtime());
var import_react26 = __toESM(require_react());
var DataListCell = (_a) => {
  var { children = null, className = "", width = 1, isFilled = true, alignRight = false, isIcon = false, wrapModifier = null } = _a, props = __rest(_a, ["children", "className", "width", "isFilled", "alignRight", "isIcon", "wrapModifier"]);
  const cellRef = (0, import_react26.useRef)(null);
  const [isTooltipVisible, setIsTooltipVisible] = (0, import_react26.useState)(false);
  (0, import_react26.useEffect)(() => {
    if (!cellRef.current || wrapModifier !== "truncate") {
      return;
    }
    const showTooltip = cellRef.current && cellRef.current.offsetWidth < cellRef.current.scrollWidth;
    if (isTooltipVisible !== showTooltip) {
      setIsTooltipVisible(showTooltip);
    }
  }, [cellRef, wrapModifier, isTooltipVisible]);
  return (0, import_jsx_runtime64.jsxs)("div", Object.assign({ className: css(data_list_default.dataListCell, width > 1 && data_list_default.modifiers[`flex_${width}`], !isFilled && data_list_default.modifiers.noFill, alignRight && data_list_default.modifiers.alignRight, isIcon && data_list_default.modifiers.icon, className, wrapModifier && data_list_default.modifiers[wrapModifier]) }, isTooltipVisible && { tabIndex: 0 }, { ref: cellRef }, props, { children: [children, isTooltipVisible && (0, import_jsx_runtime64.jsx)(Tooltip, { content: children, triggerRef: cellRef })] }));
};
DataListCell.displayName = "DataListCell";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListCheck.js
var import_jsx_runtime65 = __toESM(require_jsx_runtime());
var import_react27 = __toESM(require_react());
var DataListCheck = (_a) => {
  var { id, className, onChange, isValid = true, isDisabled = false, isChecked, checked, defaultChecked, otherControls = false } = _a, props = __rest(_a, ["id", "className", "onChange", "isValid", "isDisabled", "isChecked", "checked", "defaultChecked", "otherControls"]);
  const check = (0, import_jsx_runtime65.jsx)("div", { className: css(data_list_default.dataListCheck), children: (0, import_jsx_runtime65.jsx)(GenerateId, { children: (randomId) => (0, import_jsx_runtime65.jsx)(Checkbox, Object.assign({ id: id !== null && id !== void 0 ? id : `datalist-check-${randomId}`, isChecked, checked, defaultChecked, onChange, "aria-invalid": !isValid, isDisabled, isLabelWrapped: true }, props)) }) });
  return (0, import_jsx_runtime65.jsxs)(import_react27.Fragment, { children: [!otherControls && (0, import_jsx_runtime65.jsx)("div", { className: css(data_list_default.dataListItemControl, className), children: check }), otherControls && check] });
};
DataListCheck.displayName = "DataListCheck";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListControl.js
var import_jsx_runtime66 = __toESM(require_jsx_runtime());
var DataListControl = (_a) => {
  var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime66.jsx)("div", Object.assign({ className: css(data_list_default.dataListItemControl, className) }, props, { children }));
};
DataListControl.displayName = "DataListControl";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListDragButton.js
var import_jsx_runtime67 = __toESM(require_jsx_runtime());
var DataListDragButton = (_a) => {
  var { className = "", isDisabled = false } = _a, props = __rest(_a, ["className", "isDisabled"]);
  return (0, import_jsx_runtime67.jsx)("button", Object.assign({ className: css(data_list_default.dataListItemDraggableButton, isDisabled && data_list_default.modifiers.disabled, className), type: "button", disabled: isDisabled }, props, { children: (0, import_jsx_runtime67.jsx)("span", { className: css(data_list_default.dataListItemDraggableIcon), children: (0, import_jsx_runtime67.jsx)(grip_vertical_icon_default, {}) }) }));
};
DataListDragButton.displayName = "DataListDragButton";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListItem.js
var import_jsx_runtime68 = __toESM(require_jsx_runtime());
var import_react28 = __toESM(require_react());
var DataListItem = class extends import_react28.Component {
  render() {
    const _a = this.props, { children, isExpanded, className, id, "aria-labelledby": ariaLabelledBy, selectableInputAriaLabel } = _a, props = __rest(_a, ["children", "isExpanded", "className", "id", "aria-labelledby", "selectableInputAriaLabel"]);
    return (0, import_jsx_runtime68.jsx)(DataListContext.Consumer, { children: ({ isSelectable, selectedDataListItemId, updateSelectedDataListItem, onSelectableRowChange }) => {
      const selectDataListItem = (event) => {
        let target = event.target;
        while (event.currentTarget !== target) {
          if ("onclick" in target && target.onclick || target.parentNode.classList.contains(data_list_default.dataListItemAction) || target.parentNode.classList.contains(data_list_default.dataListItemControl)) {
            return;
          } else {
            target = target.parentNode;
          }
        }
        updateSelectedDataListItem(event, id);
      };
      const onKeyDown = (event) => {
        if ([KeyTypes.Enter, KeyTypes.Space].includes(event.key)) {
          event.preventDefault();
          updateSelectedDataListItem(event, id);
        }
      };
      const isSelected = selectedDataListItemId === id;
      const selectableInputAriaProps = selectableInputAriaLabel ? { "aria-label": selectableInputAriaLabel } : { "aria-labelledby": ariaLabelledBy };
      return (0, import_jsx_runtime68.jsxs)("li", Object.assign({ id, className: css(data_list_default.dataListItem, isExpanded && data_list_default.modifiers.expanded, isSelectable && data_list_default.modifiers.clickable, selectedDataListItemId && isSelected && data_list_default.modifiers.selected, className) }, isSelectable && { tabIndex: 0, onClick: selectDataListItem, onKeyDown }, props, { children: [onSelectableRowChange && (0, import_jsx_runtime68.jsx)("input", Object.assign({ className: "pf-v6-screen-reader", type: "radio", checked: isSelected, onChange: (event) => onSelectableRowChange(event, id), tabIndex: -1 }, selectableInputAriaProps)), import_react28.Children.map(children, (child) => (0, import_react28.isValidElement)(child) && (0, import_react28.cloneElement)(child, {
        rowid: ariaLabelledBy
      }))] }));
    } });
  }
};
DataListItem.displayName = "DataListItem";
DataListItem.defaultProps = {
  isExpanded: false,
  className: "",
  id: "",
  children: null,
  "aria-labelledby": ""
};

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListItemCells.js
var import_jsx_runtime69 = __toESM(require_jsx_runtime());
var DataListItemCells = (_a) => {
  var {
    className = "",
    dataListCells,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    rowid = ""
  } = _a, props = __rest(_a, ["className", "dataListCells", "rowid"]);
  return (0, import_jsx_runtime69.jsx)("div", Object.assign({ className: css(data_list_default.dataListItemContent, className) }, props, { children: dataListCells }));
};
DataListItemCells.displayName = "DataListItemCells";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListItemRow.js
var import_jsx_runtime70 = __toESM(require_jsx_runtime());
var import_react29 = __toESM(require_react());
var DataListItemRow = (_a) => {
  var { children, className = "", rowid = "", wrapModifier = null } = _a, props = __rest(_a, ["children", "className", "rowid", "wrapModifier"]);
  return (0, import_jsx_runtime70.jsx)("div", Object.assign({ className: css(data_list_default.dataListItemRow, className, wrapModifier && data_list_default.modifiers[wrapModifier]) }, props, { children: import_react29.Children.map(children, (child) => (0, import_react29.isValidElement)(child) && (0, import_react29.cloneElement)(child, {
    rowid
  })) }));
};
DataListItemRow.displayName = "DataListItemRow";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListToggle.js
var import_jsx_runtime71 = __toESM(require_jsx_runtime());
var DataListToggle = (_a) => {
  var { className = "", isExpanded = false, "aria-controls": ariaControls = "", "aria-label": ariaLabel = "Details", rowid = "", id, buttonProps } = _a, props = __rest(_a, ["className", "isExpanded", "aria-controls", "aria-label", "rowid", "id", "buttonProps"]);
  return (0, import_jsx_runtime71.jsx)("div", Object.assign({ className: css(data_list_default.dataListItemControl, className) }, props, { children: (0, import_jsx_runtime71.jsx)("div", { className: css(data_list_default.dataListToggle), children: (0, import_jsx_runtime71.jsx)(Button, Object.assign({ id, variant: ButtonVariant.plain, "aria-controls": ariaControls !== "" && ariaControls, "aria-label": ariaLabel, "aria-labelledby": ariaLabel !== "Details" ? null : `${rowid} ${id}`, "aria-expanded": isExpanded }, buttonProps, { icon: (0, import_jsx_runtime71.jsx)("div", { className: css(data_list_default.dataListToggleIcon), children: (0, import_jsx_runtime71.jsx)(angle_right_icon_default, {}) }) })) }) }));
};
DataListToggle.displayName = "DataListToggle";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListContent.js
var import_jsx_runtime72 = __toESM(require_jsx_runtime());
var DataListContent = (_a) => {
  var {
    className = "",
    children = null,
    id = "",
    isHidden = false,
    "aria-label": ariaLabel,
    hasNoPadding = false,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    rowid = ""
  } = _a, props = __rest(_a, ["className", "children", "id", "isHidden", "aria-label", "hasNoPadding", "rowid"]);
  return (0, import_jsx_runtime72.jsx)("section", Object.assign({ id, className: css(data_list_default.dataListExpandableContent, className), hidden: isHidden, "aria-label": ariaLabel }, props, { children: (0, import_jsx_runtime72.jsx)("div", { className: css(data_list_default.dataListExpandableContentBody, hasNoPadding && data_list_default.modifiers.noPadding), children }) }));
};
DataListContent.displayName = "DataListContent";

// node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListText.js
var import_jsx_runtime73 = __toESM(require_jsx_runtime());
var import_react30 = __toESM(require_react());
var DataListText = (_a) => {
  var { children = null, className = "", component = "span", wrapModifier = null, tooltip: tooltipProp = "", onMouseEnter: onMouseEnterProp = () => {
  } } = _a, props = __rest(_a, ["children", "className", "component", "wrapModifier", "tooltip", "onMouseEnter"]);
  const Component32 = component;
  const [tooltip, setTooltip] = (0, import_react30.useState)("");
  const onMouseEnter = (event) => {
    if (event.target.offsetWidth < event.target.scrollWidth) {
      setTooltip(tooltipProp || event.target.innerHTML);
    } else {
      setTooltip("");
    }
    onMouseEnterProp(event);
  };
  const text = (0, import_jsx_runtime73.jsx)(Component32, Object.assign({ onMouseEnter, className: css(className, wrapModifier && data_list_default.modifiers[wrapModifier], data_list_default.dataListText) }, props, { children }));
  return tooltip !== "" ? (0, import_jsx_runtime73.jsx)(Tooltip, { content: tooltip, isVisible: true, children: text }) : text;
};
DataListText.displayName = "DataListText";

// node_modules/@patternfly/react-core/dist/esm/components/DatePicker/DatePicker.js
var import_jsx_runtime76 = __toESM(require_jsx_runtime());
var import_react31 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/DatePicker/date-picker.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/DatePicker/date-picker.css";
var date_picker_default = {
  "datePicker": "pf-v6-c-date-picker",
  "datePickerCalendar": "pf-v6-c-date-picker__calendar",
  "datePickerHelperText": "pf-v6-c-date-picker__helper-text",
  "datePickerInput": "pf-v6-c-date-picker__input",
  "formControl": "pf-v6-c-form-control",
  "modifiers": {
    "alignRight": "pf-m-align-right",
    "top": "pf-m-top",
    "static": "pf-m-static"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperText.js
var import_jsx_runtime74 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/HelperText/helper-text.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/HelperText/helper-text.css";
var helper_text_default = {
  "helperText": "pf-v6-c-helper-text",
  "helperTextItem": "pf-v6-c-helper-text__item",
  "helperTextItemIcon": "pf-v6-c-helper-text__item-icon",
  "helperTextItemText": "pf-v6-c-helper-text__item-text",
  "modifiers": {
    "hidden": "pf-m-hidden",
    "indeterminate": "pf-m-indeterminate",
    "warning": "pf-m-warning",
    "success": "pf-m-success",
    "error": "pf-m-error",
    "dynamic": "pf-m-dynamic"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperText.js
var HelperText = (_a) => {
  var { children, className, component = "div", id, isLiveRegion = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "component", "id", "isLiveRegion", "aria-label"]);
  const Component32 = component;
  return (0, import_jsx_runtime74.jsx)(Component32, Object.assign({ id, className: css(helper_text_default.helperText, className) }, isLiveRegion && { "aria-live": "polite" }, component === "ul" && { role: "list", "aria-label": ariaLabel }, props, { children }));
};
HelperText.displayName = "HelperText";

// node_modules/@patternfly/react-core/dist/esm/components/HelperText/HelperTextItem.js
var import_jsx_runtime75 = __toESM(require_jsx_runtime());
var HelperTextItemVariant;
(function(HelperTextItemVariant2) {
  HelperTextItemVariant2["default"] = "default";
  HelperTextItemVariant2["warning"] = "warning";
  HelperTextItemVariant2["error"] = "error";
  HelperTextItemVariant2["success"] = "success";
})(HelperTextItemVariant || (HelperTextItemVariant = {}));
var defaultVariantIcons = {
  indeterminate: (0, import_jsx_runtime75.jsx)(minus_icon_default, {}),
  warning: (0, import_jsx_runtime75.jsx)(exclamation_triangle_icon_default, {}),
  success: (0, import_jsx_runtime75.jsx)(check_circle_icon_default, {}),
  error: (0, import_jsx_runtime75.jsx)(exclamation_circle_icon_default, {})
};
var HelperTextItem = (_a) => {
  var { children, className, component = "div", variant = "default", icon, id, screenReaderText = `${variant} status` } = _a, props = __rest(_a, ["children", "className", "component", "variant", "icon", "id", "screenReaderText"]);
  const Component32 = component;
  const isNotDefaultVariant = variant !== "default";
  const defaultIcon = isNotDefaultVariant && defaultVariantIcons[variant];
  const shouldRenderSRText = isNotDefaultVariant && screenReaderText && screenReaderText !== "";
  return (0, import_jsx_runtime75.jsxs)(Component32, Object.assign({ className: css(helper_text_default.helperTextItem, isNotDefaultVariant && helper_text_default.modifiers[variant], className), id }, props, { children: [(defaultIcon || icon) && (0, import_jsx_runtime75.jsx)("span", { className: css(helper_text_default.helperTextItemIcon), children: icon || defaultIcon }), (0, import_jsx_runtime75.jsxs)("span", { className: css(helper_text_default.helperTextItemText), children: [children, shouldRenderSRText && (0, import_jsx_runtime75.jsxs)("span", { className: "pf-v6-screen-reader", children: [": ", screenReaderText, ";"] })] })] }));
};
HelperTextItem.displayName = "HelperTextItem";

// node_modules/@patternfly/react-tokens/dist/esm/c_date_picker__input_c_form_control_width_chars.js
var c_date_picker__input_c_form_control_width_chars = {
  "name": "--pf-v6-c-date-picker__input--c-form-control--width-chars",
  "value": "11",
  "var": "var(--pf-v6-c-date-picker__input--c-form-control--width-chars)"
};
var c_date_picker_input_c_form_control_width_chars_default = c_date_picker__input_c_form_control_width_chars;

// node_modules/@patternfly/react-core/dist/esm/components/DatePicker/DatePicker.js
var yyyyMMddFormat = (date) => `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, "0")}-${date.getDate().toString().padStart(2, "0")}`;
var DatePickerBase = (_a, ref) => {
  var { className, locale = void 0, dateFormat = yyyyMMddFormat, dateParse = (val) => val.split("-").length === 3 ? /* @__PURE__ */ new Date(`${val}T00:00:00`) : /* @__PURE__ */ new Date(void 0), isDisabled = false, placeholder = "YYYY-MM-DD", value: valueProp = "", "aria-label": ariaLabel = "Date picker", buttonAriaLabel = "Toggle date picker", onChange = () => void 0, onBlur = () => void 0, invalidFormatText = "Invalid date", requiredDateOptions, helperText, appendTo = "inline", popoverProps, monthFormat, weekdayFormat, longWeekdayFormat, dayFormat, weekStart, validators = [], rangeStart, style: styleProps = {}, inputProps = {} } = _a, props = __rest(_a, ["className", "locale", "dateFormat", "dateParse", "isDisabled", "placeholder", "value", "aria-label", "buttonAriaLabel", "onChange", "onBlur", "invalidFormatText", "requiredDateOptions", "helperText", "appendTo", "popoverProps", "monthFormat", "weekdayFormat", "longWeekdayFormat", "dayFormat", "weekStart", "validators", "rangeStart", "style", "inputProps"]);
  const [value, setValue] = (0, import_react31.useState)(valueProp);
  const [valueDate, setValueDate] = (0, import_react31.useState)(dateParse(value));
  const [errorText, setErrorText] = (0, import_react31.useState)("");
  const [popoverOpen, setPopoverOpen] = (0, import_react31.useState)(false);
  const [selectOpen, setSelectOpen] = (0, import_react31.useState)(false);
  const [pristine, setPristine] = (0, import_react31.useState)(true);
  const [textInputFocused, setTextInputFocused] = (0, import_react31.useState)(false);
  const widthChars = (0, import_react31.useMemo)(() => Math.max(dateFormat(/* @__PURE__ */ new Date()).length, placeholder.length), [dateFormat]);
  const style = Object.assign({ [c_date_picker_input_c_form_control_width_chars_default.name]: widthChars }, styleProps);
  const buttonRef = (0, import_react31.useRef)(void 0);
  const datePickerWrapperRef = (0, import_react31.useRef)(void 0);
  const triggerRef = (0, import_react31.useRef)(void 0);
  const dateIsRequired = (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired) || false;
  const emptyDateText = (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.emptyDateText) || "Date cannot be blank";
  (0, import_react31.useEffect)(() => {
    setValue(valueProp);
    setValueDate(dateParse(valueProp));
  }, [valueProp]);
  (0, import_react31.useEffect)(() => {
    if (isValidDate(valueDate)) {
      applyValidators(valueDate);
    }
  }, [validators]);
  (0, import_react31.useEffect)(() => {
    setPristine(!value);
    const newValueDate = dateParse(value);
    if (errorText && isValidDate(newValueDate)) {
      applyValidators(newValueDate);
    }
    if (value === "" && !pristine && !textInputFocused) {
      dateIsRequired ? setErrorText(emptyDateText) : setErrorText("");
    }
  }, [value]);
  const applyValidators = (date) => {
    const validatorResults = validators.map((validator) => validator(date));
    const validatorsToApply = validatorResults.filter((validator) => validator !== "");
    setErrorText(validatorsToApply.join("\n") || "");
  };
  const onTextInput = (event, value2) => {
    setValue(value2);
    setErrorText("");
    const newValueDate = dateParse(value2);
    setValueDate(newValueDate);
    if (isValidDate(newValueDate)) {
      onChange(event, value2, new Date(newValueDate));
    } else {
      onChange(event, value2);
    }
  };
  const onInputBlur = (event) => {
    setTextInputFocused(false);
    const newValueDate = dateParse(value);
    const dateIsValid = isValidDate(newValueDate);
    const onBlurDateArg = dateIsValid ? new Date(newValueDate) : void 0;
    onBlur(event, value, onBlurDateArg);
    if (dateIsValid) {
      applyValidators(newValueDate);
    }
    if (!dateIsValid && !pristine) {
      setErrorText(invalidFormatText);
    }
    if (!dateIsValid && pristine && (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired)) {
      setErrorText(emptyDateText);
    }
  };
  const onDateClick = (_event, newValueDate) => {
    const newValue = dateFormat(newValueDate);
    setValue(newValue);
    setValueDate(newValueDate);
    applyValidators(newValueDate);
    setPopoverOpen(false);
    onChange(null, newValue, new Date(newValueDate));
  };
  const onKeyPress = (ev) => {
    if (ev.key === "Enter" && value) {
      if (isValidDate(valueDate)) {
        applyValidators(valueDate);
      } else {
        setErrorText(invalidFormatText);
      }
    }
  };
  (0, import_react31.useImperativeHandle)(ref, () => ({
    setCalendarOpen: (isOpen) => setPopoverOpen(isOpen),
    toggleCalendar: (setOpen) => {
      setPopoverOpen((prev) => setOpen !== void 0 ? setOpen : !prev);
    },
    isCalendarOpen: popoverOpen
  }), [setPopoverOpen, popoverOpen, selectOpen]);
  const createFocusSelectorString = (modifierClass) => `.${calendar_month_default.calendarMonthDatesCell}.${modifierClass} .${calendar_month_default.calendarMonthDate}`;
  const focusSelectorForSelectedDate = createFocusSelectorString(calendar_month_default.modifiers.selected);
  const focusSelectorForSelectedEndRangeDate = createFocusSelectorString(`${calendar_month_default.modifiers.selected}.${calendar_month_default.modifiers.endRange}`);
  const focusSelectorForUnselectedDate = createFocusSelectorString(calendar_month_default.modifiers.current);
  const getElementSelectorToFocus = () => {
    if (isValidDate(valueDate) && isValidDate(rangeStart)) {
      return focusSelectorForSelectedEndRangeDate;
    }
    if (isValidDate(valueDate) || isValidDate(rangeStart)) {
      return focusSelectorForSelectedDate;
    }
    return focusSelectorForUnselectedDate;
  };
  return (0, import_jsx_runtime76.jsxs)("div", Object.assign({ className: css(date_picker_default.datePicker, className), ref: datePickerWrapperRef, style }, props, { children: [(0, import_jsx_runtime76.jsx)(Popover, Object.assign({ elementToFocus: getElementSelectorToFocus(), position: "bottom", bodyContent: (0, import_jsx_runtime76.jsx)(CalendarMonth, {
    date: valueDate,
    onChange: onDateClick,
    locale,
    // Use truthy values of strings
    validators: validators.map((validator) => (date) => !validator(date)),
    onSelectToggle: (open) => setSelectOpen(open),
    monthFormat,
    weekdayFormat,
    longWeekdayFormat,
    dayFormat,
    weekStart,
    rangeStart
  }), showClose: false, isVisible: popoverOpen, shouldClose: (event, hideFunction) => {
    event = event;
    if (event.key === KeyTypes.Escape && selectOpen) {
      event.stopPropagation();
      setSelectOpen(false);
      return false;
    }
    if (buttonRef.current && buttonRef.current.contains(event.target)) {
      return false;
    }
    if (popoverOpen) {
      event.stopPropagation();
      setPopoverOpen(false);
      hideFunction();
      (requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired) && !value && setErrorText(emptyDateText);
    }
    if (event.key === KeyTypes.Escape && popoverOpen) {
      event.stopPropagation();
    }
    return true;
  }, withFocusTrap: true, hasNoPadding: true, hasAutoWidth: true, appendTo, triggerRef }, popoverProps, { children: (0, import_jsx_runtime76.jsx)("div", { className: date_picker_default.datePickerInput, ref: triggerRef, children: (0, import_jsx_runtime76.jsxs)(InputGroup, { children: [(0, import_jsx_runtime76.jsx)(InputGroupItem, { children: (0, import_jsx_runtime76.jsx)(TextInput, Object.assign({ isDisabled, isRequired: requiredDateOptions === null || requiredDateOptions === void 0 ? void 0 : requiredDateOptions.isRequired, "aria-label": ariaLabel, placeholder, validated: errorText.trim() ? "error" : "default", value, onChange: onTextInput, onBlur: onInputBlur, onFocus: () => setTextInputFocused(true), onKeyPress }, inputProps)) }), (0, import_jsx_runtime76.jsx)(InputGroupItem, { children: (0, import_jsx_runtime76.jsx)(Button, { ref: buttonRef, variant: "control", "aria-label": buttonAriaLabel, onClick: () => setPopoverOpen(!popoverOpen), isDisabled, icon: (0, import_jsx_runtime76.jsx)(outlined_calendar_alt_icon_default, {}), "aria-haspopup": "dialog" }) })] }) }) })), (errorText || helperText) && (0, import_jsx_runtime76.jsx)("div", { className: date_picker_default.datePickerHelperText, children: errorText ? (0, import_jsx_runtime76.jsx)(HelperText, { children: (0, import_jsx_runtime76.jsx)(HelperTextItem, { variant: "error", children: errorText }) }) : helperText })] }));
};
var DatePicker = (0, import_react31.forwardRef)(DatePickerBase);
DatePicker.displayName = "DatePicker";

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionList.js
var import_jsx_runtime77 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/DescriptionList/description-list.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/DescriptionList/description-list.css";
var description_list_default = {
  "card": "pf-v6-c-card",
  "descriptionList": "pf-v6-c-description-list",
  "descriptionListDescription": "pf-v6-c-description-list__description",
  "descriptionListGroup": "pf-v6-c-description-list__group",
  "descriptionListTerm": "pf-v6-c-description-list__term",
  "descriptionListTermIcon": "pf-v6-c-description-list__term-icon",
  "descriptionListText": "pf-v6-c-description-list__text",
  "modifiers": {
    "inlineGrid": "pf-m-inline-grid",
    "autoColumnWidths": "pf-m-auto-column-widths",
    "autoFit": "pf-m-auto-fit",
    "compact": "pf-m-compact",
    "fluid": "pf-m-fluid",
    "fillColumns": "pf-m-fill-columns",
    "displayLg": "pf-m-display-lg",
    "display_2xl": "pf-m-display-2xl",
    "helpText": "pf-m-help-text",
    "1Col": "pf-m-1-col",
    "2Col": "pf-m-2-col",
    "3Col": "pf-m-3-col",
    "horizontal": "pf-m-horizontal",
    "vertical": "pf-m-vertical",
    "1ColOnSm": "pf-m-1-col-on-sm",
    "2ColOnSm": "pf-m-2-col-on-sm",
    "3ColOnSm": "pf-m-3-col-on-sm",
    "horizontalOnSm": "pf-m-horizontal-on-sm",
    "verticalOnSm": "pf-m-vertical-on-sm",
    "1ColOnMd": "pf-m-1-col-on-md",
    "2ColOnMd": "pf-m-2-col-on-md",
    "3ColOnMd": "pf-m-3-col-on-md",
    "horizontalOnMd": "pf-m-horizontal-on-md",
    "verticalOnMd": "pf-m-vertical-on-md",
    "1ColOnLg": "pf-m-1-col-on-lg",
    "2ColOnLg": "pf-m-2-col-on-lg",
    "3ColOnLg": "pf-m-3-col-on-lg",
    "horizontalOnLg": "pf-m-horizontal-on-lg",
    "verticalOnLg": "pf-m-vertical-on-lg",
    "1ColOnXl": "pf-m-1-col-on-xl",
    "2ColOnXl": "pf-m-2-col-on-xl",
    "3ColOnXl": "pf-m-3-col-on-xl",
    "horizontalOnXl": "pf-m-horizontal-on-xl",
    "verticalOnXl": "pf-m-vertical-on-xl",
    "1ColOn_2xl": "pf-m-1-col-on-2xl",
    "2ColOn_2xl": "pf-m-2-col-on-2xl",
    "3ColOn_2xl": "pf-m-3-col-on-2xl",
    "horizontalOn_2xl": "pf-m-horizontal-on-2xl",
    "verticalOn_2xl": "pf-m-vertical-on-2xl"
  }
};

// node_modules/@patternfly/react-tokens/dist/esm/c_description_list_GridTemplateColumns_min.js
var c_description_list_GridTemplateColumns_min = {
  "name": "--pf-v6-c-description-list--GridTemplateColumns--min",
  "value": "0",
  "var": "var(--pf-v6-c-description-list--GridTemplateColumns--min)"
};
var c_description_list_GridTemplateColumns_min_default = c_description_list_GridTemplateColumns_min;

// node_modules/@patternfly/react-tokens/dist/esm/c_description_list_m_horizontal__term_width.js
var c_description_list_m_horizontal__term_width = {
  "name": "--pf-v6-c-description-list--m-horizontal__term--width",
  "value": "fit-content(20ch)",
  "var": "var(--pf-v6-c-description-list--m-horizontal__term--width)"
};
var c_description_list_m_horizontal_term_width_default = c_description_list_m_horizontal__term_width;

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionList.js
var cssTermWidth = {
  name: `--${description_list_default.descriptionList}_term-width`
};
var setBreakpointModifiers = (prefix, modifiers) => {
  const mods = modifiers;
  return Object.keys(mods || {}).reduce((acc, curr) => curr === "default" ? Object.assign(Object.assign({}, acc), { [prefix]: mods[curr] }) : Object.assign(Object.assign({}, acc), { [`${prefix}-on-${curr}`]: mods[curr] }), {});
};
var DescriptionList = (_a) => {
  var { className = "", children = null, isHorizontal = false, isAutoColumnWidths, isAutoFit, isInlineGrid, isCompact, isFluid, isFillColumns, displaySize = "default", columnModifier, autoFitMinModifier, termWidth, horizontalTermWidthModifier, orientation, style } = _a, props = __rest(_a, ["className", "children", "isHorizontal", "isAutoColumnWidths", "isAutoFit", "isInlineGrid", "isCompact", "isFluid", "isFillColumns", "displaySize", "columnModifier", "autoFitMinModifier", "termWidth", "horizontalTermWidthModifier", "orientation", "style"]);
  if (isAutoFit && autoFitMinModifier) {
    style = Object.assign(Object.assign({}, style), setBreakpointModifiers(c_description_list_GridTemplateColumns_min_default.name, autoFitMinModifier));
  }
  if (termWidth) {
    style = Object.assign(Object.assign({}, style), { [cssTermWidth.name]: termWidth });
  }
  if (isHorizontal && horizontalTermWidthModifier) {
    style = Object.assign(Object.assign({}, style), setBreakpointModifiers(c_description_list_m_horizontal_term_width_default.name, horizontalTermWidthModifier));
  }
  return (0, import_jsx_runtime77.jsx)("dl", Object.assign({ className: css(description_list_default.descriptionList, (isHorizontal || isFluid) && description_list_default.modifiers.horizontal, isAutoColumnWidths && description_list_default.modifiers.autoColumnWidths, isAutoFit && description_list_default.modifiers.autoFit, formatBreakpointMods(columnModifier, description_list_default), formatBreakpointMods(orientation, description_list_default), isInlineGrid && description_list_default.modifiers.inlineGrid, isCompact && description_list_default.modifiers.compact, isFluid && description_list_default.modifiers.fluid, isFillColumns && description_list_default.modifiers.fillColumns, displaySize === "lg" && description_list_default.modifiers.displayLg, displaySize === "2xl" && description_list_default.modifiers.display_2xl, className), style }, props, { children }));
};
DescriptionList.displayName = "DescriptionList";

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListDescription.js
var import_jsx_runtime78 = __toESM(require_jsx_runtime());
var DescriptionListDescription = (_a) => {
  var { children = null, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime78.jsx)("dd", Object.assign({ className: css(description_list_default.descriptionListDescription, className) }, props, { children: (0, import_jsx_runtime78.jsx)("div", { className: css(description_list_default.descriptionListText), children }) }));
};
DescriptionListDescription.displayName = "DescriptionListDescription";

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListGroup.js
var import_jsx_runtime79 = __toESM(require_jsx_runtime());
var DescriptionListGroup = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return (0, import_jsx_runtime79.jsx)("div", Object.assign({ className: css(description_list_default.descriptionListGroup, className) }, props, { children }));
};
DescriptionListGroup.displayName = "DescriptionListGroup";

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListTerm.js
var import_jsx_runtime80 = __toESM(require_jsx_runtime());
var DescriptionListTerm = (_a) => {
  var { children, className, icon } = _a, props = __rest(_a, ["children", "className", "icon"]);
  return (0, import_jsx_runtime80.jsxs)("dt", Object.assign({ className: css(description_list_default.descriptionListTerm, className) }, props, { children: [icon ? (0, import_jsx_runtime80.jsx)("span", { className: css(description_list_default.descriptionListTermIcon), children: icon }) : null, (0, import_jsx_runtime80.jsx)("span", { className: css(description_list_default.descriptionListText), children })] }));
};
DescriptionListTerm.displayName = "DescriptionListTerm";

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListTermHelpText.js
var import_jsx_runtime81 = __toESM(require_jsx_runtime());
var DescriptionListTermHelpText = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime81.jsx)("dt", Object.assign({ className: css(description_list_default.descriptionListTerm, className) }, props, { children }));
};
DescriptionListTermHelpText.displayName = "DescriptionListTermHelpText";

// node_modules/@patternfly/react-core/dist/esm/components/DescriptionList/DescriptionListTermHelpTextButton.js
var import_jsx_runtime82 = __toESM(require_jsx_runtime());
var import_react32 = __toESM(require_react());
var DescriptionListTermHelpTextButton = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  const helpTextRef = (0, import_react32.createRef)();
  const handleKeys = (event) => {
    if (!helpTextRef.current || helpTextRef.current !== event.target) {
      return;
    }
    const key = event.key;
    if (key === "Enter" || key === " ") {
      event.preventDefault();
      helpTextRef.current.click();
    }
  };
  return (0, import_jsx_runtime82.jsx)("span", Object.assign({ ref: helpTextRef, className: css(className, description_list_default.descriptionListText, description_list_default.modifiers.helpText), role: "button", type: "button", tabIndex: 0, onKeyDown: (event) => handleKeys(event) }, props, { children }));
};
DescriptionListTermHelpTextButton.displayName = "DescriptionListTermHelpTextButton";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/Drawer.js
var import_jsx_runtime83 = __toESM(require_jsx_runtime());
var import_react33 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Drawer/drawer.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Drawer/drawer.css";
var drawer_default = {
  "dirRtl": "pf-v6-m-dir-rtl",
  "drawer": "pf-v6-c-drawer",
  "drawerActions": "pf-v6-c-drawer__actions",
  "drawerBody": "pf-v6-c-drawer__body",
  "drawerClose": "pf-v6-c-drawer__close",
  "drawerContent": "pf-v6-c-drawer__content",
  "drawerDescription": "pf-v6-c-drawer__description",
  "drawerHead": "pf-v6-c-drawer__head",
  "drawerMain": "pf-v6-c-drawer__main",
  "drawerPanel": "pf-v6-c-drawer__panel",
  "drawerPanelMain": "pf-v6-c-drawer__panel-main",
  "drawerSection": "pf-v6-c-drawer__section",
  "drawerSplitter": "pf-v6-c-drawer__splitter",
  "drawerSplitterHandle": "pf-v6-c-drawer__splitter-handle",
  "modifiers": {
    "panelBottom": "pf-m-panel-bottom",
    "inline": "pf-m-inline",
    "static": "pf-m-static",
    "noBorder": "pf-m-no-border",
    "resizable": "pf-m-resizable",
    "panelLeft": "pf-m-panel-left",
    "expanded": "pf-m-expanded",
    "resizing": "pf-m-resizing",
    "secondary": "pf-m-secondary",
    "noBackground": "pf-m-no-background",
    "primary": "pf-m-primary",
    "noPadding": "pf-m-no-padding",
    "padding": "pf-m-padding",
    "vertical": "pf-m-vertical",
    "width_25": "pf-m-width-25",
    "width_33": "pf-m-width-33",
    "width_50": "pf-m-width-50",
    "width_66": "pf-m-width-66",
    "width_75": "pf-m-width-75",
    "width_100": "pf-m-width-100",
    "width_25OnLg": "pf-m-width-25-on-lg",
    "width_33OnLg": "pf-m-width-33-on-lg",
    "width_50OnLg": "pf-m-width-50-on-lg",
    "width_66OnLg": "pf-m-width-66-on-lg",
    "width_75OnLg": "pf-m-width-75-on-lg",
    "width_100OnLg": "pf-m-width-100-on-lg",
    "width_25OnXl": "pf-m-width-25-on-xl",
    "width_33OnXl": "pf-m-width-33-on-xl",
    "width_50OnXl": "pf-m-width-50-on-xl",
    "width_66OnXl": "pf-m-width-66-on-xl",
    "width_75OnXl": "pf-m-width-75-on-xl",
    "width_100OnXl": "pf-m-width-100-on-xl",
    "width_25On_2xl": "pf-m-width-25-on-2xl",
    "width_33On_2xl": "pf-m-width-33-on-2xl",
    "width_50On_2xl": "pf-m-width-50-on-2xl",
    "width_66On_2xl": "pf-m-width-66-on-2xl",
    "width_75On_2xl": "pf-m-width-75-on-2xl",
    "width_100On_2xl": "pf-m-width-100-on-2xl",
    "inlineOnLg": "pf-m-inline-on-lg",
    "staticOnLg": "pf-m-static-on-lg",
    "inlineOnXl": "pf-m-inline-on-xl",
    "staticOnXl": "pf-m-static-on-xl",
    "inlineOn_2xl": "pf-m-inline-on-2xl",
    "staticOn_2xl": "pf-m-static-on-2xl"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/Drawer.js
var DrawerColorVariant;
(function(DrawerColorVariant2) {
  DrawerColorVariant2["default"] = "default";
  DrawerColorVariant2["secondary"] = "secondary";
  DrawerColorVariant2["noBackground"] = "no-background";
})(DrawerColorVariant || (DrawerColorVariant = {}));
var DrawerContext = (0, import_react33.createContext)({
  isExpanded: false,
  isStatic: false,
  onExpand: () => {
  },
  position: "end",
  drawerRef: null,
  drawerContentRef: null,
  isInline: false
});
var Drawer = (_a) => {
  var { className = "", children, isExpanded = false, isInline = false, isStatic = false, position = "end", onExpand = () => {
  } } = _a, props = __rest(_a, ["className", "children", "isExpanded", "isInline", "isStatic", "position", "onExpand"]);
  const drawerRef = (0, import_react33.useRef)(void 0);
  const drawerContentRef = (0, import_react33.useRef)(void 0);
  return (0, import_jsx_runtime83.jsx)(DrawerContext.Provider, { value: { isExpanded, isStatic, onExpand, position, drawerRef, drawerContentRef, isInline }, children: (0, import_jsx_runtime83.jsx)("div", Object.assign({ className: css(drawer_default.drawer, isExpanded && drawer_default.modifiers.expanded, isInline && drawer_default.modifiers.inline, isStatic && drawer_default.modifiers.static, (position === "left" || position === "start") && drawer_default.modifiers.panelLeft, position === "bottom" && drawer_default.modifiers.panelBottom, className), ref: drawerRef }, props, { children })) });
};
Drawer.displayName = "Drawer";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerActions.js
var import_jsx_runtime84 = __toESM(require_jsx_runtime());
var DrawerActions = (_a) => {
  var { className = "", children } = _a, props = __rest(_a, ["className", "children"]);
  return (0, import_jsx_runtime84.jsx)("div", Object.assign({ className: css(drawer_default.drawerActions, className) }, props, { children }));
};
DrawerActions.displayName = "DrawerActions";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerCloseButton.js
var import_jsx_runtime85 = __toESM(require_jsx_runtime());
var DrawerCloseButton = (_a) => {
  var { className = "", onClose = () => void 0, "aria-label": ariaLabel = "Close drawer panel" } = _a, props = __rest(_a, ["className", "onClose", "aria-label"]);
  return (0, import_jsx_runtime85.jsx)("div", Object.assign({ className: css(drawer_default.drawerClose, className) }, props, { children: (0, import_jsx_runtime85.jsx)(Button, { variant: "plain", onClick: onClose, "aria-label": ariaLabel, icon: (0, import_jsx_runtime85.jsx)(times_icon_default, {}) }) }));
};
DrawerCloseButton.displayName = "DrawerCloseButton";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerContent.js
var import_jsx_runtime87 = __toESM(require_jsx_runtime());
var import_react34 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerMain.js
var import_jsx_runtime86 = __toESM(require_jsx_runtime());
var DrawerMain = (_a) => {
  var { className = "", children } = _a, props = __rest(_a, ["className", "children"]);
  return (0, import_jsx_runtime86.jsx)("div", Object.assign({ className: css(drawer_default.drawerMain, className) }, props, { children }));
};
DrawerMain.displayName = "DrawerMain";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerContent.js
var DrawerContentColorVariant;
(function(DrawerContentColorVariant2) {
  DrawerContentColorVariant2["default"] = "default";
  DrawerContentColorVariant2["primary"] = "primary";
  DrawerContentColorVariant2["secondary"] = "secondary";
})(DrawerContentColorVariant || (DrawerContentColorVariant = {}));
var DrawerContent = (_a) => {
  var { className, children, panelContent, colorVariant = DrawerContentColorVariant.default } = _a, props = __rest(_a, ["className", "children", "panelContent", "colorVariant"]);
  const { drawerContentRef } = (0, import_react34.useContext)(DrawerContext);
  return (0, import_jsx_runtime87.jsxs)(DrawerMain, { children: [(0, import_jsx_runtime87.jsx)("div", Object.assign({ className: css(drawer_default.drawerContent, colorVariant === DrawerContentColorVariant.primary && drawer_default.modifiers.primary, colorVariant === DrawerContentColorVariant.secondary && drawer_default.modifiers.secondary, className), ref: drawerContentRef }, props, { children })), panelContent] });
};
DrawerContent.displayName = "DrawerContent";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerContentBody.js
var import_jsx_runtime88 = __toESM(require_jsx_runtime());
var DrawerContentBody = (_a) => {
  var { className = "", children, hasPadding = false } = _a, props = __rest(_a, ["className", "children", "hasPadding"]);
  return (0, import_jsx_runtime88.jsx)("div", Object.assign({ className: css(drawer_default.drawerBody, hasPadding && drawer_default.modifiers.padding, className) }, props, { children }));
};
DrawerContentBody.displayName = "DrawerContentBody";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelDescription.js
var import_jsx_runtime89 = __toESM(require_jsx_runtime());
var DrawerPanelDescription = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return (0, import_jsx_runtime89.jsx)("div", Object.assign({ className: css(drawer_default.drawerDescription, className) }, props, { children }));
};
DrawerPanelDescription.displayName = "DrawerPanelDescription";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerHead.js
var import_jsx_runtime90 = __toESM(require_jsx_runtime());
var DrawerHead = (_a) => {
  var { className = "", children } = _a, props = __rest(_a, ["className", "children"]);
  return (0, import_jsx_runtime90.jsx)("div", Object.assign({ className: css(drawer_default.drawerHead, className) }, props, { children }));
};
DrawerHead.displayName = "DrawerHead";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelBody.js
var import_jsx_runtime91 = __toESM(require_jsx_runtime());
var DrawerPanelBody = (_a) => {
  var { className = "", children, hasNoPadding = false } = _a, props = __rest(_a, ["className", "children", "hasNoPadding"]);
  return (0, import_jsx_runtime91.jsx)("div", Object.assign({ className: css(drawer_default.drawerBody, hasNoPadding && drawer_default.modifiers.noPadding, className) }, props, { children }));
};
DrawerPanelBody.displayName = "DrawerPanelBody";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelContent.js
var import_jsx_runtime92 = __toESM(require_jsx_runtime());
var import_react35 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/c_drawer__panel_md_FlexBasis.js
var c_drawer__panel_md_FlexBasis = {
  "name": "--pf-v6-c-drawer__panel--md--FlexBasis",
  "value": "50%",
  "var": "var(--pf-v6-c-drawer__panel--md--FlexBasis)"
};
var c_drawer_panel_md_FlexBasis_default = c_drawer__panel_md_FlexBasis;

// node_modules/@patternfly/react-tokens/dist/esm/c_drawer__panel_md_FlexBasis_min.js
var c_drawer__panel_md_FlexBasis_min = {
  "name": "--pf-v6-c-drawer__panel--md--FlexBasis--min",
  "value": "1.5rem",
  "var": "var(--pf-v6-c-drawer__panel--md--FlexBasis--min)"
};
var c_drawer_panel_md_FlexBasis_min_default = c_drawer__panel_md_FlexBasis_min;

// node_modules/@patternfly/react-tokens/dist/esm/c_drawer__panel_md_FlexBasis_max.js
var c_drawer__panel_md_FlexBasis_max = {
  "name": "--pf-v6-c-drawer__panel--md--FlexBasis--max",
  "value": "100%",
  "var": "var(--pf-v6-c-drawer__panel--md--FlexBasis--max)"
};
var c_drawer_panel_md_FlexBasis_max_default = c_drawer__panel_md_FlexBasis_max;

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelContent.js
var isResizing = null;
var newSize = 0;
var DrawerPanelContent = (_a) => {
  var { className, id, children, hasNoBorder = false, isResizable = false, onResize, minSize, defaultSize, maxSize, increment = 5, resizeAriaLabel = "Resize", widths, colorVariant = DrawerColorVariant.default, focusTrap } = _a, props = __rest(_a, ["className", "id", "children", "hasNoBorder", "isResizable", "onResize", "minSize", "defaultSize", "maxSize", "increment", "resizeAriaLabel", "widths", "colorVariant", "focusTrap"]);
  const panel = (0, import_react35.useRef)(void 0);
  const splitterRef = (0, import_react35.useRef)(void 0);
  const [separatorValue, setSeparatorValue] = (0, import_react35.useState)(0);
  const { position, isExpanded, isStatic, onExpand, drawerRef, drawerContentRef, isInline } = (0, import_react35.useContext)(DrawerContext);
  const hidden = isStatic ? false : !isExpanded;
  const [isExpandedInternal, setIsExpandedInternal] = (0, import_react35.useState)(!hidden);
  const [isFocusTrapActive, setIsFocusTrapActive] = (0, import_react35.useState)(false);
  const previouslyFocusedElement = (0, import_react35.useRef)(null);
  let currWidth = 0;
  let panelRect;
  let end;
  let start;
  let bottom;
  let setInitialVals = true;
  if (isStatic && (focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.enabled)) {
    console.warn(`DrawerPanelContent: The focusTrap.enabled prop cannot be true if the Drawer's isStatic prop is true. This will cause a permanent focus trap.`);
  }
  (0, import_react35.useEffect)(() => {
    if (!isStatic && isExpanded) {
      setIsExpandedInternal(isExpanded);
    }
  }, [isStatic, isExpanded]);
  const calcValueNow = () => {
    let splitterPos;
    let drawerSize;
    const isRTL = getLanguageDirection(panel.current) === "rtl";
    if (isInline && (position === "end" || position === "right")) {
      if (isRTL) {
        splitterPos = panel.current.getBoundingClientRect().left - splitterRef.current.getBoundingClientRect().right;
        drawerSize = drawerRef.current.getBoundingClientRect().left - drawerRef.current.getBoundingClientRect().right;
      } else {
        splitterPos = panel.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;
        drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;
      }
    } else if (isInline && (position === "start" || position === "left")) {
      if (isRTL) {
        splitterPos = splitterRef.current.getBoundingClientRect().left - panel.current.getBoundingClientRect().right;
        drawerSize = drawerRef.current.getBoundingClientRect().left - drawerRef.current.getBoundingClientRect().right;
      } else {
        splitterPos = splitterRef.current.getBoundingClientRect().right - panel.current.getBoundingClientRect().left;
        drawerSize = drawerRef.current.getBoundingClientRect().right - drawerRef.current.getBoundingClientRect().left;
      }
    } else if (position === "end" || position === "right") {
      if (isRTL) {
        splitterPos = drawerContentRef.current.getBoundingClientRect().left - splitterRef.current.getBoundingClientRect().right;
        drawerSize = drawerContentRef.current.getBoundingClientRect().left - drawerContentRef.current.getBoundingClientRect().right;
      } else {
        splitterPos = drawerContentRef.current.getBoundingClientRect().right - splitterRef.current.getBoundingClientRect().left;
        drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;
      }
    } else if (position === "start" || position === "left") {
      if (isRTL) {
        splitterPos = splitterRef.current.getBoundingClientRect().left - drawerContentRef.current.getBoundingClientRect().right;
        drawerSize = drawerContentRef.current.getBoundingClientRect().left - drawerContentRef.current.getBoundingClientRect().right;
      } else {
        splitterPos = splitterRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;
        drawerSize = drawerContentRef.current.getBoundingClientRect().right - drawerContentRef.current.getBoundingClientRect().left;
      }
    } else if (position === "bottom") {
      splitterPos = drawerContentRef.current.getBoundingClientRect().bottom - splitterRef.current.getBoundingClientRect().top;
      drawerSize = drawerContentRef.current.getBoundingClientRect().bottom - drawerContentRef.current.getBoundingClientRect().top;
    }
    const newSplitterPos = splitterPos / drawerSize * 100;
    return Math.round((newSplitterPos + Number.EPSILON) * 100) / 100;
  };
  const handleTouchStart = (e) => {
    e.stopPropagation();
    document.addEventListener("touchmove", callbackTouchMove, { passive: false });
    document.addEventListener("touchend", callbackTouchEnd);
    isResizing = true;
  };
  const handleMousedown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    document.addEventListener("mousemove", callbackMouseMove);
    document.addEventListener("mouseup", callbackMouseUp);
    drawerRef.current.classList.add(css(drawer_default.modifiers.resizing));
    isResizing = true;
    setInitialVals = true;
  };
  const handleMouseMove = (e) => {
    const mousePos = position === "bottom" ? e.clientY : e.clientX;
    handleControlMove(e, mousePos);
  };
  const handleTouchMove = (e) => {
    e.preventDefault();
    e.stopImmediatePropagation();
    const touchPos = position === "bottom" ? e.touches[0].clientY : e.touches[0].clientX;
    handleControlMove(e, touchPos);
  };
  const handleControlMove = (e, controlPosition) => {
    const isRTL = getLanguageDirection(panel.current) === "rtl";
    e.stopPropagation();
    if (!isResizing) {
      return;
    }
    if (setInitialVals) {
      panelRect = panel.current.getBoundingClientRect();
      if (isRTL) {
        start = panelRect.right;
        end = panelRect.left;
      } else {
        end = panelRect.right;
        start = panelRect.left;
      }
      bottom = panelRect.bottom;
      setInitialVals = false;
    }
    const mousePos = controlPosition;
    let newSize2 = 0;
    if (position === "end" || position === "right") {
      newSize2 = isRTL ? mousePos - end : end - mousePos;
    } else if (position === "start" || position === "left") {
      newSize2 = isRTL ? start - mousePos : mousePos - start;
    } else {
      newSize2 = bottom - mousePos;
    }
    if (position === "bottom") {
      panel.current.style.overflowAnchor = "none";
    }
    panel.current.style.setProperty(c_drawer_panel_md_FlexBasis_default.name, newSize2 + "px");
    currWidth = newSize2;
    setSeparatorValue(calcValueNow());
  };
  const handleMouseup = (e) => {
    if (!isResizing) {
      return;
    }
    drawerRef.current.classList.remove(css(drawer_default.modifiers.resizing));
    isResizing = false;
    onResize && onResize(e, currWidth, id);
    setInitialVals = true;
    document.removeEventListener("mousemove", callbackMouseMove);
    document.removeEventListener("mouseup", callbackMouseUp);
  };
  const handleTouchEnd = (e) => {
    e.stopPropagation();
    if (!isResizing) {
      return;
    }
    isResizing = false;
    onResize && onResize(e, currWidth, id);
    document.removeEventListener("touchmove", callbackTouchMove);
    document.removeEventListener("touchend", callbackTouchEnd);
  };
  const callbackMouseMove = (0, import_react35.useCallback)(handleMouseMove, []);
  const callbackTouchEnd = (0, import_react35.useCallback)(handleTouchEnd, []);
  const callbackTouchMove = (0, import_react35.useCallback)(handleTouchMove, []);
  const callbackMouseUp = (0, import_react35.useCallback)(handleMouseup, []);
  const handleKeys = (e) => {
    const isRTL = getLanguageDirection(panel.current) === "rtl";
    const key = e.key;
    if (key !== "Escape" && key !== "Enter" && key !== "ArrowUp" && key !== "ArrowDown" && key !== "ArrowLeft" && key !== "ArrowRight") {
      if (isResizing) {
        e.preventDefault();
      }
      return;
    }
    e.preventDefault();
    if (key === "Escape" || key === "Enter") {
      onResize && onResize(e, currWidth, id);
    }
    const panelRect2 = panel.current.getBoundingClientRect();
    newSize = position === "bottom" ? panelRect2.height : panelRect2.width;
    let delta = 0;
    if (key === "ArrowRight") {
      if (isRTL) {
        delta = position === "left" || position === "start" ? -increment : increment;
      } else {
        delta = position === "left" || position === "start" ? increment : -increment;
      }
    } else if (key === "ArrowLeft") {
      if (isRTL) {
        delta = position === "left" || position === "start" ? increment : -increment;
      } else {
        delta = position === "left" || position === "start" ? -increment : increment;
      }
    } else if (key === "ArrowUp") {
      delta = increment;
    } else if (key === "ArrowDown") {
      delta = -increment;
    }
    newSize = newSize + delta;
    if (position === "bottom") {
      panel.current.style.overflowAnchor = "none";
    }
    panel.current.style.setProperty(c_drawer_panel_md_FlexBasis_default.name, newSize + "px");
    currWidth = newSize;
    setSeparatorValue(calcValueNow());
  };
  const boundaryCssVars = {};
  if (defaultSize) {
    boundaryCssVars[c_drawer_panel_md_FlexBasis_default.name] = defaultSize;
  }
  if (minSize) {
    boundaryCssVars[c_drawer_panel_md_FlexBasis_min_default.name] = minSize;
  }
  if (maxSize) {
    boundaryCssVars[c_drawer_panel_md_FlexBasis_max_default.name] = maxSize;
  }
  const isValidFocusTrap = (focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.enabled) && !isStatic;
  const Component32 = isValidFocusTrap ? FocusTrap : "div";
  return (0, import_jsx_runtime92.jsx)(GenerateId, { prefix: "pf-drawer-panel-", children: (panelId) => {
    const focusTrapProps = {
      tabIndex: -1,
      "aria-modal": true,
      role: "dialog",
      active: isFocusTrapActive,
      "aria-labelledby": (focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap["aria-labelledby"]) || id || panelId,
      focusTrapOptions: {
        fallbackFocus: () => panel.current,
        onActivate: () => {
          if (previouslyFocusedElement.current !== document.activeElement) {
            previouslyFocusedElement.current = document.activeElement;
          }
        },
        onDeactivate: () => {
          previouslyFocusedElement.current && previouslyFocusedElement.current.focus && previouslyFocusedElement.current.focus();
        },
        clickOutsideDeactivates: true,
        returnFocusOnDeactivate: false,
        // FocusTrap's initialFocus can accept false as a value to prevent initial focus.
        // We want to prevent this in case false is ever passed in.
        initialFocus: (focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.elementToFocusOnExpand) || void 0,
        escapeDeactivates: false
      }
    };
    return (0, import_jsx_runtime92.jsx)(Component32, Object.assign({}, isValidFocusTrap && focusTrapProps, { id: id || panelId, className: css(drawer_default.drawerPanel, isResizable && drawer_default.modifiers.resizable, hasNoBorder && drawer_default.modifiers.noBorder, formatBreakpointMods(widths, drawer_default), colorVariant === DrawerColorVariant.noBackground && drawer_default.modifiers.noBackground, colorVariant === DrawerColorVariant.secondary && drawer_default.modifiers.secondary, className), onTransitionEnd: (ev) => {
      if (ev.target === panel.current) {
        if (!hidden && ev.nativeEvent.propertyName === "transform") {
          onExpand(ev);
        }
        setIsExpandedInternal(!hidden);
        if (isValidFocusTrap && ev.nativeEvent.propertyName === "transform") {
          setIsFocusTrapActive((prevIsFocusTrapActive) => !prevIsFocusTrapActive);
        }
      }
    }, hidden }, (defaultSize || minSize || maxSize) && {
      style: boundaryCssVars
    }, props, { ref: panel, children: isExpandedInternal && (0, import_jsx_runtime92.jsxs)(import_react35.Fragment, { children: [isResizable && (0, import_jsx_runtime92.jsxs)(import_react35.Fragment, { children: [(0, import_jsx_runtime92.jsx)("div", { className: css(drawer_default.drawerSplitter, position !== "bottom" && drawer_default.modifiers.vertical), role: "separator", tabIndex: 0, "aria-orientation": position === "bottom" ? "horizontal" : "vertical", "aria-label": resizeAriaLabel, "aria-valuenow": separatorValue, "aria-valuemin": 0, "aria-valuemax": 100, "aria-controls": id || panelId, onMouseDown: handleMousedown, onKeyDown: handleKeys, onTouchStart: handleTouchStart, ref: splitterRef, children: (0, import_jsx_runtime92.jsx)("div", { className: css(drawer_default.drawerSplitterHandle), "aria-hidden": true }) }), (0, import_jsx_runtime92.jsx)("div", { className: css(drawer_default.drawerPanelMain), children })] }), !isResizable && children] }) }));
  } });
};
DrawerPanelContent.displayName = "DrawerPanelContent";

// node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerSection.js
var import_jsx_runtime93 = __toESM(require_jsx_runtime());
var DrawerSection = (_a) => {
  var { className = "", children, colorVariant = DrawerColorVariant.default } = _a, props = __rest(_a, ["className", "children", "colorVariant"]);
  return (0, import_jsx_runtime93.jsx)("div", Object.assign({ className: css(drawer_default.drawerSection, colorVariant === DrawerColorVariant.noBackground && drawer_default.modifiers.noBackground, colorVariant === DrawerColorVariant.secondary && drawer_default.modifiers.secondary, className) }, props, { children }));
};
DrawerSection.displayName = "DrawerSection";

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelector.js
var import_jsx_runtime94 = __toESM(require_jsx_runtime());
var import_react37 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/DualListSelector/dual-list-selector.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/DualListSelector/dual-list-selector.css";
var dual_list_selector_default = {
  "badge": "pf-v6-c-badge",
  "button": "pf-v6-c-button",
  "dirRtl": "pf-v6-m-dir-rtl",
  "dualListSelector": "pf-v6-c-dual-list-selector",
  "dualListSelectorControls": "pf-v6-c-dual-list-selector__controls",
  "dualListSelectorControlsItem": "pf-v6-c-dual-list-selector__controls-item",
  "dualListSelectorDraggable": "pf-v6-c-dual-list-selector__draggable",
  "dualListSelectorHeader": "pf-v6-c-dual-list-selector__header",
  "dualListSelectorItem": "pf-v6-c-dual-list-selector__item",
  "dualListSelectorItemCheck": "pf-v6-c-dual-list-selector__item-check",
  "dualListSelectorItemCount": "pf-v6-c-dual-list-selector__item-count",
  "dualListSelectorItemMain": "pf-v6-c-dual-list-selector__item-main",
  "dualListSelectorItemText": "pf-v6-c-dual-list-selector__item-text",
  "dualListSelectorItemToggle": "pf-v6-c-dual-list-selector__item-toggle",
  "dualListSelectorItemToggleIcon": "pf-v6-c-dual-list-selector__item-toggle-icon",
  "dualListSelectorList": "pf-v6-c-dual-list-selector__list",
  "dualListSelectorListItem": "pf-v6-c-dual-list-selector__list-item",
  "dualListSelectorListItemRow": "pf-v6-c-dual-list-selector__list-item-row",
  "dualListSelectorMain": "pf-v6-c-dual-list-selector__main",
  "dualListSelectorMenu": "pf-v6-c-dual-list-selector__menu",
  "dualListSelectorPane": "pf-v6-c-dual-list-selector__pane",
  "dualListSelectorStatus": "pf-v6-c-dual-list-selector__status",
  "dualListSelectorStatusText": "pf-v6-c-dual-list-selector__status-text",
  "dualListSelectorTitleText": "pf-v6-c-dual-list-selector__title-text",
  "dualListSelectorTools": "pf-v6-c-dual-list-selector__tools",
  "dualListSelectorToolsActions": "pf-v6-c-dual-list-selector__tools-actions",
  "dualListSelectorToolsFilter": "pf-v6-c-dual-list-selector__tools-filter",
  "modifiers": {
    "chosen": "pf-m-chosen",
    "dragOver": "pf-m-drag-over",
    "expandable": "pf-m-expandable",
    "animateExpand": "pf-m-animate-expand",
    "expanded": "pf-m-expanded",
    "disabled": "pf-m-disabled",
    "selected": "pf-m-selected",
    "check": "pf-m-check",
    "ghostRow": "pf-m-ghost-row",
    "read": "pf-m-read"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorContext.js
var import_react36 = __toESM(require_react());
var DualListSelectorContext = (0, import_react36.createContext)({ isTree: false, hasAnimations: false });
var DualListSelectorListContext = (0, import_react36.createContext)({});
var DualListSelectorPaneContext = (0, import_react36.createContext)({ isChosen: false });

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelector.js
var DualListSelector = class extends import_react37.Component {
  constructor(props) {
    super(props);
  }
  render() {
    const _a = this.props, { className, children, id, isTree, hasAnimations } = _a, props = __rest(_a, ["className", "children", "id", "isTree", "hasAnimations"]);
    return (0, import_jsx_runtime94.jsx)(DualListSelectorContext.Provider, { value: { isTree, hasAnimations }, children: (0, import_jsx_runtime94.jsx)(GenerateId, { children: (randomId) => (0, import_jsx_runtime94.jsx)("div", Object.assign({ className: css(dual_list_selector_default.dualListSelector, hasAnimations && isTree && dual_list_selector_default.modifiers.animateExpand, className), id: id || randomId }, props, { children })) }) });
  }
};
DualListSelector.displayName = "DualListSelector";
DualListSelector.defaultProps = {
  children: "",
  isTree: false,
  hasAnimations: false
};

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorControl.js
var import_jsx_runtime95 = __toESM(require_jsx_runtime());
var import_react38 = __toESM(require_react());
var DualListSelectorControlBase = (_a) => {
  var { innerRef, children, icon, className, "aria-label": ariaLabel, isDisabled = true, onClick = () => {
  }, tooltipContent, tooltipProps = {} } = _a, props = __rest(_a, ["innerRef", "children", "icon", "className", "aria-label", "isDisabled", "onClick", "tooltipContent", "tooltipProps"]);
  const privateRef = (0, import_react38.useRef)(null);
  const ref = innerRef || privateRef;
  return (0, import_jsx_runtime95.jsxs)("div", Object.assign({ className: css(dual_list_selector_default.dualListSelectorControlsItem, className) }, props, { children: [(0, import_jsx_runtime95.jsx)(Button, { isDisabled, "aria-disabled": isDisabled, variant: ButtonVariant.plain, onClick, "aria-label": ariaLabel, tabIndex: -1, ref, icon, children }), tooltipContent && (0, import_jsx_runtime95.jsx)(Tooltip, Object.assign({ content: tooltipContent, position: "left", triggerRef: ref }, tooltipProps))] }));
};
DualListSelectorControlBase.displayName = "DualListSelectorControlBase";
var DualListSelectorControl = (0, import_react38.forwardRef)((props, ref) => (0, import_jsx_runtime95.jsx)(DualListSelectorControlBase, Object.assign({ innerRef: ref }, props)));
DualListSelectorControl.displayName = "DualListSelectorControl";

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorControlsWrapper.js
var import_jsx_runtime96 = __toESM(require_jsx_runtime());
var import_react39 = __toESM(require_react());
var DualListSelectorControlsWrapperBase = (_a) => {
  var { innerRef, children = null, className, "aria-label": ariaLabel = "Controls for moving options between lists" } = _a, props = __rest(_a, ["innerRef", "children", "className", "aria-label"]);
  const ref = (0, import_react39.useRef)(null);
  const wrapperRef = innerRef || ref;
  const handleKeys = (event) => {
    if (!wrapperRef.current || wrapperRef.current !== event.target.closest(`.${dual_list_selector_default.dualListSelectorControls}`) && !Array.from(wrapperRef.current.getElementsByClassName(dual_list_selector_default.dualListSelectorControls)).includes(event.target.closest(`.${dual_list_selector_default.dualListSelectorControls}`))) {
      return;
    }
    event.stopImmediatePropagation();
    const controls = Array.from(wrapperRef.current.getElementsByTagName("BUTTON")).filter((el) => !el.classList.contains("pf-m-disabled"));
    const activeElement = document.activeElement;
    handleArrows(event, controls, (element) => activeElement.contains(element), (element) => element, void 0, void 0, true, false);
  };
  (0, import_react39.useEffect)(() => {
    window.addEventListener("keydown", handleKeys);
    return () => {
      window.removeEventListener("keydown", handleKeys);
    };
  }, [wrapperRef.current]);
  return (0, import_jsx_runtime96.jsx)("div", Object.assign({ className: css(dual_list_selector_default.dualListSelectorControls, className), tabIndex: 0, ref: wrapperRef, "aria-label": ariaLabel }, props, { children }));
};
DualListSelectorControlsWrapperBase.displayName = "DualListSelectorControlsWrapperBase";
var DualListSelectorControlsWrapper = (0, import_react39.forwardRef)((props, ref) => (0, import_jsx_runtime96.jsx)(DualListSelectorControlsWrapperBase, Object.assign({ innerRef: ref, role: "group" }, props)));
DualListSelectorControlsWrapper.displayName = "DualListSelectorControlsWrapper";

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorPane.js
var import_jsx_runtime125 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorListWrapper.js
var import_jsx_runtime99 = __toESM(require_jsx_runtime());
var import_react42 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorList.js
var import_jsx_runtime98 = __toESM(require_jsx_runtime());
var import_react41 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorListItem.js
var import_jsx_runtime97 = __toESM(require_jsx_runtime());
var import_react40 = __toESM(require_react());
var DualListSelectorListItemBase = (_a) => {
  var {
    onOptionSelect,
    orderIndex,
    children,
    className,
    id = getUniqueId("dual-list-selector-list-item"),
    isSelected,
    innerRef,
    isDraggable = false,
    isDisabled,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    draggableButtonAriaLabel = "Reorder option"
  } = _a, props = __rest(_a, ["onOptionSelect", "orderIndex", "children", "className", "id", "isSelected", "innerRef", "isDraggable", "isDisabled", "draggableButtonAriaLabel"]);
  const privateRef = (0, import_react40.useRef)(null);
  const ref = innerRef || privateRef;
  const { setFocusedOption } = (0, import_react40.useContext)(DualListSelectorListContext);
  return (0, import_jsx_runtime97.jsx)("li", Object.assign({ className: css(dual_list_selector_default.dualListSelectorListItem, className, isDisabled && dual_list_selector_default.modifiers.disabled), onClick: isDisabled ? void 0 : (e) => {
    setFocusedOption(id);
    onOptionSelect(e, id);
  }, onKeyDown: (e) => {
    if (e.key === " " || e.key === "Enter") {
      document.activeElement.click();
      e.preventDefault();
    }
  }, "aria-selected": isSelected, id, ref, role: "option", tabIndex: -1 }, props, { children: (0, import_jsx_runtime97.jsxs)("div", { className: css(dual_list_selector_default.dualListSelectorListItemRow, isSelected && dual_list_selector_default.modifiers.selected), children: [isDraggable && !isDisabled && (0, import_jsx_runtime97.jsx)("div", { className: css(dual_list_selector_default.dualListSelectorDraggable), children: (0, import_jsx_runtime97.jsx)(Button, { variant: ButtonVariant.plain, component: "span", icon: (0, import_jsx_runtime97.jsx)(grip_vertical_icon_default, { style: { verticalAlign: "-0.3em" } }) }) }), (0, import_jsx_runtime97.jsx)("span", { className: css(dual_list_selector_default.dualListSelectorItem), children: (0, import_jsx_runtime97.jsx)("span", { className: css(dual_list_selector_default.dualListSelectorItemMain), children: (0, import_jsx_runtime97.jsx)("span", { className: css(dual_list_selector_default.dualListSelectorItemText), children }) }) })] }) }), orderIndex);
};
DualListSelectorListItemBase.displayName = "DualListSelectorListItemBase";
var DualListSelectorListItem = (0, import_react40.forwardRef)((props, ref) => (0, import_jsx_runtime97.jsx)(DualListSelectorListItemBase, Object.assign({ innerRef: ref }, props)));
DualListSelectorListItem.displayName = "DualListSelectorListItem";

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorList.js
var DualListSelectorListBase = (_a) => {
  var { children, innerRef } = _a, props = __rest(_a, ["children", "innerRef"]);
  const { isTree, ariaLabelledBy, focusedOption, displayOption, selectedOptions, id, options, isDisabled } = (0, import_react41.useContext)(DualListSelectorListContext);
  const hasOptions = () => options.length !== 0 || children !== void 0 && children.length !== 0;
  return (0, import_jsx_runtime98.jsx)("ul", Object.assign({ className: css(dual_list_selector_default.dualListSelectorList) }, hasOptions() && {
    role: isTree ? "tree" : "listbox",
    "aria-multiselectable": true,
    "aria-labelledby": ariaLabelledBy,
    "aria-activedescendant": focusedOption
  }, { "aria-disabled": isDisabled ? "true" : void 0, ref: innerRef }, props, { children: options.length === 0 ? children : options.map((option, index) => {
    if (displayOption(option)) {
      return (0, import_jsx_runtime98.jsx)(DualListSelectorListItem, { isSelected: selectedOptions.indexOf(index) !== -1, id: `${id}-option-${index}`, orderIndex: index, isDisabled, children: option }, index);
    }
    return;
  }) }));
};
DualListSelectorListBase.displayName = "DualListSelectorListBase";
var DualListSelectorList = (0, import_react41.forwardRef)((props, ref) => (0, import_jsx_runtime98.jsx)(DualListSelectorListBase, Object.assign({ innerRef: ref }, props)));
DualListSelectorList.displayName = "DualListSelectorList";

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorListWrapper.js
var DualListSelectorListWrapperBase = (_a) => {
  var { className, children, "aria-labelledby": ariaLabelledBy, innerRef, options = [], selectedOptions = [], displayOption, id = getUniqueId("dual-list-selector-list"), isDisabled = false } = _a, props = __rest(_a, ["className", "children", "aria-labelledby", "innerRef", "options", "selectedOptions", "displayOption", "id", "isDisabled"]);
  const [focusedOption, setFocusedOption] = (0, import_react42.useState)("");
  const ref = (0, import_react42.useRef)(null);
  const menuRef = innerRef || ref;
  const { isTree } = (0, import_react42.useContext)(DualListSelectorContext);
  const handleKeys = (event) => {
    if (!menuRef.current || menuRef.current !== event.target.closest(`.${dual_list_selector_default.dualListSelectorMenu}`) && !Array.from(menuRef.current.getElementsByClassName(dual_list_selector_default.dualListSelectorMenu)).includes(event.target.closest(`.${dual_list_selector_default.dualListSelectorMenu}`))) {
      return;
    }
    event.stopImmediatePropagation();
    const validOptions = isTree ? Array.from(menuRef.current.querySelectorAll(`.${dual_list_selector_default.dualListSelectorItemToggle}, .${dual_list_selector_default.dualListSelectorItemCheck} > input`)).filter((item) => !item.closest(`.${dual_list_selector_default.dualListSelectorList}[inert]`)) : Array.from(menuRef.current.getElementsByTagName("LI")).filter((el) => !el.classList.contains("pf-m-disabled"));
    const activeElement = document.activeElement;
    handleArrows(event, validOptions, (element) => activeElement.contains(element), (element) => {
      if (element.classList.contains(`.${dual_list_selector_default.dualListSelectorListItem}`)) {
        setFocusedOption(element.id);
      } else {
        setFocusedOption(element.closest(`.${dual_list_selector_default.dualListSelectorListItem}`).id);
      }
      return element;
    }, [`.${dual_list_selector_default.dualListSelectorItemToggle}`, `.${dual_list_selector_default.dualListSelectorItemCheck} > input`], void 0, false, false, false);
  };
  (0, import_react42.useEffect)(() => {
    window.addEventListener("keydown", handleKeys);
    return () => {
      window.removeEventListener("keydown", handleKeys);
    };
  }, [menuRef.current]);
  return (0, import_jsx_runtime99.jsx)("div", Object.assign({ className: css(dual_list_selector_default.dualListSelectorMenu, className), ref: menuRef, tabIndex: 0 }, props, { children: (0, import_jsx_runtime99.jsx)(DualListSelectorListContext.Provider, { value: {
    setFocusedOption,
    isTree,
    focusedOption,
    ariaLabelledBy,
    displayOption,
    selectedOptions,
    id,
    options,
    isDisabled
  }, children: children ? children : (0, import_jsx_runtime99.jsx)(DualListSelectorList, {}) }) }));
};
DualListSelectorListWrapperBase.displayName = "DualListSelectorListWrapperBase";
var DualListSelectorListWrapper = (0, import_react42.forwardRef)((props, ref) => (0, import_jsx_runtime99.jsx)(DualListSelectorListWrapperBase, Object.assign({ innerRef: ref }, props)));
DualListSelectorListWrapper.displayName = "DualListSelectorListWrapper";

// node_modules/@patternfly/react-core/dist/esm/components/SearchInput/SearchInput.js
var import_jsx_runtime124 = __toESM(require_jsx_runtime());
var import_react52 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Icon/Icon.js
var import_jsx_runtime100 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/Icon/icon.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Icon/icon.css";
var icon_default = {
  "icon": "pf-v6-c-icon",
  "iconContent": "pf-v6-c-icon__content",
  "iconProgress": "pf-v6-c-icon__progress",
  "modifiers": {
    "inline": "pf-m-inline",
    "sm": "pf-m-sm",
    "md": "pf-m-md",
    "lg": "pf-m-lg",
    "xl": "pf-m-xl",
    "2xl": "pf-m-2xl",
    "3xl": "pf-m-3xl",
    "bodySm": "pf-m-body-sm",
    "bodyDefault": "pf-m-body-default",
    "bodyLg": "pf-m-body-lg",
    "headingSm": "pf-m-heading-sm",
    "headingMd": "pf-m-heading-md",
    "headingLg": "pf-m-heading-lg",
    "headingXl": "pf-m-heading-xl",
    "heading_2xl": "pf-m-heading-2xl",
    "heading_3xl": "pf-m-heading-3xl",
    "inProgress": "pf-m-in-progress",
    "danger": "pf-m-danger",
    "warning": "pf-m-warning",
    "success": "pf-m-success",
    "info": "pf-m-info",
    "custom": "pf-m-custom"
  },
  "spinner": "pf-v6-c-spinner"
};

// node_modules/@patternfly/react-core/dist/esm/components/Icon/Icon.js
var Icon = (_a) => {
  var { children, className, progressIcon, size, iconSize, progressIconSize, status, isInline = false, isInProgress = false, defaultProgressArialabel = "Loading...", shouldMirrorRTL = false } = _a, props = __rest(_a, ["children", "className", "progressIcon", "size", "iconSize", "progressIconSize", "status", "isInline", "isInProgress", "defaultProgressArialabel", "shouldMirrorRTL"]);
  const _progressIcon = progressIcon !== null && progressIcon !== void 0 ? progressIcon : (0, import_jsx_runtime100.jsx)(Spinner, { diameter: "1em", "aria-label": defaultProgressArialabel });
  return (0, import_jsx_runtime100.jsxs)("span", Object.assign({ className: css(icon_default.icon, isInline && icon_default.modifiers.inline, isInProgress && icon_default.modifiers.inProgress, icon_default.modifiers[size], className) }, props, { children: [(0, import_jsx_runtime100.jsx)("span", { className: css(icon_default.iconContent, icon_default.modifiers[iconSize], icon_default.modifiers[status], shouldMirrorRTL && "pf-v6-m-mirror-inline-rtl"), children }), isInProgress && (0, import_jsx_runtime100.jsx)("span", { className: css(icon_default.iconProgress, icon_default.modifiers[progressIconSize], className), children: _progressIcon })] }));
};
Icon.displayName = "Icon";

// node_modules/@patternfly/react-core/dist/esm/components/SearchInput/AdvancedSearchMenu.js
var import_jsx_runtime119 = __toESM(require_jsx_runtime());
var import_react49 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Form/ActionGroup.js
var import_jsx_runtime101 = __toESM(require_jsx_runtime());
var ActionGroup = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  const customClassName = css(form_default.formGroup, form_default.modifiers.action, className);
  const formActionsComponent = (0, import_jsx_runtime101.jsx)("div", { className: css(form_default.formActions), children });
  return (0, import_jsx_runtime101.jsx)("div", Object.assign({}, props, { className: customClassName, children: (0, import_jsx_runtime101.jsx)("div", { className: css(form_default.formGroupControl), children: formActionsComponent }) }));
};
ActionGroup.displayName = "ActionGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Form/Form.js
var import_jsx_runtime102 = __toESM(require_jsx_runtime());
var import_react43 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/c_form_m_limit_width_MaxWidth.js
var c_form_m_limit_width_MaxWidth = {
  "name": "--pf-v6-c-form--m-limit-width--MaxWidth",
  "value": "55rem",
  "var": "var(--pf-v6-c-form--m-limit-width--MaxWidth)"
};
var c_form_m_limit_width_MaxWidth_default = c_form_m_limit_width_MaxWidth;

// node_modules/@patternfly/react-core/dist/esm/components/Form/Form.js
var FormBase = (_a) => {
  var { children = null, className = "", isHorizontal = false, isWidthLimited = false, maxWidth = "", innerRef } = _a, props = __rest(_a, ["children", "className", "isHorizontal", "isWidthLimited", "maxWidth", "innerRef"]);
  return (0, import_jsx_runtime102.jsx)("form", Object.assign({ noValidate: true }, maxWidth && {
    style: Object.assign({ [c_form_m_limit_width_MaxWidth_default.name]: maxWidth }, props.style)
  }, props, { className: css(form_default.form, isHorizontal && form_default.modifiers.horizontal, (isWidthLimited || maxWidth) && form_default.modifiers.limitWidth, className), ref: innerRef, children }));
};
var Form = (0, import_react43.forwardRef)((props, ref) => (0, import_jsx_runtime102.jsx)(FormBase, Object.assign({ innerRef: ref }, props)));
Form.displayName = "Form";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormAlert.js
var import_jsx_runtime103 = __toESM(require_jsx_runtime());
var FormAlert = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return (
    // There are currently no associated styles with the pf-v6-c-form_alert class.
    // Therefore, it does not exist in react-styles
    (0, import_jsx_runtime103.jsx)("div", Object.assign({}, props, { className: css(`${form_default.form}__alert`, className), children }))
  );
};
FormAlert.displayName = "FormAlert";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroup.js
var import_jsx_runtime106 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-core/dist/esm/components/Form/InternalFormFieldGroup.js
var import_jsx_runtime105 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroupToggle.js
var import_jsx_runtime104 = __toESM(require_jsx_runtime());
var FormFieldGroupToggle = (_a) => {
  var { className, onToggle, isExpanded, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, toggleId } = _a, props = __rest(_a, ["className", "onToggle", "isExpanded", "aria-label", "aria-labelledby", "toggleId"]);
  return (0, import_jsx_runtime104.jsx)("div", Object.assign({ className: css(form_default.formFieldGroupToggle, className) }, props, { children: (0, import_jsx_runtime104.jsx)("div", { className: css(form_default.formFieldGroupToggleButton), children: (0, import_jsx_runtime104.jsx)(Button, { variant: "plain", "aria-label": ariaLabel, onClick: onToggle, "aria-expanded": isExpanded, "aria-labelledby": ariaLabelledby, id: toggleId, icon: (0, import_jsx_runtime104.jsx)("span", { className: css(form_default.formFieldGroupToggleIcon), children: (0, import_jsx_runtime104.jsx)(angle_right_icon_default, {}) }) }) }) }));
};
FormFieldGroupToggle.displayName = "FormFieldGroupToggle";

// node_modules/@patternfly/react-core/dist/esm/components/Form/InternalFormFieldGroup.js
var InternalFormFieldGroup = (_a) => {
  var { children, className, header, isExpandable, isExpanded, onToggle, toggleAriaLabel, hasAnimations } = _a, props = __rest(_a, ["children", "className", "header", "isExpandable", "isExpanded", "onToggle", "toggleAriaLabel", "hasAnimations"]);
  const headerTitleText = header ? header.props.titleText : null;
  if (isExpandable && !toggleAriaLabel && !headerTitleText) {
    console.error("FormFieldGroupExpandable:", "toggleAriaLabel or the titleText prop of FormFieldGroupHeader is required to make the toggle button accessible");
  }
  return (0, import_jsx_runtime105.jsxs)("div", Object.assign({ className: css(form_default.formFieldGroup, isExpanded && isExpandable && form_default.modifiers.expanded, hasAnimations && isExpandable && form_default.modifiers.expandable, className), role: "group" }, headerTitleText && { "aria-labelledby": `${header.props.titleText.id}` }, props, { children: [isExpandable && (0, import_jsx_runtime105.jsx)(GenerateId, { prefix: "form-field-group-toggle", children: (id) => (0, import_jsx_runtime105.jsx)(FormFieldGroupToggle, Object.assign({ onToggle, isExpanded, "aria-label": toggleAriaLabel, toggleId: id }, headerTitleText && { "aria-labelledby": `${header.props.titleText.id} ${id}` })) }), header && header, (!isExpandable || isExpandable && isExpanded || hasAnimations && isExpandable) && (0, import_jsx_runtime105.jsx)("div", Object.assign({ className: css(form_default.formFieldGroupBody) }, hasAnimations && isExpandable && !isExpanded && { inert: "" }, { children }))] }));
};
InternalFormFieldGroup.displayName = "InternalFormFieldGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroup.js
var FormFieldGroup = (_a) => {
  var { children, className, header } = _a, props = __rest(_a, ["children", "className", "header"]);
  return (0, import_jsx_runtime106.jsx)(InternalFormFieldGroup, Object.assign({ className, header }, props, { children }));
};
FormFieldGroup.displayName = "FormFieldGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroupExpandable.js
var import_jsx_runtime107 = __toESM(require_jsx_runtime());
var import_react44 = __toESM(require_react());
var FormFieldGroupExpandable = (_a) => {
  var { children, className, header, isExpanded = false, toggleAriaLabel, hasAnimations } = _a, props = __rest(_a, ["children", "className", "header", "isExpanded", "toggleAriaLabel", "hasAnimations"]);
  const [localIsExpanded, setIsExpanded] = (0, import_react44.useState)(isExpanded);
  return (0, import_jsx_runtime107.jsx)(InternalFormFieldGroup, Object.assign({ className, header, isExpandable: true, isExpanded: localIsExpanded, toggleAriaLabel, onToggle: () => setIsExpanded(!localIsExpanded), hasAnimations }, props, { children }));
};
FormFieldGroupExpandable.displayName = "FormFieldGroupExpandable";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormFieldGroupHeader.js
var import_jsx_runtime108 = __toESM(require_jsx_runtime());
var FormFieldGroupHeader = (_a) => {
  var { className, titleText, titleDescription, actions } = _a, props = __rest(_a, ["className", "titleText", "titleDescription", "actions"]);
  return (0, import_jsx_runtime108.jsxs)("div", Object.assign({ className: css(form_default.formFieldGroupHeader, className) }, props, { children: [(0, import_jsx_runtime108.jsxs)("div", { className: css(form_default.formFieldGroupHeaderMain), children: [titleText && (0, import_jsx_runtime108.jsx)("div", { className: css(form_default.formFieldGroupHeaderTitle), children: (0, import_jsx_runtime108.jsx)("div", { className: css(form_default.formFieldGroupHeaderTitleText), id: titleText.id, children: titleText.text }) }), titleDescription && (0, import_jsx_runtime108.jsx)("div", { className: css(form_default.formFieldGroupHeaderDescription), children: titleDescription })] }), (0, import_jsx_runtime108.jsx)("div", { className: css(form_default.formFieldGroupHeaderActions), children: actions && actions })] }));
};
FormFieldGroupHeader.displayName = "FormFieldGroupHeader";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormGroup.js
var import_jsx_runtime109 = __toESM(require_jsx_runtime());
var import_react45 = __toESM(require_react());
var FormGroup = (_a) => {
  var { children = null, className = "", label, labelInfo, labelHelp, isRequired = false, isInline = false, hasNoPaddingTop = false, isStack = false, fieldId, role } = _a, props = __rest(_a, ["children", "className", "label", "labelInfo", "labelHelp", "isRequired", "isInline", "hasNoPaddingTop", "isStack", "fieldId", "role"]);
  const isGroupOrRadioGroup = role === "group" || role === "radiogroup";
  const LabelComponent = isGroupOrRadioGroup ? "span" : "label";
  const labelContent = (0, import_jsx_runtime109.jsxs)(import_jsx_runtime109.Fragment, { children: [(0, import_jsx_runtime109.jsxs)(LabelComponent, Object.assign({ className: css(form_default.formLabel) }, !isGroupOrRadioGroup && { htmlFor: fieldId }, { children: [(0, import_jsx_runtime109.jsx)("span", { className: css(form_default.formLabelText), children: label }), isRequired && (0, import_jsx_runtime109.jsxs)("span", { className: css(form_default.formLabelRequired), "aria-hidden": "true", children: [" ", ASTERISK] })] })), (0, import_jsx_runtime109.jsx)(import_jsx_runtime109.Fragment, { children: "  " }), (0, import_react45.isValidElement)(labelHelp) && (0, import_jsx_runtime109.jsx)("span", { className: form_default.formGroupLabelHelp, children: labelHelp })] });
  return (0, import_jsx_runtime109.jsx)(GenerateId, { children: (randomId) => (0, import_jsx_runtime109.jsxs)("div", Object.assign({ className: css(form_default.formGroup, className) }, role && { role }, isGroupOrRadioGroup && { "aria-labelledby": `${fieldId || randomId}-legend` }, props, { children: [label && (0, import_jsx_runtime109.jsxs)("div", Object.assign({ className: css(form_default.formGroupLabel, labelInfo && form_default.modifiers.info, hasNoPaddingTop && form_default.modifiers.noPaddingTop) }, isGroupOrRadioGroup && { id: `${fieldId || randomId}-legend` }, { children: [labelInfo && (0, import_jsx_runtime109.jsxs)(import_react45.Fragment, { children: [(0, import_jsx_runtime109.jsx)("div", { className: css(form_default.formGroupLabelMain), children: labelContent }), (0, import_jsx_runtime109.jsx)("div", { className: css(form_default.formGroupLabelInfo), children: labelInfo })] }), !labelInfo && labelContent] })), (0, import_jsx_runtime109.jsx)("div", { className: css(form_default.formGroupControl, isInline && form_default.modifiers.inline, isStack && form_default.modifiers.stack), children })] })) });
};
FormGroup.displayName = "FormGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormGroupLabelHelp.js
var import_jsx_runtime110 = __toESM(require_jsx_runtime());
var import_react46 = __toESM(require_react());
var FormGroupLabelHelpBase = (_a) => {
  var { "aria-label": ariaLabel, className, innerRef } = _a, props = __rest(_a, ["aria-label", "className", "innerRef"]);
  const ref = (0, import_react46.useRef)(null);
  const buttonRef = innerRef || ref;
  const isMutableRef = (ref2) => typeof ref2 === "object" && ref2 !== null && "current" in ref2 && ref2.current !== void 0;
  const handleKeyDown = (event) => {
    if ([KeyTypes.Space, KeyTypes.Enter].includes(event.key) && isMutableRef(buttonRef) && buttonRef.current) {
      event.preventDefault();
      buttonRef.current.click();
    }
  };
  return (0, import_jsx_runtime110.jsx)(Button, Object.assign({ component: "span", isInline: true, ref: buttonRef, onKeyDown: handleKeyDown, "aria-label": ariaLabel, className, variant: "plain", hasNoPadding: true }, props, { icon: (0, import_jsx_runtime110.jsx)(help_icon_default, {}) }));
};
var FormGroupLabelHelp = (0, import_react46.forwardRef)((props, ref) => (0, import_jsx_runtime110.jsx)(FormGroupLabelHelpBase, Object.assign({ innerRef: ref }, props)));
FormGroupLabelHelp.displayName = "FormGroupLabelHelp";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormHelperText.js
var import_jsx_runtime111 = __toESM(require_jsx_runtime());
var FormHelperText = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime111.jsx)("div", Object.assign({ className: css(form_default.formHelperText, className) }, props, { children }));
};
FormHelperText.displayName = "FormHelperText";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormSection.js
var import_jsx_runtime112 = __toESM(require_jsx_runtime());
var FormSection = (_a) => {
  var { className = "", children, title = "", titleElement: TitleElement = "div" } = _a, props = __rest(_a, ["className", "children", "title", "titleElement"]);
  return (0, import_jsx_runtime112.jsx)(GenerateId, { prefix: "pf-form-section-title", children: (sectionId) => (0, import_jsx_runtime112.jsxs)("section", Object.assign({ className: css(form_default.formSection, className), role: "group" }, title && { "aria-labelledby": sectionId }, props, { children: [title && (0, import_jsx_runtime112.jsx)(TitleElement, { id: sectionId, className: css(form_default.formSectionTitle, className), children: title }), children] })) });
};
FormSection.displayName = "FormSection";

// node_modules/@patternfly/react-core/dist/esm/components/Form/FormContext.js
var import_jsx_runtime113 = __toESM(require_jsx_runtime());
var import_react47 = __toESM(require_react());
var FormContext = (0, import_react47.createContext)({});
var FormContextConsumer = FormContext.Consumer;
var FormContextProvider = ({ initialValues, children }) => {
  var _a;
  const [values, setValues] = (0, import_react47.useState)(initialValues || {});
  const [errors, setErrors] = (0, import_react47.useState)({});
  const [validators, setValidators] = (0, import_react47.useState)({});
  const [touched, setTouched] = (0, import_react47.useState)({});
  const isValid = ((_a = Object.keys(errors)) === null || _a === void 0 ? void 0 : _a.length) === 0;
  const getValue = (fieldId) => Object.entries(values).reduce((acc, [id, value]) => id === fieldId ? value : acc, "");
  const setValue = (fieldId, value, triggerValidation = true) => {
    var _a2;
    if (values[fieldId] !== value) {
      setValues((prevValues) => Object.assign(Object.assign({}, prevValues), { [fieldId]: value }));
      triggerValidation && ((_a2 = validators[fieldId]) === null || _a2 === void 0 ? void 0 : _a2.call(validators, value));
    }
  };
  const getError = (fieldId) => Object.entries(errors).reduce((acc, [id, error]) => id === fieldId ? error : acc, "");
  const setError = (fieldId, error) => errors[fieldId] !== error && setErrors((_a2) => {
    var _b = fieldId, _ = _a2[_b], prevErrors = __rest(_a2, [typeof _b === "symbol" ? _b : _b + ""]);
    return Object.assign(Object.assign({}, prevErrors), !!error && { [fieldId]: error });
  });
  const isTouched = (fieldId) => Object.entries(touched).reduce((acc, [id, isTouched2]) => id === fieldId ? isTouched2 : acc, false);
  const setFieldTouched = (fieldId, isTouched2) => touched[fieldId] !== isTouched2 && setTouched((_a2) => {
    var _b = fieldId, _ = _a2[_b], prevTouched = __rest(_a2, [typeof _b === "symbol" ? _b : _b + ""]);
    return Object.assign(Object.assign({}, prevTouched), isTouched2 && { [fieldId]: isTouched2 });
  });
  const setValidator = (fieldId, validate2) => validators[fieldId] !== validate2 && setValidators((prevValidators) => Object.assign(Object.assign({}, prevValidators), { [fieldId]: validate2 }));
  const validate = () => {
    var _a2;
    return (_a2 = Object.entries(validators)) === null || _a2 === void 0 ? void 0 : _a2.reduce((acc, [id, validateField]) => {
      const fieldError = validateField(values[id]);
      if (fieldError) {
        acc[id] = fieldError;
      }
      return acc;
    }, {});
  };
  return (0, import_jsx_runtime113.jsx)(FormContext.Provider, { value: {
    values,
    errors,
    touched,
    isValid,
    setValues,
    setErrors,
    getValue,
    setValue,
    getError,
    setError,
    validate,
    setValidator,
    isTouched,
    setTouched: setFieldTouched
  }, children: typeof children === "function" ? (0, import_jsx_runtime113.jsx)(FormContext.Consumer, { children: (formContext) => children(formContext) }) : children });
};
FormContextProvider.displayName = "FormContextProvider";
var useFormContext = () => (0, import_react47.useContext)(FormContext);

// node_modules/@patternfly/react-core/dist/esm/components/Panel/Panel.js
var import_jsx_runtime114 = __toESM(require_jsx_runtime());
var import_react48 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Panel/panel.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Panel/panel.css";
var panel_default = {
  "modifiers": {
    "bordered": "pf-m-bordered",
    "secondary": "pf-m-secondary",
    "raised": "pf-m-raised",
    "scrollable": "pf-m-scrollable"
  },
  "panel": "pf-v6-c-panel",
  "panelFooter": "pf-v6-c-panel__footer",
  "panelHeader": "pf-v6-c-panel__header",
  "panelMain": "pf-v6-c-panel__main",
  "panelMainBody": "pf-v6-c-panel__main-body"
};

// node_modules/@patternfly/react-core/dist/esm/components/Panel/Panel.js
var PanelBase = (_a) => {
  var { className, children, variant, isScrollable, innerRef } = _a, props = __rest(_a, ["className", "children", "variant", "isScrollable", "innerRef"]);
  return (0, import_jsx_runtime114.jsx)("div", Object.assign({ className: css(panel_default.panel, variant && panel_default.modifiers[variant], isScrollable && panel_default.modifiers.scrollable, className), ref: innerRef }, props, { children }));
};
var Panel = (0, import_react48.forwardRef)((props, ref) => (0, import_jsx_runtime114.jsx)(PanelBase, Object.assign({ innerRef: ref }, props)));
Panel.displayName = "Panel";

// node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelMain.js
var import_jsx_runtime115 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-tokens/dist/esm/c_panel__main_MaxHeight.js
var c_panel__main_MaxHeight = {
  "name": "--pf-v6-c-panel__main--MaxHeight",
  "value": "18.75rem",
  "var": "var(--pf-v6-c-panel__main--MaxHeight)"
};
var c_panel_main_MaxHeight_default = c_panel__main_MaxHeight;

// node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelMain.js
var PanelMain = (_a) => {
  var { className, children, maxHeight } = _a, props = __rest(_a, ["className", "children", "maxHeight"]);
  return (0, import_jsx_runtime115.jsx)("div", Object.assign({ className: css(panel_default.panelMain, className), style: { [c_panel_main_MaxHeight_default.name]: maxHeight } }, props, { children }));
};
PanelMain.displayName = "PanelMain";

// node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelMainBody.js
var import_jsx_runtime116 = __toESM(require_jsx_runtime());
var PanelMainBody = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return (0, import_jsx_runtime116.jsx)("div", Object.assign({ className: css(panel_default.panelMainBody, className) }, props, { children }));
};
PanelMainBody.displayName = "PanelMainBody";

// node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelHeader.js
var import_jsx_runtime117 = __toESM(require_jsx_runtime());
var PanelHeader = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return (0, import_jsx_runtime117.jsx)("div", Object.assign({ className: css(panel_default.panelHeader, className) }, props, { children }));
};
PanelHeader.displayName = "PanelHeader";

// node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelFooter.js
var import_jsx_runtime118 = __toESM(require_jsx_runtime());
var PanelFooter = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return (0, import_jsx_runtime118.jsx)("div", Object.assign({ className: css(panel_default.panelFooter, className) }, props, { children }));
};
PanelFooter.displayName = "PanelFooter";

// node_modules/@patternfly/react-core/dist/esm/components/SearchInput/AdvancedSearchMenu.js
var AdvancedSearchMenu = ({ className, parentRef, parentInputRef, value = "", attributes = [], formAdditionalItems, hasWordsAttrLabel = "Has words", advancedSearchDelimiter, getAttrValueMap, onChange, onSearch, onClear, resetButtonLabel = "Reset", submitSearchButtonLabel = "Search", isSearchMenuOpen, onToggleAdvancedMenu }) => {
  const firstAttrRef = (0, import_react49.useRef)(null);
  const [putFocusBackOnInput, setPutFocusBackOnInput] = (0, import_react49.useState)(false);
  (0, import_react49.useEffect)(() => {
    if (attributes.length > 0 && !advancedSearchDelimiter) {
      console.error("AdvancedSearchMenu: An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop");
    }
  });
  (0, import_react49.useEffect)(() => {
    if (isSearchMenuOpen && firstAttrRef && firstAttrRef.current) {
      firstAttrRef.current.focus();
      setPutFocusBackOnInput(true);
    } else if (!isSearchMenuOpen && putFocusBackOnInput && parentInputRef && parentInputRef.current) {
      parentInputRef.current.focus();
    }
  }, [isSearchMenuOpen]);
  (0, import_react49.useEffect)(() => {
    const onDocClick = (event) => {
      const clickedWithinSearchInput = parentRef && parentRef.current.contains(event.target);
      if (isSearchMenuOpen && !clickedWithinSearchInput) {
        onToggleAdvancedMenu(event);
      }
    };
    const onEscPress = (event) => {
      if (event.key === "Escape" && isSearchMenuOpen) {
        onToggleAdvancedMenu(event);
      }
    };
    document.addEventListener("mousedown", onDocClick);
    document.addEventListener("touchstart", onDocClick);
    document.addEventListener("keydown", onEscPress);
    return function cleanup() {
      document.removeEventListener("mousedown", onDocClick);
      document.removeEventListener("touchstart", onDocClick);
      document.removeEventListener("keydown", onEscPress);
    };
  }, [isSearchMenuOpen, parentRef, onToggleAdvancedMenu]);
  const onSearchHandler = (event) => {
    event.preventDefault();
    if (onSearch) {
      onSearch(event, value, getAttrValueMap());
    }
    if (isSearchMenuOpen) {
      onToggleAdvancedMenu(event);
    }
  };
  const handleValueChange = (attribute, newValue, event) => {
    const newMap = getAttrValueMap();
    newMap[attribute] = newValue;
    let updatedValue = "";
    Object.entries(newMap).forEach(([k, v]) => {
      if (v.trim() !== "") {
        const quoteWrappedValue = v.includes(" ") ? `'${v.replace(/(^'|'$)/g, "")}'` : v;
        if (k !== "haswords") {
          updatedValue = `${updatedValue} ${k}${advancedSearchDelimiter}${quoteWrappedValue}`;
        } else {
          updatedValue = `${updatedValue} ${quoteWrappedValue}`;
        }
      }
    });
    if (onChange) {
      onChange(event, updatedValue.replace(/^\s+/g, ""));
    }
  };
  const getValue = (attribute) => {
    const map = getAttrValueMap();
    return map.hasOwnProperty(attribute) ? map[attribute] : "";
  };
  const buildFormGroups = () => {
    const formGroups = [];
    attributes.forEach((attribute, index) => {
      const display = typeof attribute === "string" ? attribute : attribute.display;
      const queryAttr = typeof attribute === "string" ? attribute : attribute.attr;
      if (index === 0) {
        formGroups.push((0, import_jsx_runtime119.jsx)(FormGroup, { label: display, fieldId: `${queryAttr}_${index}`, children: (0, import_jsx_runtime119.jsx)(TextInput, { ref: firstAttrRef, type: "text", id: `${queryAttr}_${index}`, value: getValue(queryAttr), onChange: (evt, value2) => handleValueChange(queryAttr, value2, evt) }) }, `${attribute}_${index}`));
      } else {
        formGroups.push((0, import_jsx_runtime119.jsx)(FormGroup, { label: display, fieldId: `${queryAttr}_${index}`, children: (0, import_jsx_runtime119.jsx)(TextInput, { type: "text", id: `${queryAttr}_${index}`, value: getValue(queryAttr), onChange: (evt, value2) => handleValueChange(queryAttr, value2, evt) }) }, `${attribute}_${index}`));
      }
    });
    formGroups.push((0, import_jsx_runtime119.jsx)(GenerateId, { children: (randomId) => (0, import_jsx_runtime119.jsx)(FormGroup, { label: hasWordsAttrLabel, fieldId: randomId, children: (0, import_jsx_runtime119.jsx)(TextInput, { type: "text", id: randomId, value: getValue("haswords"), onChange: (evt, value2) => handleValueChange("haswords", value2, evt) }) }) }, "hasWords"));
    return formGroups;
  };
  return isSearchMenuOpen ? (0, import_jsx_runtime119.jsx)(Panel, { variant: "raised", className: css(className), children: (0, import_jsx_runtime119.jsx)(PanelMain, { children: (0, import_jsx_runtime119.jsx)(PanelMainBody, { children: (0, import_jsx_runtime119.jsxs)(Form, { children: [buildFormGroups(), formAdditionalItems ? formAdditionalItems : null, (0, import_jsx_runtime119.jsxs)(ActionGroup, { children: [(0, import_jsx_runtime119.jsx)(Button, { variant: "primary", type: "submit", onClick: onSearchHandler, isDisabled: !value, children: submitSearchButtonLabel }), !!onClear && (0, import_jsx_runtime119.jsx)(Button, { variant: "link", type: "reset", onClick: onClear, children: resetButtonLabel })] })] }) }) }) }) : null;
};
AdvancedSearchMenu.displayName = "SearchInput";

// node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroup.js
var import_jsx_runtime120 = __toESM(require_jsx_runtime());
var import_react50 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/TextInputGroup/text-input-group.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/TextInputGroup/text-input-group.css";
var text_input_group_default = {
  "labelGroupMain": "pf-v6-c-label-group__main",
  "modifiers": {
    "disabled": "pf-m-disabled",
    "plain": "pf-m-plain",
    "success": "pf-m-success",
    "warning": "pf-m-warning",
    "error": "pf-m-error",
    "status": "pf-m-status",
    "icon": "pf-m-icon",
    "hint": "pf-m-hint"
  },
  "textInputGroup": "pf-v6-c-text-input-group",
  "textInputGroupGroup": "pf-v6-c-text-input-group__group",
  "textInputGroupIcon": "pf-v6-c-text-input-group__icon",
  "textInputGroupMain": "pf-v6-c-text-input-group__main",
  "textInputGroupText": "pf-v6-c-text-input-group__text",
  "textInputGroupTextInput": "pf-v6-c-text-input-group__text-input",
  "textInputGroupUtilities": "pf-v6-c-text-input-group__utilities"
};

// node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroup.js
var TextInputGroupContext = (0, import_react50.createContext)({
  isDisabled: false
});
var TextInputGroup = (_a) => {
  var { children, className, isDisabled, isPlain, validated, innerRef } = _a, props = __rest(_a, ["children", "className", "isDisabled", "isPlain", "validated", "innerRef"]);
  const ref = (0, import_react50.useRef)(null);
  const textInputGroupRef = innerRef || ref;
  return (0, import_jsx_runtime120.jsx)(TextInputGroupContext.Provider, { value: { isDisabled, validated }, children: (0, import_jsx_runtime120.jsx)("div", Object.assign({ ref: textInputGroupRef, className: css(text_input_group_default.textInputGroup, isDisabled && text_input_group_default.modifiers.disabled, isPlain && text_input_group_default.modifiers.plain, validated && text_input_group_default.modifiers[validated], className) }, props, { children })) });
};
TextInputGroup.displayName = "TextInputGroup";

// node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroupMain.js
var import_jsx_runtime122 = __toESM(require_jsx_runtime());
var import_react51 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroupIcon.js
var import_jsx_runtime121 = __toESM(require_jsx_runtime());
var TextInputGroupIcon = (_a) => {
  var { children, className, isStatus } = _a, props = __rest(_a, ["children", "className", "isStatus"]);
  return (0, import_jsx_runtime121.jsx)("span", Object.assign({ className: css(text_input_group_default.textInputGroupIcon, isStatus && text_input_group_default.modifiers.status, className) }, props, { children }));
};
TextInputGroupIcon.displayName = "TextInputGroupIcon";

// node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroupMain.js
var TextInputGroupMainBase = (_a) => {
  var { children, className, icon, type = "text", hint, onChange = () => void 0, onFocus, onBlur, "aria-label": ariaLabel = "Type to filter", value: inputValue, placeholder: inputPlaceHolder, innerRef, name, "aria-activedescendant": ariaActivedescendant, role, isExpanded, "aria-controls": ariaControls, inputId, inputProps } = _a, props = __rest(_a, ["children", "className", "icon", "type", "hint", "onChange", "onFocus", "onBlur", "aria-label", "value", "placeholder", "innerRef", "name", "aria-activedescendant", "role", "isExpanded", "aria-controls", "inputId", "inputProps"]);
  const { isDisabled, validated } = (0, import_react51.useContext)(TextInputGroupContext);
  const ref = (0, import_react51.useRef)(null);
  const textInputGroupInputInputRef = innerRef || ref;
  const StatusIcon = statusIcons[validated === ValidatedOptions.error ? "danger" : validated];
  const handleChange = (event) => {
    onChange(event, event.currentTarget.value);
  };
  return (0, import_jsx_runtime122.jsxs)("div", Object.assign({ className: css(text_input_group_default.textInputGroupMain, icon && text_input_group_default.modifiers.icon, className) }, props, { children: [children, (0, import_jsx_runtime122.jsxs)("span", { className: css(text_input_group_default.textInputGroupText), children: [hint && (0, import_jsx_runtime122.jsx)("input", { className: css(text_input_group_default.textInputGroupTextInput, text_input_group_default.modifiers.hint), type: "text", disabled: true, "aria-hidden": "true", value: hint, id: inputId }), icon && (0, import_jsx_runtime122.jsx)(TextInputGroupIcon, { children: icon }), (0, import_jsx_runtime122.jsx)("input", Object.assign({ ref: textInputGroupInputInputRef, type, className: css(text_input_group_default.textInputGroupTextInput), "aria-label": ariaLabel, disabled: isDisabled, onChange: handleChange, onFocus, onBlur, value: inputValue || "", placeholder: inputPlaceHolder, name, "aria-activedescendant": ariaActivedescendant, id: inputId }, role && { role }, isExpanded !== void 0 && { "aria-expanded": isExpanded }, ariaControls && { "aria-controls": ariaControls }, inputProps)), validated && (0, import_jsx_runtime122.jsx)(TextInputGroupIcon, { isStatus: true, children: (0, import_jsx_runtime122.jsx)(StatusIcon, {}) })] })] }));
};
var TextInputGroupMain = (0, import_react51.forwardRef)((props, ref) => (0, import_jsx_runtime122.jsx)(TextInputGroupMainBase, Object.assign({ innerRef: ref }, props)));
TextInputGroupMain.displayName = "TextInputGroupMain";

// node_modules/@patternfly/react-core/dist/esm/components/TextInputGroup/TextInputGroupUtilities.js
var import_jsx_runtime123 = __toESM(require_jsx_runtime());
var TextInputGroupUtilities = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime123.jsx)("div", Object.assign({ className: css(text_input_group_default.textInputGroupUtilities, className) }, props, { children }));
};
TextInputGroupUtilities.displayName = "TextInputGroupUtilities";

// node_modules/@patternfly/react-core/dist/esm/components/SearchInput/SearchInput.js
var SearchInputBase = (_a) => {
  var { className, searchInputId, value = "", attributes = [], formAdditionalItems, hasWordsAttrLabel = "Has words", advancedSearchDelimiter, placeholder, hint, onChange, onSearch, onClear, onToggleAdvancedSearch, isAdvancedSearchOpen = false, resultsCount, resultsCountContext = " results", onNextClick, onPreviousClick, innerRef, expandableInput, "aria-label": ariaLabel = "Search input", resetButtonLabel = "Reset", openMenuButtonAriaLabel = "Open advanced search", previousNavigationButtonAriaLabel = "Previous", isPreviousNavigationButtonDisabled = false, isNextNavigationButtonDisabled = false, nextNavigationButtonAriaLabel = "Next", submitSearchButtonLabel = "Search", isDisabled = false, appendTo, zIndex = 9999, name, areUtilitiesDisplayed, inputProps } = _a, props = __rest(_a, ["className", "searchInputId", "value", "attributes", "formAdditionalItems", "hasWordsAttrLabel", "advancedSearchDelimiter", "placeholder", "hint", "onChange", "onSearch", "onClear", "onToggleAdvancedSearch", "isAdvancedSearchOpen", "resultsCount", "resultsCountContext", "onNextClick", "onPreviousClick", "innerRef", "expandableInput", "aria-label", "resetButtonLabel", "openMenuButtonAriaLabel", "previousNavigationButtonAriaLabel", "isPreviousNavigationButtonDisabled", "isNextNavigationButtonDisabled", "nextNavigationButtonAriaLabel", "submitSearchButtonLabel", "isDisabled", "appendTo", "zIndex", "name", "areUtilitiesDisplayed", "inputProps"]);
  const [isSearchMenuOpen, setIsSearchMenuOpen] = (0, import_react52.useState)(false);
  const [searchValue, setSearchValue] = (0, import_react52.useState)(value);
  const searchInputRef = (0, import_react52.useRef)(null);
  const ref = (0, import_react52.useRef)(null);
  const searchInputInputRef = innerRef || ref;
  const searchInputExpandableToggleRef = (0, import_react52.useRef)(null);
  const triggerRef = (0, import_react52.useRef)(null);
  const popperRef = (0, import_react52.useRef)(null);
  const [focusAfterExpandChange, setFocusAfterExpandChange] = (0, import_react52.useState)(false);
  const { isExpanded, onToggleExpand, toggleAriaLabel, hasAnimations } = expandableInput || {};
  (0, import_react52.useEffect)(() => {
    var _a2, _b;
    if (!focusAfterExpandChange) {
      return;
    } else if (isExpanded) {
      (_a2 = searchInputInputRef === null || searchInputInputRef === void 0 ? void 0 : searchInputInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
    } else {
      if (!hasAnimations) {
        (_b = searchInputExpandableToggleRef === null || searchInputExpandableToggleRef === void 0 ? void 0 : searchInputExpandableToggleRef.current) === null || _b === void 0 ? void 0 : _b.focus();
      }
    }
    if (!hasAnimations) {
      setFocusAfterExpandChange(false);
    }
  }, [focusAfterExpandChange, isExpanded, searchInputInputRef, searchInputExpandableToggleRef]);
  (0, import_react52.useEffect)(() => {
    setSearchValue(value);
  }, [value]);
  (0, import_react52.useEffect)(() => {
    if (attributes.length > 0 && !advancedSearchDelimiter) {
      console.error("An advancedSearchDelimiter prop is required when advanced search attributes are provided using the attributes prop");
    }
  });
  (0, import_react52.useEffect)(() => {
    setIsSearchMenuOpen(isAdvancedSearchOpen);
  }, [isAdvancedSearchOpen]);
  const onChangeHandler = (event, value2) => {
    if (onChange) {
      onChange(event, value2);
    }
    setSearchValue(value2);
  };
  const onToggle = (e) => {
    const isOpen = !isSearchMenuOpen;
    setIsSearchMenuOpen(isOpen);
    if (onToggleAdvancedSearch) {
      onToggleAdvancedSearch(e, isOpen);
    }
  };
  const onSearchHandler = (event) => {
    event.preventDefault();
    if (onSearch) {
      onSearch(event, value, getAttrValueMap());
    }
    setIsSearchMenuOpen(false);
  };
  const splitStringExceptInQuotes = (str) => {
    let quoteType;
    return str.match(/\\?.|^$/g).reduce((p, c) => {
      if (c === "'" || c === '"') {
        if (!quoteType) {
          quoteType = c;
        }
        if (c === quoteType) {
          p.quote = !p.quote;
        }
      } else if (!p.quote && c === " ") {
        p.a.push("");
      } else {
        p.a[p.a.length - 1] += c.replace(/\\(.)/, "$1");
      }
      return p;
    }, { a: [""] }).a;
  };
  const getAttrValueMap = () => {
    const attrValue = {};
    const pairs = splitStringExceptInQuotes(searchValue);
    pairs.map((pair) => {
      const splitPair = pair.split(advancedSearchDelimiter);
      if (splitPair.length === 2) {
        attrValue[splitPair[0]] = splitPair[1].replace(/(^'|'$)/g, "");
      } else if (splitPair.length === 1) {
        attrValue.haswords = attrValue.hasOwnProperty("haswords") ? `${attrValue.haswords} ${splitPair[0]}` : splitPair[0];
      }
    });
    return attrValue;
  };
  const onEnter = (event) => {
    if (event.key === "Enter") {
      onSearchHandler(event);
    }
  };
  const onClearInput = (e) => {
    if (onClear) {
      onClear(e);
    }
    if (searchInputInputRef && searchInputInputRef.current) {
      searchInputInputRef.current.focus();
    }
  };
  const onExpandHandler = (event) => {
    setSearchValue("");
    onToggleExpand(event, isExpanded);
    setFocusAfterExpandChange(true);
  };
  const renderUtilities = value && (resultsCount || !!onNextClick && !!onPreviousClick || !!onClear && !expandableInput);
  const buildTextInputGroup = (_a2 = {}) => {
    var searchInputProps2 = __rest(_a2, []);
    return (0, import_jsx_runtime124.jsxs)(TextInputGroup, Object.assign({ isDisabled }, searchInputProps2, { children: [(0, import_jsx_runtime124.jsx)(TextInputGroupMain, { hint, icon: (0, import_jsx_runtime124.jsx)(search_icon_default, {}), innerRef: searchInputInputRef, value: searchValue, placeholder, "aria-label": ariaLabel, onKeyDown: onEnter, onChange: onChangeHandler, name, inputId: searchInputId, inputProps }), (renderUtilities || areUtilitiesDisplayed) && (0, import_jsx_runtime124.jsxs)(TextInputGroupUtilities, { children: [resultsCount && (0, import_jsx_runtime124.jsx)(Badge, { isRead: true, screenReaderText: resultsCountContext, children: resultsCount }), !!onNextClick && !!onPreviousClick && (0, import_jsx_runtime124.jsxs)("div", { className: text_input_group_default.textInputGroupGroup, children: [(0, import_jsx_runtime124.jsx)(Button, { variant: ButtonVariant.plain, "aria-label": previousNavigationButtonAriaLabel, isDisabled: isDisabled || isPreviousNavigationButtonDisabled, onClick: onPreviousClick, icon: (0, import_jsx_runtime124.jsx)(angle_up_icon_default, {}) }), (0, import_jsx_runtime124.jsx)(Button, { variant: ButtonVariant.plain, "aria-label": nextNavigationButtonAriaLabel, isDisabled: isDisabled || isNextNavigationButtonDisabled, onClick: onNextClick, icon: (0, import_jsx_runtime124.jsx)(angle_down_icon_default, {}) })] }), !!onClear && !expandableInput && (0, import_jsx_runtime124.jsx)(Button, { variant: ButtonVariant.plain, isDisabled, "aria-label": resetButtonLabel, onClick: onClearInput, icon: (0, import_jsx_runtime124.jsx)(times_icon_default, {}) })] })] }));
  };
  const expandToggleButton = (0, import_jsx_runtime124.jsx)(Button, { variant: ButtonVariant.plain, "aria-label": toggleAriaLabel, "aria-expanded": isExpanded, icon: (0, import_jsx_runtime124.jsx)(search_icon_default, {}), onClick: onExpandHandler, ref: searchInputExpandableToggleRef });
  const collapseToggleButton = (0, import_jsx_runtime124.jsx)(Button, { variant: ButtonVariant.plain, "aria-label": toggleAriaLabel, "aria-expanded": isExpanded, icon: (0, import_jsx_runtime124.jsx)(times_icon_default, {}), onClick: onExpandHandler });
  const singleButtonToggle = (0, import_jsx_runtime124.jsx)(Button, { variant: ButtonVariant.plain, "aria-label": toggleAriaLabel, "aria-expanded": isExpanded, icon: isExpanded ? (0, import_jsx_runtime124.jsx)(times_icon_default, {}) : (0, import_jsx_runtime124.jsx)(search_icon_default, {}), onClick: onExpandHandler, ref: searchInputExpandableToggleRef });
  const onTransitionEnd = () => {
    var _a2;
    !isExpanded && focusAfterExpandChange && ((_a2 = searchInputExpandableToggleRef === null || searchInputExpandableToggleRef === void 0 ? void 0 : searchInputExpandableToggleRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus());
    setFocusAfterExpandChange(false);
  };
  const expandableToggle = (0, import_jsx_runtime124.jsxs)(import_jsx_runtime124.Fragment, { children: [!hasAnimations && (0, import_jsx_runtime124.jsx)(InputGroupItem, { isPlain: true, children: singleButtonToggle }), hasAnimations && (0, import_jsx_runtime124.jsxs)(import_jsx_runtime124.Fragment, { children: [(0, import_jsx_runtime124.jsx)(InputGroupItem, Object.assign({ className: input_group_default.modifiers.searchExpand, isPlain: true, onTransitionEnd }, isExpanded && { inert: "" }, { children: expandToggleButton })), (0, import_jsx_runtime124.jsx)(InputGroupItem, Object.assign({ className: input_group_default.modifiers.searchAction, isPlain: true }, !isExpanded && { inert: "" }, { children: collapseToggleButton }))] })] });
  const buildExpandableSearchInput = (_a2 = {}) => {
    var searchInputProps2 = __rest(_a2, []);
    return (0, import_jsx_runtime124.jsxs)(InputGroup, Object.assign({}, searchInputProps2, { children: [(0, import_jsx_runtime124.jsx)(InputGroupItem, Object.assign({}, !hasAnimations && { isFill: true }, hasAnimations && { className: input_group_default.modifiers.searchInput }, !isExpanded && {
      inert: ""
    }, { children: buildTextInputGroup() })), expandableToggle] }));
  };
  const buildSearchTextInputGroup = (_a2 = {}) => {
    var searchInputProps2 = __rest(_a2, []);
    if (expandableInput) {
      return buildExpandableSearchInput(Object.assign({}, searchInputProps2));
    }
    return buildTextInputGroup(Object.assign({}, searchInputProps2));
  };
  const buildSearchTextInputGroupWithExtraButtons = (_a2 = {}) => {
    var searchInputProps2 = __rest(_a2, []);
    return (0, import_jsx_runtime124.jsxs)(InputGroup, Object.assign({ ref: triggerRef }, searchInputProps2, { children: [(0, import_jsx_runtime124.jsx)(InputGroupItem, Object.assign({}, !hasAnimations && { isFill: true }, expandableInput && hasAnimations && { className: input_group_default.modifiers.searchInput }, expandableInput && hasAnimations && !isExpanded && {
      inert: ""
    }, { children: buildTextInputGroup() })), (attributes.length > 0 || onToggleAdvancedSearch) && (0, import_jsx_runtime124.jsx)(InputGroupItem, Object.assign({ isPlain: true }, hasAnimations && { className: input_group_default.modifiers.searchAction }, { children: (0, import_jsx_runtime124.jsx)(Button, { className: isSearchMenuOpen && "pf-m-expanded", variant: ButtonVariant.control, "aria-label": openMenuButtonAriaLabel, onClick: onToggle, isDisabled, "aria-expanded": isSearchMenuOpen, icon: (0, import_jsx_runtime124.jsx)(caret_down_icon_default, {}) }) })), !!onSearch && (0, import_jsx_runtime124.jsx)(InputGroupItem, Object.assign({}, hasAnimations && { className: input_group_default.modifiers.searchAction }, { children: (0, import_jsx_runtime124.jsx)(Button, { type: "submit", variant: ButtonVariant.control, "aria-label": submitSearchButtonLabel, onClick: onSearchHandler, isDisabled, icon: (0, import_jsx_runtime124.jsx)(Icon, { shouldMirrorRTL: true, children: (0, import_jsx_runtime124.jsx)(arrow_right_icon_default, {}) }) }) })), expandableInput && (0, import_jsx_runtime124.jsx)(InputGroupItem, { children: expandableToggle })] }));
  };
  const searchInputProps = Object.assign(Object.assign({}, props), { className: css(expandableInput && hasAnimations && input_group_default.modifiers.searchExpandable, expandableInput && hasAnimations && isExpanded && input_group_default.modifiers.expanded, className && css(className)), innerRef: searchInputRef });
  if (!!expandableInput && !isExpanded && !hasAnimations) {
    return (0, import_jsx_runtime124.jsx)(InputGroup, Object.assign({}, searchInputProps, { children: (0, import_jsx_runtime124.jsx)(InputGroupItem, { children: expandableToggle }) }));
  }
  if (!!onSearch || attributes.length > 0 || !!onToggleAdvancedSearch) {
    if (attributes.length > 0) {
      const AdvancedSearch = (0, import_jsx_runtime124.jsx)("div", { ref: popperRef, children: (0, import_jsx_runtime124.jsx)(AdvancedSearchMenu, { value, parentRef: searchInputRef, parentInputRef: searchInputInputRef, onSearch, onClear, onChange, onToggleAdvancedMenu: onToggle, resetButtonLabel, submitSearchButtonLabel, attributes, formAdditionalItems, hasWordsAttrLabel, advancedSearchDelimiter, getAttrValueMap, isSearchMenuOpen }) });
      const advancedSearchInputProps = hasAnimations ? {
        className: css(expandableInput && input_group_default.modifiers.searchExpandable, expandableInput && isExpanded && input_group_default.modifiers.expanded)
      } : {};
      const AdvancedSearchWithPopper = (0, import_jsx_runtime124.jsx)("div", Object.assign({ className: css(className), ref: searchInputRef }, props, { children: (0, import_jsx_runtime124.jsx)(Popper, { trigger: buildSearchTextInputGroupWithExtraButtons(advancedSearchInputProps), triggerRef, popper: AdvancedSearch, popperRef, isVisible: isSearchMenuOpen, enableFlip: true, appendTo: () => appendTo || searchInputRef.current, zIndex }) }));
      const AdvancedSearchInline = (0, import_jsx_runtime124.jsxs)("div", Object.assign({ className: css(className), ref: searchInputRef }, props, { children: [buildSearchTextInputGroupWithExtraButtons(advancedSearchInputProps), AdvancedSearch] }));
      return appendTo !== "inline" ? AdvancedSearchWithPopper : AdvancedSearchInline;
    }
    return buildSearchTextInputGroupWithExtraButtons(Object.assign({}, searchInputProps));
  }
  return buildSearchTextInputGroup(searchInputProps);
};
SearchInputBase.displayName = "SearchInputBase";
var SearchInput = (0, import_react52.forwardRef)((props, ref) => (0, import_jsx_runtime124.jsx)(SearchInputBase, Object.assign({}, props, { innerRef: ref })));
SearchInput.displayName = "SearchInput";

// node_modules/@patternfly/react-tokens/dist/esm/c_dual_list_selector__menu_MinHeight.js
var c_dual_list_selector__menu_MinHeight = {
  "name": "--pf-v6-c-dual-list-selector__menu--MinHeight",
  "value": "12.5rem",
  "var": "var(--pf-v6-c-dual-list-selector__menu--MinHeight)"
};
var c_dual_list_selector_menu_MinHeight_default = c_dual_list_selector__menu_MinHeight;

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorPane.js
var DualListSelectorPane = (_a) => {
  var { isChosen = false, className = "", status = "", actions, searchInput, children, title = "", id = getUniqueId("dual-list-selector-pane"), isDisabled = false, listMinHeight } = _a, props = __rest(_a, ["isChosen", "className", "status", "actions", "searchInput", "children", "title", "id", "isDisabled", "listMinHeight"]);
  return (0, import_jsx_runtime125.jsxs)("div", Object.assign({ className: css(dual_list_selector_default.dualListSelectorPane, isChosen ? dual_list_selector_default.modifiers.chosen : "pf-m-available", className) }, props, { children: [title && (0, import_jsx_runtime125.jsx)("div", { className: css(dual_list_selector_default.dualListSelectorHeader), children: (0, import_jsx_runtime125.jsx)("div", { className: `${dual_list_selector_default.dualListSelector}__title`, children: (0, import_jsx_runtime125.jsx)("div", { className: css(dual_list_selector_default.dualListSelectorTitleText), children: title }) }) }), (actions || searchInput) && (0, import_jsx_runtime125.jsxs)("div", { className: css(dual_list_selector_default.dualListSelectorTools), children: [searchInput && (0, import_jsx_runtime125.jsx)("div", { className: css(dual_list_selector_default.dualListSelectorToolsFilter), children: searchInput ? searchInput : (0, import_jsx_runtime125.jsx)(SearchInput, { isDisabled }) }), actions && (0, import_jsx_runtime125.jsx)("div", { className: css(dual_list_selector_default.dualListSelectorToolsActions), children: actions })] }), status && (0, import_jsx_runtime125.jsx)("div", { className: css(dual_list_selector_default.dualListSelectorStatus), children: (0, import_jsx_runtime125.jsx)("div", { className: css(dual_list_selector_default.dualListSelectorStatusText), id: `${id}-status`, children: status }) }), (0, import_jsx_runtime125.jsx)(DualListSelectorPaneContext.Provider, { value: { isChosen }, children: (0, import_jsx_runtime125.jsx)(DualListSelectorListWrapper, Object.assign({ "aria-labelledby": `${id}-status`, id: `${id}-list` }, listMinHeight && {
    style: { [c_dual_list_selector_menu_MinHeight_default.name]: listMinHeight }
  }, { children })) })] }));
};
DualListSelectorPane.displayName = "DualListSelectorPane";

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorTree.js
var import_jsx_runtime127 = __toESM(require_jsx_runtime());
var import_react54 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorTreeItem.js
var import_jsx_runtime126 = __toESM(require_jsx_runtime());
var import_react53 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/treeUtils.js
function flattenTree(tree) {
  let result = [];
  tree.forEach((item) => {
    if (item.children) {
      result = result.concat(flattenTree(item.children));
    } else {
      result.push(item.id);
    }
  });
  return result;
}

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorTreeItem.js
var DualListSelectorTreeItemBase = (_a) => {
  var {
    onOptionCheck,
    children,
    className,
    id,
    text,
    defaultExpanded,
    hasBadge,
    isChecked,
    checkProps,
    badgeProps,
    itemData,
    isDisabled = false,
    hasAnimations,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    useMemo: useMemo7
  } = _a, props = __rest(_a, ["onOptionCheck", "children", "className", "id", "text", "defaultExpanded", "hasBadge", "isChecked", "checkProps", "badgeProps", "itemData", "isDisabled", "hasAnimations", "useMemo"]);
  const ref = (0, import_react53.useRef)(null);
  const [isExpanded, setIsExpanded] = (0, import_react53.useState)(defaultExpanded || false);
  const { setFocusedOption } = (0, import_react53.useContext)(DualListSelectorListContext);
  (0, import_react53.useEffect)(() => {
    setIsExpanded(defaultExpanded);
  }, [defaultExpanded]);
  const clonedChildren = import_react53.Children.map(children, (child) => (0, import_react53.isValidElement)(child) && (0, import_react53.cloneElement)(child, {
    inert: isExpanded ? void 0 : ""
  }));
  return (0, import_jsx_runtime126.jsxs)("li", Object.assign({ className: css(dual_list_selector_default.dualListSelectorListItem, className, children && dual_list_selector_default.modifiers.expandable, isExpanded && dual_list_selector_default.modifiers.expanded, isDisabled && dual_list_selector_default.modifiers.disabled), id }, props, { "aria-selected": isChecked, role: "treeitem" }, isExpanded && { "aria-expanded": "true" }, { children: [(0, import_jsx_runtime126.jsx)("div", { className: css(dual_list_selector_default.dualListSelectorListItemRow, isChecked && dual_list_selector_default.modifiers.selected, dual_list_selector_default.modifiers.check), children: (0, import_jsx_runtime126.jsx)("div", { className: css(dual_list_selector_default.dualListSelectorItem), ref, tabIndex: -1, onClick: isDisabled ? void 0 : (evt) => {
    onOptionCheck && onOptionCheck(evt, !isChecked, itemData);
    setFocusedOption(id);
  }, children: (0, import_jsx_runtime126.jsxs)("span", { className: css(dual_list_selector_default.dualListSelectorItemMain), children: [children && (0, import_jsx_runtime126.jsx)("div", { className: css(dual_list_selector_default.dualListSelectorItemToggle), onClick: (e) => {
    if (children) {
      setIsExpanded(!isExpanded);
    }
    e.stopPropagation();
  }, onKeyDown: (e) => {
    if (e.key === " " || e.key === "Enter") {
      document.activeElement.click();
      e.preventDefault();
    }
  }, tabIndex: -1, children: (0, import_jsx_runtime126.jsx)("span", { className: css(dual_list_selector_default.dualListSelectorItemToggleIcon), children: (0, import_jsx_runtime126.jsx)(angle_right_icon_default, {}) }) }), (0, import_jsx_runtime126.jsx)("span", { className: css(dual_list_selector_default.dualListSelectorItemCheck), children: (0, import_jsx_runtime126.jsx)("input", Object.assign({ type: "checkbox", onChange: (evt) => {
    onOptionCheck && onOptionCheck(evt, !isChecked, itemData);
    setFocusedOption(id);
  }, onClick: (evt) => evt.stopPropagation(), onKeyDown: (e) => {
    if (e.key === " " || e.key === "Enter") {
      onOptionCheck && onOptionCheck(e, !isChecked, itemData);
      setFocusedOption(id);
      e.preventDefault();
    }
  }, ref: (elem) => {
    elem && (elem.indeterminate = isChecked === null);
  }, checked: isChecked || false, tabIndex: -1 }, checkProps)) }), (0, import_jsx_runtime126.jsx)("span", { className: css(dual_list_selector_default.dualListSelectorItemText), children: text }), hasBadge && children && (0, import_jsx_runtime126.jsx)("span", { className: css(dual_list_selector_default.dualListSelectorItemCount), children: (0, import_jsx_runtime126.jsx)(Badge, Object.assign({}, badgeProps, { children: flattenTree(children.props.data).length })) })] }) }) }), (isExpanded || hasAnimations) && clonedChildren] }));
};
var DualListSelectorTreeItem = (0, import_react53.memo)(DualListSelectorTreeItemBase, (prevProps, nextProps) => {
  if (!nextProps.useMemo) {
    return false;
  }
  if (prevProps.className !== nextProps.className || prevProps.text !== nextProps.text || prevProps.id !== nextProps.id || prevProps.defaultExpanded !== nextProps.defaultExpanded || prevProps.checkProps !== nextProps.checkProps || prevProps.hasBadge !== nextProps.hasBadge || prevProps.badgeProps !== nextProps.badgeProps || prevProps.isChecked !== nextProps.isChecked || prevProps.itemData !== nextProps.itemData) {
    return false;
  }
  return true;
});
DualListSelectorTreeItem.displayName = "DualListSelectorTreeItem";

// node_modules/@patternfly/react-core/dist/esm/components/DualListSelector/DualListSelectorTree.js
var DualListSelectorTree = (_a) => {
  var { data, hasBadges = false, isNested = false, defaultAllExpanded = false, onOptionCheck, isDisabled = false } = _a, props = __rest(_a, ["data", "hasBadges", "isNested", "defaultAllExpanded", "onOptionCheck", "isDisabled"]);
  const { hasAnimations } = (0, import_react54.useContext)(DualListSelectorContext);
  const dataToRender = typeof data === "function" ? data() : data;
  const tree = dataToRender.map((item) => (0, import_jsx_runtime127.jsx)(DualListSelectorTreeItem, Object.assign({ text: item.text, hasAnimations, id: item.id, defaultExpanded: item.defaultExpanded !== void 0 ? item.defaultExpanded : defaultAllExpanded, onOptionCheck, isChecked: item.isChecked, checkProps: item.checkProps, hasBadge: item.hasBadge !== void 0 ? item.hasBadge : hasBadges, badgeProps: item.badgeProps, itemData: item, isDisabled, useMemo: true }, item.children && {
    children: (0, import_jsx_runtime127.jsx)(DualListSelectorTree, { isNested: true, data: item.children, hasBadges, defaultAllExpanded, onOptionCheck, isDisabled })
  }), item.id));
  return isNested ? (0, import_jsx_runtime127.jsx)("ul", Object.assign({ className: css(dual_list_selector_default.dualListSelectorList), role: "group" }, props, { children: tree })) : (0, import_jsx_runtime127.jsx)(import_jsx_runtime127.Fragment, { children: tree });
};
DualListSelectorTree.displayName = "DualListSelectorTree";

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyState.js
var import_jsx_runtime130 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/EmptyState/empty-state.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/EmptyState/empty-state.css";
var empty_state_default = {
  "emptyState": "pf-v6-c-empty-state",
  "emptyStateActions": "pf-v6-c-empty-state__actions",
  "emptyStateBody": "pf-v6-c-empty-state__body",
  "emptyStateContent": "pf-v6-c-empty-state__content",
  "emptyStateFooter": "pf-v6-c-empty-state__footer",
  "emptyStateIcon": "pf-v6-c-empty-state__icon",
  "emptyStateTitleText": "pf-v6-c-empty-state__title-text",
  "modifiers": {
    "xs": "pf-m-xs",
    "sm": "pf-m-sm",
    "lg": "pf-m-lg",
    "xl": "pf-m-xl",
    "fullHeight": "pf-m-full-height",
    "danger": "pf-m-danger",
    "warning": "pf-m-warning",
    "success": "pf-m-success",
    "info": "pf-m-info",
    "custom": "pf-m-custom"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateHeader.js
var import_jsx_runtime129 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateIcon.js
var import_jsx_runtime128 = __toESM(require_jsx_runtime());
var isSpinner = (icon) => icon.type === Spinner;
var EmptyStateIcon = (_a) => {
  var { className, icon: IconComponent } = _a, props = __rest(_a, ["className", "icon"]);
  const iconIsSpinner = isSpinner((0, import_jsx_runtime128.jsx)(IconComponent, {}));
  return (0, import_jsx_runtime128.jsx)("div", { className: css(empty_state_default.emptyStateIcon), children: (0, import_jsx_runtime128.jsx)(IconComponent, Object.assign({ className, "aria-hidden": !iconIsSpinner }, props)) });
};
EmptyStateIcon.displayName = "EmptyStateIcon";

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateHeader.js
var EmptyStateHeadingLevel;
(function(EmptyStateHeadingLevel2) {
  EmptyStateHeadingLevel2["h1"] = "h1";
  EmptyStateHeadingLevel2["h2"] = "h2";
  EmptyStateHeadingLevel2["h3"] = "h3";
  EmptyStateHeadingLevel2["h4"] = "h4";
  EmptyStateHeadingLevel2["h5"] = "h5";
  EmptyStateHeadingLevel2["h6"] = "h6";
})(EmptyStateHeadingLevel || (EmptyStateHeadingLevel = {}));
var EmptyStateHeader = (_a) => {
  var { className, titleClassName, titleText, headingLevel: HeadingLevel = EmptyStateHeadingLevel.h1, icon: Icon2 } = _a, props = __rest(_a, ["className", "titleClassName", "titleText", "headingLevel", "icon"]);
  return (0, import_jsx_runtime129.jsxs)("div", Object.assign({ className: css(`${empty_state_default.emptyState}__header`, className) }, props, { children: [Icon2 && (0, import_jsx_runtime129.jsx)(EmptyStateIcon, { icon: Icon2 }), titleText && (0, import_jsx_runtime129.jsx)("div", { className: css(`${empty_state_default.emptyState}__title`), children: (0, import_jsx_runtime129.jsx)(HeadingLevel, { className: css(empty_state_default.emptyStateTitleText, titleClassName), children: titleText }) })] }));
};
EmptyStateHeader.displayName = "EmptyStateHeader";

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyState.js
var EmptyStateVariant;
(function(EmptyStateVariant2) {
  EmptyStateVariant2["xs"] = "xs";
  EmptyStateVariant2["sm"] = "sm";
  EmptyStateVariant2["lg"] = "lg";
  EmptyStateVariant2["xl"] = "xl";
  EmptyStateVariant2["full"] = "full";
})(EmptyStateVariant || (EmptyStateVariant = {}));
var EmptyStateStatus;
(function(EmptyStateStatus2) {
  EmptyStateStatus2["danger"] = "danger";
  EmptyStateStatus2["warning"] = "warning";
  EmptyStateStatus2["success"] = "success";
  EmptyStateStatus2["info"] = "info";
  EmptyStateStatus2["custom"] = "custom";
})(EmptyStateStatus || (EmptyStateStatus = {}));
var EmptyState = (_a) => {
  var { children, className, variant = EmptyStateVariant.full, isFullHeight, status, icon: customIcon, titleText, titleClassName, headerClassName, headingLevel } = _a, props = __rest(_a, ["children", "className", "variant", "isFullHeight", "status", "icon", "titleText", "titleClassName", "headerClassName", "headingLevel"]);
  const statusIcon = status && statusIcons[status];
  const icon = customIcon || statusIcon;
  return (0, import_jsx_runtime130.jsx)("div", Object.assign({ className: css(empty_state_default.emptyState, variant !== "full" && empty_state_default.modifiers[variant], isFullHeight && empty_state_default.modifiers.fullHeight, status && empty_state_default.modifiers[status], className) }, props, { children: (0, import_jsx_runtime130.jsxs)("div", { className: css(empty_state_default.emptyStateContent), children: [(0, import_jsx_runtime130.jsx)(EmptyStateHeader, { icon, titleText, titleClassName, className: headerClassName, headingLevel }), children] }) }));
};
EmptyState.displayName = "EmptyState";

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateBody.js
var import_jsx_runtime131 = __toESM(require_jsx_runtime());
var EmptyStateBody = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime131.jsx)("div", Object.assign({ className: css(empty_state_default.emptyStateBody, className) }, props, { children }));
};
EmptyStateBody.displayName = "EmptyStateBody";

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateFooter.js
var import_jsx_runtime132 = __toESM(require_jsx_runtime());
var EmptyStateFooter = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime132.jsx)("div", Object.assign({ className: css(empty_state_default.emptyStateFooter, className) }, props, { children }));
};
EmptyStateFooter.displayName = "EmptyStateFooter";

// node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStateActions.js
var import_jsx_runtime133 = __toESM(require_jsx_runtime());
var EmptyStateActions = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime133.jsx)("div", Object.assign({ className: css(empty_state_default.emptyStateActions, className) }, props, { children }));
};
EmptyStateActions.displayName = "EmptyStateActions";

// node_modules/@patternfly/react-core/dist/esm/components/ExpandableSection/ExpandableSection.js
var import_jsx_runtime134 = __toESM(require_jsx_runtime());
var import_react55 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/ExpandableSection/expandable-section.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/ExpandableSection/expandable-section.css";
var expandable_section_default = {
  "dirRtl": "pf-v6-m-dir-rtl",
  "expandableSection": "pf-v6-c-expandable-section",
  "expandableSectionContent": "pf-v6-c-expandable-section__content",
  "expandableSectionToggleIcon": "pf-v6-c-expandable-section__toggle-icon",
  "modifiers": {
    "expanded": "pf-m-expanded",
    "expandTop": "pf-m-expand-top",
    "expandBottom": "pf-m-expand-bottom",
    "limitWidth": "pf-m-limit-width",
    "displayLg": "pf-m-display-lg",
    "indented": "pf-m-indented",
    "truncate": "pf-m-truncate"
  }
};

// node_modules/@patternfly/react-tokens/dist/esm/c_expandable_section_m_truncate__content_LineClamp.js
var c_expandable_section_m_truncate__content_LineClamp = {
  "name": "--pf-v6-c-expandable-section--m-truncate__content--LineClamp",
  "value": "3",
  "var": "var(--pf-v6-c-expandable-section--m-truncate__content--LineClamp)"
};
var c_expandable_section_m_truncate_content_LineClamp_default = c_expandable_section_m_truncate__content_LineClamp;

// node_modules/@patternfly/react-core/dist/esm/components/ExpandableSection/ExpandableSection.js
var ExpandableSectionVariant;
(function(ExpandableSectionVariant2) {
  ExpandableSectionVariant2["default"] = "default";
  ExpandableSectionVariant2["truncate"] = "truncate";
})(ExpandableSectionVariant || (ExpandableSectionVariant = {}));
var directionClassMap = {
  up: expandable_section_default.modifiers.expandTop,
  down: expandable_section_default.modifiers.expandBottom
};
var setLineClamp = (lines, element) => {
  if (!element || lines < 1) {
    return;
  }
  element.style.setProperty(c_expandable_section_m_truncate_content_LineClamp_default.name, lines.toString());
};
var ExpandableSection = class extends import_react55.Component {
  constructor(props) {
    super(props);
    this.expandableContentRef = (0, import_react55.createRef)();
    this.observer = () => {
    };
    this.checkToggleVisibility = () => {
      var _a;
      if ((_a = this.expandableContentRef) === null || _a === void 0 ? void 0 : _a.current) {
        const maxLines = this.props.truncateMaxLines || parseInt(c_expandable_section_m_truncate_content_LineClamp_default.value);
        const totalLines = this.expandableContentRef.current.scrollHeight / parseInt(getComputedStyle(this.expandableContentRef.current).lineHeight);
        this.setState({
          hasToggle: totalLines > maxLines
        });
      }
    };
    this.resize = () => {
      if (this.expandableContentRef.current) {
        const { offsetWidth } = this.expandableContentRef.current;
        if (this.state.previousWidth !== offsetWidth) {
          this.setState({ previousWidth: offsetWidth });
          this.checkToggleVisibility();
        }
      }
    };
    this.handleResize = debounce(this.resize, 250);
    this.state = {
      isExpanded: props.isExpanded,
      hasToggle: true,
      previousWidth: void 0
    };
  }
  calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded) {
    if (propOrStateIsExpanded && toggleTextExpanded !== "") {
      return toggleTextExpanded;
    }
    if (!propOrStateIsExpanded && toggleTextCollapsed !== "") {
      return toggleTextCollapsed;
    }
    return toggleText;
  }
  componentDidMount() {
    if (this.props.variant === ExpandableSectionVariant.truncate) {
      const expandableContent = this.expandableContentRef.current;
      this.setState({ previousWidth: expandableContent.offsetWidth });
      this.observer = getResizeObserver(expandableContent, this.handleResize, false);
      if (this.props.truncateMaxLines) {
        setLineClamp(this.props.truncateMaxLines, expandableContent);
      }
      this.checkToggleVisibility();
    }
  }
  componentDidUpdate(prevProps) {
    if (this.props.variant === ExpandableSectionVariant.truncate && (prevProps.truncateMaxLines !== this.props.truncateMaxLines || prevProps.children !== this.props.children)) {
      const expandableContent = this.expandableContentRef.current;
      setLineClamp(this.props.truncateMaxLines, expandableContent);
      this.checkToggleVisibility();
    }
  }
  componentWillUnmount() {
    if (this.props.variant === ExpandableSectionVariant.truncate) {
      this.observer();
    }
  }
  render() {
    const _a = this.props, {
      onToggle: onToggleProp,
      className,
      toggleText,
      toggleTextExpanded,
      toggleTextCollapsed,
      toggleContent,
      children,
      isExpanded,
      isDetached,
      displaySize,
      isWidthLimited,
      isIndented,
      contentId,
      toggleId,
      variant,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      truncateMaxLines,
      direction
    } = _a, props = __rest(_a, ["onToggle", "className", "toggleText", "toggleTextExpanded", "toggleTextCollapsed", "toggleContent", "children", "isExpanded", "isDetached", "displaySize", "isWidthLimited", "isIndented", "contentId", "toggleId", "variant", "truncateMaxLines", "direction"]);
    if (isDetached && !toggleId) {
      console.warn("ExpandableSection: The toggleId value must be passed in and must match the toggleId of the ExpandableSectionToggle.");
    }
    let onToggle = onToggleProp;
    let propOrStateIsExpanded = isExpanded;
    const uniqueContentId = contentId || getUniqueId("expandable-section-content");
    const uniqueToggleId = toggleId || getUniqueId("expandable-section-toggle");
    if (isExpanded === void 0) {
      propOrStateIsExpanded = this.state.isExpanded;
      onToggle = (event, isOpen) => {
        this.setState({ isExpanded: isOpen }, () => onToggleProp(event, this.state.isExpanded));
      };
    }
    const computedToggleText = this.calculateToggleText(toggleText, toggleTextExpanded, toggleTextCollapsed, propOrStateIsExpanded);
    const expandableToggle = !isDetached && (0, import_jsx_runtime134.jsx)("div", { className: `${expandable_section_default.expandableSection}__toggle`, children: (0, import_jsx_runtime134.jsx)(Button, Object.assign({ variant: "link" }, variant === ExpandableSectionVariant.truncate && { isInline: true }, { "aria-expanded": propOrStateIsExpanded, "aria-controls": uniqueContentId, id: uniqueToggleId, onClick: (event) => onToggle(event, !propOrStateIsExpanded) }, variant !== ExpandableSectionVariant.truncate && {
      icon: (0, import_jsx_runtime134.jsx)("span", { className: css(expandable_section_default.expandableSectionToggleIcon), children: (0, import_jsx_runtime134.jsx)(angle_right_icon_default, {}) })
    }, { children: toggleContent || computedToggleText })) });
    return (0, import_jsx_runtime134.jsxs)("div", Object.assign({ className: css(expandable_section_default.expandableSection, propOrStateIsExpanded && expandable_section_default.modifiers.expanded, displaySize === "lg" && expandable_section_default.modifiers.displayLg, isWidthLimited && expandable_section_default.modifiers.limitWidth, isIndented && expandable_section_default.modifiers.indented, isDetached && direction && directionClassMap[direction], isDetached && direction && "pf-m-detached", variant === ExpandableSectionVariant.truncate && expandable_section_default.modifiers.truncate, className) }, props, { children: [variant === ExpandableSectionVariant.default && expandableToggle, (0, import_jsx_runtime134.jsx)("div", { ref: this.expandableContentRef, className: css(expandable_section_default.expandableSectionContent), hidden: variant !== ExpandableSectionVariant.truncate && !propOrStateIsExpanded, id: uniqueContentId, "aria-labelledby": uniqueToggleId, role: "region", children }), variant === ExpandableSectionVariant.truncate && this.state.hasToggle && expandableToggle] }));
  }
};
ExpandableSection.displayName = "ExpandableSection";
ExpandableSection.defaultProps = {
  className: "",
  toggleText: "",
  toggleTextExpanded: "",
  toggleTextCollapsed: "",
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  onToggle: (event, isExpanded) => void 0,
  isDetached: false,
  displaySize: "default",
  isWidthLimited: false,
  isIndented: false,
  variant: "default"
};

// node_modules/@patternfly/react-core/dist/esm/components/ExpandableSection/ExpandableSectionToggle.js
var import_jsx_runtime135 = __toESM(require_jsx_runtime());
var ExpandableSectionToggle = (_a) => {
  var { children, className = "", isExpanded = false, onToggle, contentId, toggleId, direction = "down", hasTruncatedContent = false, isDetached } = _a, props = __rest(_a, ["children", "className", "isExpanded", "onToggle", "contentId", "toggleId", "direction", "hasTruncatedContent", "isDetached"]);
  return (0, import_jsx_runtime135.jsx)("div", Object.assign({ className: css(expandable_section_default.expandableSection, isExpanded && expandable_section_default.modifiers.expanded, hasTruncatedContent && expandable_section_default.modifiers.truncate, isDetached && "pf-m-detached", className) }, props, { children: (0, import_jsx_runtime135.jsx)("div", { className: `${expandable_section_default.expandableSection}__toggle`, children: (0, import_jsx_runtime135.jsx)(Button, Object.assign({ variant: "link" }, hasTruncatedContent && { isInline: true }, { "aria-expanded": isExpanded, "aria-controls": contentId, onClick: () => onToggle(!isExpanded), id: toggleId }, !hasTruncatedContent && {
    icon: (0, import_jsx_runtime135.jsx)("span", { className: css(
      expandable_section_default.expandableSectionToggleIcon,
      isExpanded && direction === "up" && expandable_section_default.modifiers.expandTop
      // TODO: next breaking change move this class to the outer styles.expandableSection wrapper
    ), children: (0, import_jsx_runtime135.jsx)(angle_right_icon_default, {}) })
  }, { children })) }) }));
};
ExpandableSectionToggle.displayName = "ExpandableSectionToggle";

// node_modules/@patternfly/react-core/dist/esm/components/FileUpload/FileUploadField.js
var import_jsx_runtime137 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/FileUpload/file-upload.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/FileUpload/file-upload.css";
var file_upload_default = {
  "button": "pf-v6-c-button",
  "fileUpload": "pf-v6-c-file-upload",
  "fileUploadFileDetails": "pf-v6-c-file-upload__file-details",
  "fileUploadFileDetailsSpinner": "pf-v6-c-file-upload__file-details-spinner",
  "fileUploadFileSelect": "pf-v6-c-file-upload__file-select",
  "formControl": "pf-v6-c-form-control",
  "modifiers": {
    "dragHover": "pf-m-drag-hover",
    "loading": "pf-m-loading",
    "control": "pf-m-control"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/TextArea/TextArea.js
var import_jsx_runtime136 = __toESM(require_jsx_runtime());
var import_react56 = __toESM(require_react());
var TextAreResizeOrientation;
(function(TextAreResizeOrientation2) {
  TextAreResizeOrientation2["horizontal"] = "horizontal";
  TextAreResizeOrientation2["vertical"] = "vertical";
  TextAreResizeOrientation2["both"] = "both";
  TextAreResizeOrientation2["none"] = "none";
})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));
var TextAreaReadOnlyVariant;
(function(TextAreaReadOnlyVariant2) {
  TextAreaReadOnlyVariant2["default"] = "default";
  TextAreaReadOnlyVariant2["plain"] = "plain";
})(TextAreaReadOnlyVariant || (TextAreaReadOnlyVariant = {}));
var TextAreaBase = class extends import_react56.Component {
  constructor(props) {
    super(props);
    this.inputRef = (0, import_react56.createRef)();
    this.setAutoHeight = (field) => {
      const parent = field.parentElement;
      parent.style.setProperty("height", "inherit");
      const computed = window.getComputedStyle(field);
      const parentComputed = window.getComputedStyle(parent);
      const height = parseInt(computed.getPropertyValue("border-top-width")) + field.scrollHeight + parseInt(computed.getPropertyValue("border-bottom-width")) + parseInt(parentComputed.getPropertyValue("padding-top")) + parseInt(parentComputed.getPropertyValue("padding-bottom"));
      parent.style.setProperty("height", `${height}px`);
    };
    this.handleChange = (event) => {
      const field = event.currentTarget;
      if (this.props.autoResize && canUseDOM) {
        this.setAutoHeight(field);
      }
      if (this.props.onChange) {
        this.props.onChange(event, field.value);
      }
    };
    if (!props.id && !props["aria-label"]) {
      console.error("TextArea: TextArea requires either an id or aria-label to be specified");
    }
  }
  componentDidMount() {
    const inputRef = this.props.innerRef || this.inputRef;
    if (this.props.autoResize && canUseDOM) {
      const field = inputRef.current;
      this.setAutoHeight(field);
    }
  }
  render() {
    const _a = this.props, {
      className,
      value,
      validated,
      isRequired,
      isDisabled,
      readOnlyVariant,
      resizeOrientation,
      innerRef,
      disabled,
      /* eslint-disable @typescript-eslint/no-unused-vars */
      autoResize,
      onChange,
      /* eslint-enable @typescript-eslint/no-unused-vars */
      onBlur,
      onFocus
    } = _a, props = __rest(_a, ["className", "value", "validated", "isRequired", "isDisabled", "readOnlyVariant", "resizeOrientation", "innerRef", "disabled", "autoResize", "onChange", "onBlur", "onFocus"]);
    const orientation = resizeOrientation !== "none" ? `resize${capitalize(resizeOrientation)}` : void 0;
    const hasStatusIcon = ["success", "error", "warning"].includes(validated);
    return (0, import_jsx_runtime136.jsxs)("span", { className: css(form_control_default.formControl, form_control_default.modifiers.textarea, readOnlyVariant && form_control_default.modifiers.readonly, readOnlyVariant === "plain" && form_control_default.modifiers.plain, resizeOrientation !== "none" && form_control_default.modifiers[orientation], isDisabled && form_control_default.modifiers.disabled, hasStatusIcon && form_control_default.modifiers[validated], className), children: [(0, import_jsx_runtime136.jsx)("textarea", Object.assign({ onChange: this.handleChange, onFocus, onBlur }, typeof this.props.defaultValue !== "string" && { value }, { "aria-invalid": validated === ValidatedOptions.error, required: isRequired, disabled: isDisabled || disabled, readOnly: !!readOnlyVariant, ref: innerRef || this.inputRef }, props)), hasStatusIcon && (0, import_jsx_runtime136.jsx)("span", { className: css(form_control_default.formControlUtilities), children: (0, import_jsx_runtime136.jsx)(FormControlIcon, { status: validated }) })] });
  }
};
TextAreaBase.displayName = "TextArea";
TextAreaBase.defaultProps = {
  innerRef: (0, import_react56.createRef)(),
  className: "",
  isRequired: false,
  isDisabled: false,
  validated: "default",
  resizeOrientation: "both",
  "aria-label": null
};
var TextArea = (0, import_react56.forwardRef)((props, ref) => (0, import_jsx_runtime136.jsx)(TextAreaBase, Object.assign({}, props, { innerRef: ref })));
TextArea.displayName = "TextArea";

// node_modules/@patternfly/react-core/dist/esm/helpers/fileUtils.js
var fileReaderType;
(function(fileReaderType2) {
  fileReaderType2["text"] = "text";
  fileReaderType2["dataURL"] = "dataURL";
})(fileReaderType || (fileReaderType = {}));
function readFile(fileHandle, type) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => resolve(reader.result);
    reader.onerror = () => reject(reader.error);
    if (type === fileReaderType.text) {
      reader.readAsText(fileHandle);
    } else if (type === fileReaderType.dataURL) {
      reader.readAsDataURL(fileHandle);
    } else {
      reject("unknown type");
    }
  });
}

// node_modules/@patternfly/react-core/dist/esm/components/FileUpload/FileUploadField.js
var FileUploadField = (_a) => {
  var { id, name, type, value = "", filename = "", onBrowseButtonClick = () => {
  }, onClearButtonClick = () => {
  }, onTextAreaClick, onTextChange, onTextAreaBlur, textAreaPlaceholder = "", className = "", isDisabled = false, isReadOnly = false, isLoading = false, spinnerAriaValueText, isRequired = false, isDragActive = false, validated = "default", "aria-label": ariaLabel = "File upload", filenamePlaceholder = "Drag a file here or browse to upload", filenameAriaLabel = filename ? "Read only filename" : filenamePlaceholder, browseButtonText = "Browse...", browseButtonAriaDescribedby, clearButtonText = "Clear", isBrowseButtonDisabled = false, isClearButtonDisabled = !filename && !value, containerRef = null, allowEditingUploadedText = false, hideDefaultPreview = false, children = null } = _a, props = __rest(_a, ["id", "name", "type", "value", "filename", "onBrowseButtonClick", "onClearButtonClick", "onTextAreaClick", "onTextChange", "onTextAreaBlur", "textAreaPlaceholder", "className", "isDisabled", "isReadOnly", "isLoading", "spinnerAriaValueText", "isRequired", "isDragActive", "validated", "aria-label", "filenamePlaceholder", "filenameAriaLabel", "browseButtonText", "browseButtonAriaDescribedby", "clearButtonText", "isBrowseButtonDisabled", "isClearButtonDisabled", "containerRef", "allowEditingUploadedText", "hideDefaultPreview", "children"]);
  const onTextAreaChange = (event, newValue) => {
    onTextChange === null || onTextChange === void 0 ? void 0 : onTextChange(event, newValue);
  };
  return (0, import_jsx_runtime137.jsxs)("div", Object.assign({ className: css(file_upload_default.fileUpload, isDragActive && file_upload_default.modifiers.dragHover, isLoading && file_upload_default.modifiers.loading, className), ref: containerRef }, props, { children: [(0, import_jsx_runtime137.jsx)("div", { className: file_upload_default.fileUploadFileSelect, children: (0, import_jsx_runtime137.jsxs)(InputGroup, { children: [(0, import_jsx_runtime137.jsx)(InputGroupItem, { isFill: true, children: (0, import_jsx_runtime137.jsx)(TextInput, {
    readOnlyVariant: "default",
    isDisabled,
    id: `${id}-filename`,
    name: name || `${id}-filename`,
    "aria-label": filenameAriaLabel,
    placeholder: filenamePlaceholder,
    value: filename
  }) }), (0, import_jsx_runtime137.jsx)(InputGroupItem, { children: (0, import_jsx_runtime137.jsx)(Button, { variant: ButtonVariant.control, onClick: onBrowseButtonClick, isDisabled: isDisabled || isBrowseButtonDisabled, "aria-describedby": browseButtonAriaDescribedby, children: browseButtonText }) }), (0, import_jsx_runtime137.jsx)(InputGroupItem, { children: (0, import_jsx_runtime137.jsx)(Button, { variant: ButtonVariant.control, isDisabled: isDisabled || isClearButtonDisabled, onClick: onClearButtonClick, children: clearButtonText }) })] }) }), (0, import_jsx_runtime137.jsxs)("div", { className: file_upload_default.fileUploadFileDetails, children: [!hideDefaultPreview && type === fileReaderType.text && (0, import_jsx_runtime137.jsx)(TextArea, { readOnly: isReadOnly || !!filename && !allowEditingUploadedText, disabled: isDisabled, isRequired, resizeOrientation: TextAreResizeOrientation.vertical, validated, id, "aria-label": ariaLabel, value, onChange: onTextAreaChange, onClick: onTextAreaClick, onBlur: onTextAreaBlur, placeholder: textAreaPlaceholder }), isLoading && (0, import_jsx_runtime137.jsx)("div", { className: file_upload_default.fileUploadFileDetailsSpinner, children: (0, import_jsx_runtime137.jsx)(Spinner, { size: spinnerSize.lg, "aria-valuetext": spinnerAriaValueText }) })] }), children] }));
};
FileUploadField.displayName = "FileUploadField";

// node_modules/@patternfly/react-core/dist/esm/components/FileUpload/FileUpload.js
var import_jsx_runtime138 = __toESM(require_jsx_runtime());

// node_modules/react-dropzone/dist/es/index.js
var import_react57 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/file-selector/dist/es2015/file.js
var COMMON_MIME_TYPES = /* @__PURE__ */ new Map([
  // https://github.com/guzzle/psr7/blob/2d9260799e713f1c475d3c5fdc3d6561ff7441b2/src/MimeType.php
  ["1km", "application/vnd.1000minds.decision-model+xml"],
  ["3dml", "text/vnd.in3d.3dml"],
  ["3ds", "image/x-3ds"],
  ["3g2", "video/3gpp2"],
  ["3gp", "video/3gp"],
  ["3gpp", "video/3gpp"],
  ["3mf", "model/3mf"],
  ["7z", "application/x-7z-compressed"],
  ["7zip", "application/x-7z-compressed"],
  ["123", "application/vnd.lotus-1-2-3"],
  ["aab", "application/x-authorware-bin"],
  ["aac", "audio/x-acc"],
  ["aam", "application/x-authorware-map"],
  ["aas", "application/x-authorware-seg"],
  ["abw", "application/x-abiword"],
  ["ac", "application/vnd.nokia.n-gage.ac+xml"],
  ["ac3", "audio/ac3"],
  ["acc", "application/vnd.americandynamics.acc"],
  ["ace", "application/x-ace-compressed"],
  ["acu", "application/vnd.acucobol"],
  ["acutc", "application/vnd.acucorp"],
  ["adp", "audio/adpcm"],
  ["aep", "application/vnd.audiograph"],
  ["afm", "application/x-font-type1"],
  ["afp", "application/vnd.ibm.modcap"],
  ["ahead", "application/vnd.ahead.space"],
  ["ai", "application/pdf"],
  ["aif", "audio/x-aiff"],
  ["aifc", "audio/x-aiff"],
  ["aiff", "audio/x-aiff"],
  ["air", "application/vnd.adobe.air-application-installer-package+zip"],
  ["ait", "application/vnd.dvb.ait"],
  ["ami", "application/vnd.amiga.ami"],
  ["amr", "audio/amr"],
  ["apk", "application/vnd.android.package-archive"],
  ["apng", "image/apng"],
  ["appcache", "text/cache-manifest"],
  ["application", "application/x-ms-application"],
  ["apr", "application/vnd.lotus-approach"],
  ["arc", "application/x-freearc"],
  ["arj", "application/x-arj"],
  ["asc", "application/pgp-signature"],
  ["asf", "video/x-ms-asf"],
  ["asm", "text/x-asm"],
  ["aso", "application/vnd.accpac.simply.aso"],
  ["asx", "video/x-ms-asf"],
  ["atc", "application/vnd.acucorp"],
  ["atom", "application/atom+xml"],
  ["atomcat", "application/atomcat+xml"],
  ["atomdeleted", "application/atomdeleted+xml"],
  ["atomsvc", "application/atomsvc+xml"],
  ["atx", "application/vnd.antix.game-component"],
  ["au", "audio/x-au"],
  ["avi", "video/x-msvideo"],
  ["avif", "image/avif"],
  ["aw", "application/applixware"],
  ["azf", "application/vnd.airzip.filesecure.azf"],
  ["azs", "application/vnd.airzip.filesecure.azs"],
  ["azv", "image/vnd.airzip.accelerator.azv"],
  ["azw", "application/vnd.amazon.ebook"],
  ["b16", "image/vnd.pco.b16"],
  ["bat", "application/x-msdownload"],
  ["bcpio", "application/x-bcpio"],
  ["bdf", "application/x-font-bdf"],
  ["bdm", "application/vnd.syncml.dm+wbxml"],
  ["bdoc", "application/x-bdoc"],
  ["bed", "application/vnd.realvnc.bed"],
  ["bh2", "application/vnd.fujitsu.oasysprs"],
  ["bin", "application/octet-stream"],
  ["blb", "application/x-blorb"],
  ["blorb", "application/x-blorb"],
  ["bmi", "application/vnd.bmi"],
  ["bmml", "application/vnd.balsamiq.bmml+xml"],
  ["bmp", "image/bmp"],
  ["book", "application/vnd.framemaker"],
  ["box", "application/vnd.previewsystems.box"],
  ["boz", "application/x-bzip2"],
  ["bpk", "application/octet-stream"],
  ["bpmn", "application/octet-stream"],
  ["bsp", "model/vnd.valve.source.compiled-map"],
  ["btif", "image/prs.btif"],
  ["buffer", "application/octet-stream"],
  ["bz", "application/x-bzip"],
  ["bz2", "application/x-bzip2"],
  ["c", "text/x-c"],
  ["c4d", "application/vnd.clonk.c4group"],
  ["c4f", "application/vnd.clonk.c4group"],
  ["c4g", "application/vnd.clonk.c4group"],
  ["c4p", "application/vnd.clonk.c4group"],
  ["c4u", "application/vnd.clonk.c4group"],
  ["c11amc", "application/vnd.cluetrust.cartomobile-config"],
  ["c11amz", "application/vnd.cluetrust.cartomobile-config-pkg"],
  ["cab", "application/vnd.ms-cab-compressed"],
  ["caf", "audio/x-caf"],
  ["cap", "application/vnd.tcpdump.pcap"],
  ["car", "application/vnd.curl.car"],
  ["cat", "application/vnd.ms-pki.seccat"],
  ["cb7", "application/x-cbr"],
  ["cba", "application/x-cbr"],
  ["cbr", "application/x-cbr"],
  ["cbt", "application/x-cbr"],
  ["cbz", "application/x-cbr"],
  ["cc", "text/x-c"],
  ["cco", "application/x-cocoa"],
  ["cct", "application/x-director"],
  ["ccxml", "application/ccxml+xml"],
  ["cdbcmsg", "application/vnd.contact.cmsg"],
  ["cda", "application/x-cdf"],
  ["cdf", "application/x-netcdf"],
  ["cdfx", "application/cdfx+xml"],
  ["cdkey", "application/vnd.mediastation.cdkey"],
  ["cdmia", "application/cdmi-capability"],
  ["cdmic", "application/cdmi-container"],
  ["cdmid", "application/cdmi-domain"],
  ["cdmio", "application/cdmi-object"],
  ["cdmiq", "application/cdmi-queue"],
  ["cdr", "application/cdr"],
  ["cdx", "chemical/x-cdx"],
  ["cdxml", "application/vnd.chemdraw+xml"],
  ["cdy", "application/vnd.cinderella"],
  ["cer", "application/pkix-cert"],
  ["cfs", "application/x-cfs-compressed"],
  ["cgm", "image/cgm"],
  ["chat", "application/x-chat"],
  ["chm", "application/vnd.ms-htmlhelp"],
  ["chrt", "application/vnd.kde.kchart"],
  ["cif", "chemical/x-cif"],
  ["cii", "application/vnd.anser-web-certificate-issue-initiation"],
  ["cil", "application/vnd.ms-artgalry"],
  ["cjs", "application/node"],
  ["cla", "application/vnd.claymore"],
  ["class", "application/octet-stream"],
  ["clkk", "application/vnd.crick.clicker.keyboard"],
  ["clkp", "application/vnd.crick.clicker.palette"],
  ["clkt", "application/vnd.crick.clicker.template"],
  ["clkw", "application/vnd.crick.clicker.wordbank"],
  ["clkx", "application/vnd.crick.clicker"],
  ["clp", "application/x-msclip"],
  ["cmc", "application/vnd.cosmocaller"],
  ["cmdf", "chemical/x-cmdf"],
  ["cml", "chemical/x-cml"],
  ["cmp", "application/vnd.yellowriver-custom-menu"],
  ["cmx", "image/x-cmx"],
  ["cod", "application/vnd.rim.cod"],
  ["coffee", "text/coffeescript"],
  ["com", "application/x-msdownload"],
  ["conf", "text/plain"],
  ["cpio", "application/x-cpio"],
  ["cpp", "text/x-c"],
  ["cpt", "application/mac-compactpro"],
  ["crd", "application/x-mscardfile"],
  ["crl", "application/pkix-crl"],
  ["crt", "application/x-x509-ca-cert"],
  ["crx", "application/x-chrome-extension"],
  ["cryptonote", "application/vnd.rig.cryptonote"],
  ["csh", "application/x-csh"],
  ["csl", "application/vnd.citationstyles.style+xml"],
  ["csml", "chemical/x-csml"],
  ["csp", "application/vnd.commonspace"],
  ["csr", "application/octet-stream"],
  ["css", "text/css"],
  ["cst", "application/x-director"],
  ["csv", "text/csv"],
  ["cu", "application/cu-seeme"],
  ["curl", "text/vnd.curl"],
  ["cww", "application/prs.cww"],
  ["cxt", "application/x-director"],
  ["cxx", "text/x-c"],
  ["dae", "model/vnd.collada+xml"],
  ["daf", "application/vnd.mobius.daf"],
  ["dart", "application/vnd.dart"],
  ["dataless", "application/vnd.fdsn.seed"],
  ["davmount", "application/davmount+xml"],
  ["dbf", "application/vnd.dbf"],
  ["dbk", "application/docbook+xml"],
  ["dcr", "application/x-director"],
  ["dcurl", "text/vnd.curl.dcurl"],
  ["dd2", "application/vnd.oma.dd2+xml"],
  ["ddd", "application/vnd.fujixerox.ddd"],
  ["ddf", "application/vnd.syncml.dmddf+xml"],
  ["dds", "image/vnd.ms-dds"],
  ["deb", "application/x-debian-package"],
  ["def", "text/plain"],
  ["deploy", "application/octet-stream"],
  ["der", "application/x-x509-ca-cert"],
  ["dfac", "application/vnd.dreamfactory"],
  ["dgc", "application/x-dgc-compressed"],
  ["dic", "text/x-c"],
  ["dir", "application/x-director"],
  ["dis", "application/vnd.mobius.dis"],
  ["disposition-notification", "message/disposition-notification"],
  ["dist", "application/octet-stream"],
  ["distz", "application/octet-stream"],
  ["djv", "image/vnd.djvu"],
  ["djvu", "image/vnd.djvu"],
  ["dll", "application/octet-stream"],
  ["dmg", "application/x-apple-diskimage"],
  ["dmn", "application/octet-stream"],
  ["dmp", "application/vnd.tcpdump.pcap"],
  ["dms", "application/octet-stream"],
  ["dna", "application/vnd.dna"],
  ["doc", "application/msword"],
  ["docm", "application/vnd.ms-word.template.macroEnabled.12"],
  ["docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"],
  ["dot", "application/msword"],
  ["dotm", "application/vnd.ms-word.template.macroEnabled.12"],
  ["dotx", "application/vnd.openxmlformats-officedocument.wordprocessingml.template"],
  ["dp", "application/vnd.osgi.dp"],
  ["dpg", "application/vnd.dpgraph"],
  ["dra", "audio/vnd.dra"],
  ["drle", "image/dicom-rle"],
  ["dsc", "text/prs.lines.tag"],
  ["dssc", "application/dssc+der"],
  ["dtb", "application/x-dtbook+xml"],
  ["dtd", "application/xml-dtd"],
  ["dts", "audio/vnd.dts"],
  ["dtshd", "audio/vnd.dts.hd"],
  ["dump", "application/octet-stream"],
  ["dvb", "video/vnd.dvb.file"],
  ["dvi", "application/x-dvi"],
  ["dwd", "application/atsc-dwd+xml"],
  ["dwf", "model/vnd.dwf"],
  ["dwg", "image/vnd.dwg"],
  ["dxf", "image/vnd.dxf"],
  ["dxp", "application/vnd.spotfire.dxp"],
  ["dxr", "application/x-director"],
  ["ear", "application/java-archive"],
  ["ecelp4800", "audio/vnd.nuera.ecelp4800"],
  ["ecelp7470", "audio/vnd.nuera.ecelp7470"],
  ["ecelp9600", "audio/vnd.nuera.ecelp9600"],
  ["ecma", "application/ecmascript"],
  ["edm", "application/vnd.novadigm.edm"],
  ["edx", "application/vnd.novadigm.edx"],
  ["efif", "application/vnd.picsel"],
  ["ei6", "application/vnd.pg.osasli"],
  ["elc", "application/octet-stream"],
  ["emf", "image/emf"],
  ["eml", "message/rfc822"],
  ["emma", "application/emma+xml"],
  ["emotionml", "application/emotionml+xml"],
  ["emz", "application/x-msmetafile"],
  ["eol", "audio/vnd.digital-winds"],
  ["eot", "application/vnd.ms-fontobject"],
  ["eps", "application/postscript"],
  ["epub", "application/epub+zip"],
  ["es", "application/ecmascript"],
  ["es3", "application/vnd.eszigno3+xml"],
  ["esa", "application/vnd.osgi.subsystem"],
  ["esf", "application/vnd.epson.esf"],
  ["et3", "application/vnd.eszigno3+xml"],
  ["etx", "text/x-setext"],
  ["eva", "application/x-eva"],
  ["evy", "application/x-envoy"],
  ["exe", "application/octet-stream"],
  ["exi", "application/exi"],
  ["exp", "application/express"],
  ["exr", "image/aces"],
  ["ext", "application/vnd.novadigm.ext"],
  ["ez", "application/andrew-inset"],
  ["ez2", "application/vnd.ezpix-album"],
  ["ez3", "application/vnd.ezpix-package"],
  ["f", "text/x-fortran"],
  ["f4v", "video/mp4"],
  ["f77", "text/x-fortran"],
  ["f90", "text/x-fortran"],
  ["fbs", "image/vnd.fastbidsheet"],
  ["fcdt", "application/vnd.adobe.formscentral.fcdt"],
  ["fcs", "application/vnd.isac.fcs"],
  ["fdf", "application/vnd.fdf"],
  ["fdt", "application/fdt+xml"],
  ["fe_launch", "application/vnd.denovo.fcselayout-link"],
  ["fg5", "application/vnd.fujitsu.oasysgp"],
  ["fgd", "application/x-director"],
  ["fh", "image/x-freehand"],
  ["fh4", "image/x-freehand"],
  ["fh5", "image/x-freehand"],
  ["fh7", "image/x-freehand"],
  ["fhc", "image/x-freehand"],
  ["fig", "application/x-xfig"],
  ["fits", "image/fits"],
  ["flac", "audio/x-flac"],
  ["fli", "video/x-fli"],
  ["flo", "application/vnd.micrografx.flo"],
  ["flv", "video/x-flv"],
  ["flw", "application/vnd.kde.kivio"],
  ["flx", "text/vnd.fmi.flexstor"],
  ["fly", "text/vnd.fly"],
  ["fm", "application/vnd.framemaker"],
  ["fnc", "application/vnd.frogans.fnc"],
  ["fo", "application/vnd.software602.filler.form+xml"],
  ["for", "text/x-fortran"],
  ["fpx", "image/vnd.fpx"],
  ["frame", "application/vnd.framemaker"],
  ["fsc", "application/vnd.fsc.weblaunch"],
  ["fst", "image/vnd.fst"],
  ["ftc", "application/vnd.fluxtime.clip"],
  ["fti", "application/vnd.anser-web-funds-transfer-initiation"],
  ["fvt", "video/vnd.fvt"],
  ["fxp", "application/vnd.adobe.fxp"],
  ["fxpl", "application/vnd.adobe.fxp"],
  ["fzs", "application/vnd.fuzzysheet"],
  ["g2w", "application/vnd.geoplan"],
  ["g3", "image/g3fax"],
  ["g3w", "application/vnd.geospace"],
  ["gac", "application/vnd.groove-account"],
  ["gam", "application/x-tads"],
  ["gbr", "application/rpki-ghostbusters"],
  ["gca", "application/x-gca-compressed"],
  ["gdl", "model/vnd.gdl"],
  ["gdoc", "application/vnd.google-apps.document"],
  ["geo", "application/vnd.dynageo"],
  ["geojson", "application/geo+json"],
  ["gex", "application/vnd.geometry-explorer"],
  ["ggb", "application/vnd.geogebra.file"],
  ["ggt", "application/vnd.geogebra.tool"],
  ["ghf", "application/vnd.groove-help"],
  ["gif", "image/gif"],
  ["gim", "application/vnd.groove-identity-message"],
  ["glb", "model/gltf-binary"],
  ["gltf", "model/gltf+json"],
  ["gml", "application/gml+xml"],
  ["gmx", "application/vnd.gmx"],
  ["gnumeric", "application/x-gnumeric"],
  ["gpg", "application/gpg-keys"],
  ["gph", "application/vnd.flographit"],
  ["gpx", "application/gpx+xml"],
  ["gqf", "application/vnd.grafeq"],
  ["gqs", "application/vnd.grafeq"],
  ["gram", "application/srgs"],
  ["gramps", "application/x-gramps-xml"],
  ["gre", "application/vnd.geometry-explorer"],
  ["grv", "application/vnd.groove-injector"],
  ["grxml", "application/srgs+xml"],
  ["gsf", "application/x-font-ghostscript"],
  ["gsheet", "application/vnd.google-apps.spreadsheet"],
  ["gslides", "application/vnd.google-apps.presentation"],
  ["gtar", "application/x-gtar"],
  ["gtm", "application/vnd.groove-tool-message"],
  ["gtw", "model/vnd.gtw"],
  ["gv", "text/vnd.graphviz"],
  ["gxf", "application/gxf"],
  ["gxt", "application/vnd.geonext"],
  ["gz", "application/gzip"],
  ["gzip", "application/gzip"],
  ["h", "text/x-c"],
  ["h261", "video/h261"],
  ["h263", "video/h263"],
  ["h264", "video/h264"],
  ["hal", "application/vnd.hal+xml"],
  ["hbci", "application/vnd.hbci"],
  ["hbs", "text/x-handlebars-template"],
  ["hdd", "application/x-virtualbox-hdd"],
  ["hdf", "application/x-hdf"],
  ["heic", "image/heic"],
  ["heics", "image/heic-sequence"],
  ["heif", "image/heif"],
  ["heifs", "image/heif-sequence"],
  ["hej2", "image/hej2k"],
  ["held", "application/atsc-held+xml"],
  ["hh", "text/x-c"],
  ["hjson", "application/hjson"],
  ["hlp", "application/winhlp"],
  ["hpgl", "application/vnd.hp-hpgl"],
  ["hpid", "application/vnd.hp-hpid"],
  ["hps", "application/vnd.hp-hps"],
  ["hqx", "application/mac-binhex40"],
  ["hsj2", "image/hsj2"],
  ["htc", "text/x-component"],
  ["htke", "application/vnd.kenameaapp"],
  ["htm", "text/html"],
  ["html", "text/html"],
  ["hvd", "application/vnd.yamaha.hv-dic"],
  ["hvp", "application/vnd.yamaha.hv-voice"],
  ["hvs", "application/vnd.yamaha.hv-script"],
  ["i2g", "application/vnd.intergeo"],
  ["icc", "application/vnd.iccprofile"],
  ["ice", "x-conference/x-cooltalk"],
  ["icm", "application/vnd.iccprofile"],
  ["ico", "image/x-icon"],
  ["ics", "text/calendar"],
  ["ief", "image/ief"],
  ["ifb", "text/calendar"],
  ["ifm", "application/vnd.shana.informed.formdata"],
  ["iges", "model/iges"],
  ["igl", "application/vnd.igloader"],
  ["igm", "application/vnd.insors.igm"],
  ["igs", "model/iges"],
  ["igx", "application/vnd.micrografx.igx"],
  ["iif", "application/vnd.shana.informed.interchange"],
  ["img", "application/octet-stream"],
  ["imp", "application/vnd.accpac.simply.imp"],
  ["ims", "application/vnd.ms-ims"],
  ["in", "text/plain"],
  ["ini", "text/plain"],
  ["ink", "application/inkml+xml"],
  ["inkml", "application/inkml+xml"],
  ["install", "application/x-install-instructions"],
  ["iota", "application/vnd.astraea-software.iota"],
  ["ipfix", "application/ipfix"],
  ["ipk", "application/vnd.shana.informed.package"],
  ["irm", "application/vnd.ibm.rights-management"],
  ["irp", "application/vnd.irepository.package+xml"],
  ["iso", "application/x-iso9660-image"],
  ["itp", "application/vnd.shana.informed.formtemplate"],
  ["its", "application/its+xml"],
  ["ivp", "application/vnd.immervision-ivp"],
  ["ivu", "application/vnd.immervision-ivu"],
  ["jad", "text/vnd.sun.j2me.app-descriptor"],
  ["jade", "text/jade"],
  ["jam", "application/vnd.jam"],
  ["jar", "application/java-archive"],
  ["jardiff", "application/x-java-archive-diff"],
  ["java", "text/x-java-source"],
  ["jhc", "image/jphc"],
  ["jisp", "application/vnd.jisp"],
  ["jls", "image/jls"],
  ["jlt", "application/vnd.hp-jlyt"],
  ["jng", "image/x-jng"],
  ["jnlp", "application/x-java-jnlp-file"],
  ["joda", "application/vnd.joost.joda-archive"],
  ["jp2", "image/jp2"],
  ["jpe", "image/jpeg"],
  ["jpeg", "image/jpeg"],
  ["jpf", "image/jpx"],
  ["jpg", "image/jpeg"],
  ["jpg2", "image/jp2"],
  ["jpgm", "video/jpm"],
  ["jpgv", "video/jpeg"],
  ["jph", "image/jph"],
  ["jpm", "video/jpm"],
  ["jpx", "image/jpx"],
  ["js", "application/javascript"],
  ["json", "application/json"],
  ["json5", "application/json5"],
  ["jsonld", "application/ld+json"],
  // https://jsonlines.org/
  ["jsonl", "application/jsonl"],
  ["jsonml", "application/jsonml+json"],
  ["jsx", "text/jsx"],
  ["jxr", "image/jxr"],
  ["jxra", "image/jxra"],
  ["jxrs", "image/jxrs"],
  ["jxs", "image/jxs"],
  ["jxsc", "image/jxsc"],
  ["jxsi", "image/jxsi"],
  ["jxss", "image/jxss"],
  ["kar", "audio/midi"],
  ["karbon", "application/vnd.kde.karbon"],
  ["kdb", "application/octet-stream"],
  ["kdbx", "application/x-keepass2"],
  ["key", "application/x-iwork-keynote-sffkey"],
  ["kfo", "application/vnd.kde.kformula"],
  ["kia", "application/vnd.kidspiration"],
  ["kml", "application/vnd.google-earth.kml+xml"],
  ["kmz", "application/vnd.google-earth.kmz"],
  ["kne", "application/vnd.kinar"],
  ["knp", "application/vnd.kinar"],
  ["kon", "application/vnd.kde.kontour"],
  ["kpr", "application/vnd.kde.kpresenter"],
  ["kpt", "application/vnd.kde.kpresenter"],
  ["kpxx", "application/vnd.ds-keypoint"],
  ["ksp", "application/vnd.kde.kspread"],
  ["ktr", "application/vnd.kahootz"],
  ["ktx", "image/ktx"],
  ["ktx2", "image/ktx2"],
  ["ktz", "application/vnd.kahootz"],
  ["kwd", "application/vnd.kde.kword"],
  ["kwt", "application/vnd.kde.kword"],
  ["lasxml", "application/vnd.las.las+xml"],
  ["latex", "application/x-latex"],
  ["lbd", "application/vnd.llamagraphics.life-balance.desktop"],
  ["lbe", "application/vnd.llamagraphics.life-balance.exchange+xml"],
  ["les", "application/vnd.hhe.lesson-player"],
  ["less", "text/less"],
  ["lgr", "application/lgr+xml"],
  ["lha", "application/octet-stream"],
  ["link66", "application/vnd.route66.link66+xml"],
  ["list", "text/plain"],
  ["list3820", "application/vnd.ibm.modcap"],
  ["listafp", "application/vnd.ibm.modcap"],
  ["litcoffee", "text/coffeescript"],
  ["lnk", "application/x-ms-shortcut"],
  ["log", "text/plain"],
  ["lostxml", "application/lost+xml"],
  ["lrf", "application/octet-stream"],
  ["lrm", "application/vnd.ms-lrm"],
  ["ltf", "application/vnd.frogans.ltf"],
  ["lua", "text/x-lua"],
  ["luac", "application/x-lua-bytecode"],
  ["lvp", "audio/vnd.lucent.voice"],
  ["lwp", "application/vnd.lotus-wordpro"],
  ["lzh", "application/octet-stream"],
  ["m1v", "video/mpeg"],
  ["m2a", "audio/mpeg"],
  ["m2v", "video/mpeg"],
  ["m3a", "audio/mpeg"],
  ["m3u", "text/plain"],
  ["m3u8", "application/vnd.apple.mpegurl"],
  ["m4a", "audio/x-m4a"],
  ["m4p", "application/mp4"],
  ["m4s", "video/iso.segment"],
  ["m4u", "application/vnd.mpegurl"],
  ["m4v", "video/x-m4v"],
  ["m13", "application/x-msmediaview"],
  ["m14", "application/x-msmediaview"],
  ["m21", "application/mp21"],
  ["ma", "application/mathematica"],
  ["mads", "application/mads+xml"],
  ["maei", "application/mmt-aei+xml"],
  ["mag", "application/vnd.ecowin.chart"],
  ["maker", "application/vnd.framemaker"],
  ["man", "text/troff"],
  ["manifest", "text/cache-manifest"],
  ["map", "application/json"],
  ["mar", "application/octet-stream"],
  ["markdown", "text/markdown"],
  ["mathml", "application/mathml+xml"],
  ["mb", "application/mathematica"],
  ["mbk", "application/vnd.mobius.mbk"],
  ["mbox", "application/mbox"],
  ["mc1", "application/vnd.medcalcdata"],
  ["mcd", "application/vnd.mcd"],
  ["mcurl", "text/vnd.curl.mcurl"],
  ["md", "text/markdown"],
  ["mdb", "application/x-msaccess"],
  ["mdi", "image/vnd.ms-modi"],
  ["mdx", "text/mdx"],
  ["me", "text/troff"],
  ["mesh", "model/mesh"],
  ["meta4", "application/metalink4+xml"],
  ["metalink", "application/metalink+xml"],
  ["mets", "application/mets+xml"],
  ["mfm", "application/vnd.mfmp"],
  ["mft", "application/rpki-manifest"],
  ["mgp", "application/vnd.osgeo.mapguide.package"],
  ["mgz", "application/vnd.proteus.magazine"],
  ["mid", "audio/midi"],
  ["midi", "audio/midi"],
  ["mie", "application/x-mie"],
  ["mif", "application/vnd.mif"],
  ["mime", "message/rfc822"],
  ["mj2", "video/mj2"],
  ["mjp2", "video/mj2"],
  ["mjs", "application/javascript"],
  ["mk3d", "video/x-matroska"],
  ["mka", "audio/x-matroska"],
  ["mkd", "text/x-markdown"],
  ["mks", "video/x-matroska"],
  ["mkv", "video/x-matroska"],
  ["mlp", "application/vnd.dolby.mlp"],
  ["mmd", "application/vnd.chipnuts.karaoke-mmd"],
  ["mmf", "application/vnd.smaf"],
  ["mml", "text/mathml"],
  ["mmr", "image/vnd.fujixerox.edmics-mmr"],
  ["mng", "video/x-mng"],
  ["mny", "application/x-msmoney"],
  ["mobi", "application/x-mobipocket-ebook"],
  ["mods", "application/mods+xml"],
  ["mov", "video/quicktime"],
  ["movie", "video/x-sgi-movie"],
  ["mp2", "audio/mpeg"],
  ["mp2a", "audio/mpeg"],
  ["mp3", "audio/mpeg"],
  ["mp4", "video/mp4"],
  ["mp4a", "audio/mp4"],
  ["mp4s", "application/mp4"],
  ["mp4v", "video/mp4"],
  ["mp21", "application/mp21"],
  ["mpc", "application/vnd.mophun.certificate"],
  ["mpd", "application/dash+xml"],
  ["mpe", "video/mpeg"],
  ["mpeg", "video/mpeg"],
  ["mpg", "video/mpeg"],
  ["mpg4", "video/mp4"],
  ["mpga", "audio/mpeg"],
  ["mpkg", "application/vnd.apple.installer+xml"],
  ["mpm", "application/vnd.blueice.multipass"],
  ["mpn", "application/vnd.mophun.application"],
  ["mpp", "application/vnd.ms-project"],
  ["mpt", "application/vnd.ms-project"],
  ["mpy", "application/vnd.ibm.minipay"],
  ["mqy", "application/vnd.mobius.mqy"],
  ["mrc", "application/marc"],
  ["mrcx", "application/marcxml+xml"],
  ["ms", "text/troff"],
  ["mscml", "application/mediaservercontrol+xml"],
  ["mseed", "application/vnd.fdsn.mseed"],
  ["mseq", "application/vnd.mseq"],
  ["msf", "application/vnd.epson.msf"],
  ["msg", "application/vnd.ms-outlook"],
  ["msh", "model/mesh"],
  ["msi", "application/x-msdownload"],
  ["msl", "application/vnd.mobius.msl"],
  ["msm", "application/octet-stream"],
  ["msp", "application/octet-stream"],
  ["msty", "application/vnd.muvee.style"],
  ["mtl", "model/mtl"],
  ["mts", "model/vnd.mts"],
  ["mus", "application/vnd.musician"],
  ["musd", "application/mmt-usd+xml"],
  ["musicxml", "application/vnd.recordare.musicxml+xml"],
  ["mvb", "application/x-msmediaview"],
  ["mvt", "application/vnd.mapbox-vector-tile"],
  ["mwf", "application/vnd.mfer"],
  ["mxf", "application/mxf"],
  ["mxl", "application/vnd.recordare.musicxml"],
  ["mxmf", "audio/mobile-xmf"],
  ["mxml", "application/xv+xml"],
  ["mxs", "application/vnd.triscape.mxs"],
  ["mxu", "video/vnd.mpegurl"],
  ["n-gage", "application/vnd.nokia.n-gage.symbian.install"],
  ["n3", "text/n3"],
  ["nb", "application/mathematica"],
  ["nbp", "application/vnd.wolfram.player"],
  ["nc", "application/x-netcdf"],
  ["ncx", "application/x-dtbncx+xml"],
  ["nfo", "text/x-nfo"],
  ["ngdat", "application/vnd.nokia.n-gage.data"],
  ["nitf", "application/vnd.nitf"],
  ["nlu", "application/vnd.neurolanguage.nlu"],
  ["nml", "application/vnd.enliven"],
  ["nnd", "application/vnd.noblenet-directory"],
  ["nns", "application/vnd.noblenet-sealer"],
  ["nnw", "application/vnd.noblenet-web"],
  ["npx", "image/vnd.net-fpx"],
  ["nq", "application/n-quads"],
  ["nsc", "application/x-conference"],
  ["nsf", "application/vnd.lotus-notes"],
  ["nt", "application/n-triples"],
  ["ntf", "application/vnd.nitf"],
  ["numbers", "application/x-iwork-numbers-sffnumbers"],
  ["nzb", "application/x-nzb"],
  ["oa2", "application/vnd.fujitsu.oasys2"],
  ["oa3", "application/vnd.fujitsu.oasys3"],
  ["oas", "application/vnd.fujitsu.oasys"],
  ["obd", "application/x-msbinder"],
  ["obgx", "application/vnd.openblox.game+xml"],
  ["obj", "model/obj"],
  ["oda", "application/oda"],
  ["odb", "application/vnd.oasis.opendocument.database"],
  ["odc", "application/vnd.oasis.opendocument.chart"],
  ["odf", "application/vnd.oasis.opendocument.formula"],
  ["odft", "application/vnd.oasis.opendocument.formula-template"],
  ["odg", "application/vnd.oasis.opendocument.graphics"],
  ["odi", "application/vnd.oasis.opendocument.image"],
  ["odm", "application/vnd.oasis.opendocument.text-master"],
  ["odp", "application/vnd.oasis.opendocument.presentation"],
  ["ods", "application/vnd.oasis.opendocument.spreadsheet"],
  ["odt", "application/vnd.oasis.opendocument.text"],
  ["oga", "audio/ogg"],
  ["ogex", "model/vnd.opengex"],
  ["ogg", "audio/ogg"],
  ["ogv", "video/ogg"],
  ["ogx", "application/ogg"],
  ["omdoc", "application/omdoc+xml"],
  ["onepkg", "application/onenote"],
  ["onetmp", "application/onenote"],
  ["onetoc", "application/onenote"],
  ["onetoc2", "application/onenote"],
  ["opf", "application/oebps-package+xml"],
  ["opml", "text/x-opml"],
  ["oprc", "application/vnd.palm"],
  ["opus", "audio/ogg"],
  ["org", "text/x-org"],
  ["osf", "application/vnd.yamaha.openscoreformat"],
  ["osfpvg", "application/vnd.yamaha.openscoreformat.osfpvg+xml"],
  ["osm", "application/vnd.openstreetmap.data+xml"],
  ["otc", "application/vnd.oasis.opendocument.chart-template"],
  ["otf", "font/otf"],
  ["otg", "application/vnd.oasis.opendocument.graphics-template"],
  ["oth", "application/vnd.oasis.opendocument.text-web"],
  ["oti", "application/vnd.oasis.opendocument.image-template"],
  ["otp", "application/vnd.oasis.opendocument.presentation-template"],
  ["ots", "application/vnd.oasis.opendocument.spreadsheet-template"],
  ["ott", "application/vnd.oasis.opendocument.text-template"],
  ["ova", "application/x-virtualbox-ova"],
  ["ovf", "application/x-virtualbox-ovf"],
  ["owl", "application/rdf+xml"],
  ["oxps", "application/oxps"],
  ["oxt", "application/vnd.openofficeorg.extension"],
  ["p", "text/x-pascal"],
  ["p7a", "application/x-pkcs7-signature"],
  ["p7b", "application/x-pkcs7-certificates"],
  ["p7c", "application/pkcs7-mime"],
  ["p7m", "application/pkcs7-mime"],
  ["p7r", "application/x-pkcs7-certreqresp"],
  ["p7s", "application/pkcs7-signature"],
  ["p8", "application/pkcs8"],
  ["p10", "application/x-pkcs10"],
  ["p12", "application/x-pkcs12"],
  ["pac", "application/x-ns-proxy-autoconfig"],
  ["pages", "application/x-iwork-pages-sffpages"],
  ["pas", "text/x-pascal"],
  ["paw", "application/vnd.pawaafile"],
  ["pbd", "application/vnd.powerbuilder6"],
  ["pbm", "image/x-portable-bitmap"],
  ["pcap", "application/vnd.tcpdump.pcap"],
  ["pcf", "application/x-font-pcf"],
  ["pcl", "application/vnd.hp-pcl"],
  ["pclxl", "application/vnd.hp-pclxl"],
  ["pct", "image/x-pict"],
  ["pcurl", "application/vnd.curl.pcurl"],
  ["pcx", "image/x-pcx"],
  ["pdb", "application/x-pilot"],
  ["pde", "text/x-processing"],
  ["pdf", "application/pdf"],
  ["pem", "application/x-x509-user-cert"],
  ["pfa", "application/x-font-type1"],
  ["pfb", "application/x-font-type1"],
  ["pfm", "application/x-font-type1"],
  ["pfr", "application/font-tdpfr"],
  ["pfx", "application/x-pkcs12"],
  ["pgm", "image/x-portable-graymap"],
  ["pgn", "application/x-chess-pgn"],
  ["pgp", "application/pgp"],
  ["php", "application/x-httpd-php"],
  ["php3", "application/x-httpd-php"],
  ["php4", "application/x-httpd-php"],
  ["phps", "application/x-httpd-php-source"],
  ["phtml", "application/x-httpd-php"],
  ["pic", "image/x-pict"],
  ["pkg", "application/octet-stream"],
  ["pki", "application/pkixcmp"],
  ["pkipath", "application/pkix-pkipath"],
  ["pkpass", "application/vnd.apple.pkpass"],
  ["pl", "application/x-perl"],
  ["plb", "application/vnd.3gpp.pic-bw-large"],
  ["plc", "application/vnd.mobius.plc"],
  ["plf", "application/vnd.pocketlearn"],
  ["pls", "application/pls+xml"],
  ["pm", "application/x-perl"],
  ["pml", "application/vnd.ctc-posml"],
  ["png", "image/png"],
  ["pnm", "image/x-portable-anymap"],
  ["portpkg", "application/vnd.macports.portpkg"],
  ["pot", "application/vnd.ms-powerpoint"],
  ["potm", "application/vnd.ms-powerpoint.presentation.macroEnabled.12"],
  ["potx", "application/vnd.openxmlformats-officedocument.presentationml.template"],
  ["ppa", "application/vnd.ms-powerpoint"],
  ["ppam", "application/vnd.ms-powerpoint.addin.macroEnabled.12"],
  ["ppd", "application/vnd.cups-ppd"],
  ["ppm", "image/x-portable-pixmap"],
  ["pps", "application/vnd.ms-powerpoint"],
  ["ppsm", "application/vnd.ms-powerpoint.slideshow.macroEnabled.12"],
  ["ppsx", "application/vnd.openxmlformats-officedocument.presentationml.slideshow"],
  ["ppt", "application/powerpoint"],
  ["pptm", "application/vnd.ms-powerpoint.presentation.macroEnabled.12"],
  ["pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"],
  ["pqa", "application/vnd.palm"],
  ["prc", "application/x-pilot"],
  ["pre", "application/vnd.lotus-freelance"],
  ["prf", "application/pics-rules"],
  ["provx", "application/provenance+xml"],
  ["ps", "application/postscript"],
  ["psb", "application/vnd.3gpp.pic-bw-small"],
  ["psd", "application/x-photoshop"],
  ["psf", "application/x-font-linux-psf"],
  ["pskcxml", "application/pskc+xml"],
  ["pti", "image/prs.pti"],
  ["ptid", "application/vnd.pvi.ptid1"],
  ["pub", "application/x-mspublisher"],
  ["pvb", "application/vnd.3gpp.pic-bw-var"],
  ["pwn", "application/vnd.3m.post-it-notes"],
  ["pya", "audio/vnd.ms-playready.media.pya"],
  ["pyv", "video/vnd.ms-playready.media.pyv"],
  ["qam", "application/vnd.epson.quickanime"],
  ["qbo", "application/vnd.intu.qbo"],
  ["qfx", "application/vnd.intu.qfx"],
  ["qps", "application/vnd.publishare-delta-tree"],
  ["qt", "video/quicktime"],
  ["qwd", "application/vnd.quark.quarkxpress"],
  ["qwt", "application/vnd.quark.quarkxpress"],
  ["qxb", "application/vnd.quark.quarkxpress"],
  ["qxd", "application/vnd.quark.quarkxpress"],
  ["qxl", "application/vnd.quark.quarkxpress"],
  ["qxt", "application/vnd.quark.quarkxpress"],
  ["ra", "audio/x-realaudio"],
  ["ram", "audio/x-pn-realaudio"],
  ["raml", "application/raml+yaml"],
  ["rapd", "application/route-apd+xml"],
  ["rar", "application/x-rar"],
  ["ras", "image/x-cmu-raster"],
  ["rcprofile", "application/vnd.ipunplugged.rcprofile"],
  ["rdf", "application/rdf+xml"],
  ["rdz", "application/vnd.data-vision.rdz"],
  ["relo", "application/p2p-overlay+xml"],
  ["rep", "application/vnd.businessobjects"],
  ["res", "application/x-dtbresource+xml"],
  ["rgb", "image/x-rgb"],
  ["rif", "application/reginfo+xml"],
  ["rip", "audio/vnd.rip"],
  ["ris", "application/x-research-info-systems"],
  ["rl", "application/resource-lists+xml"],
  ["rlc", "image/vnd.fujixerox.edmics-rlc"],
  ["rld", "application/resource-lists-diff+xml"],
  ["rm", "audio/x-pn-realaudio"],
  ["rmi", "audio/midi"],
  ["rmp", "audio/x-pn-realaudio-plugin"],
  ["rms", "application/vnd.jcp.javame.midlet-rms"],
  ["rmvb", "application/vnd.rn-realmedia-vbr"],
  ["rnc", "application/relax-ng-compact-syntax"],
  ["rng", "application/xml"],
  ["roa", "application/rpki-roa"],
  ["roff", "text/troff"],
  ["rp9", "application/vnd.cloanto.rp9"],
  ["rpm", "audio/x-pn-realaudio-plugin"],
  ["rpss", "application/vnd.nokia.radio-presets"],
  ["rpst", "application/vnd.nokia.radio-preset"],
  ["rq", "application/sparql-query"],
  ["rs", "application/rls-services+xml"],
  ["rsa", "application/x-pkcs7"],
  ["rsat", "application/atsc-rsat+xml"],
  ["rsd", "application/rsd+xml"],
  ["rsheet", "application/urc-ressheet+xml"],
  ["rss", "application/rss+xml"],
  ["rtf", "text/rtf"],
  ["rtx", "text/richtext"],
  ["run", "application/x-makeself"],
  ["rusd", "application/route-usd+xml"],
  ["rv", "video/vnd.rn-realvideo"],
  ["s", "text/x-asm"],
  ["s3m", "audio/s3m"],
  ["saf", "application/vnd.yamaha.smaf-audio"],
  ["sass", "text/x-sass"],
  ["sbml", "application/sbml+xml"],
  ["sc", "application/vnd.ibm.secure-container"],
  ["scd", "application/x-msschedule"],
  ["scm", "application/vnd.lotus-screencam"],
  ["scq", "application/scvp-cv-request"],
  ["scs", "application/scvp-cv-response"],
  ["scss", "text/x-scss"],
  ["scurl", "text/vnd.curl.scurl"],
  ["sda", "application/vnd.stardivision.draw"],
  ["sdc", "application/vnd.stardivision.calc"],
  ["sdd", "application/vnd.stardivision.impress"],
  ["sdkd", "application/vnd.solent.sdkm+xml"],
  ["sdkm", "application/vnd.solent.sdkm+xml"],
  ["sdp", "application/sdp"],
  ["sdw", "application/vnd.stardivision.writer"],
  ["sea", "application/octet-stream"],
  ["see", "application/vnd.seemail"],
  ["seed", "application/vnd.fdsn.seed"],
  ["sema", "application/vnd.sema"],
  ["semd", "application/vnd.semd"],
  ["semf", "application/vnd.semf"],
  ["senmlx", "application/senml+xml"],
  ["sensmlx", "application/sensml+xml"],
  ["ser", "application/java-serialized-object"],
  ["setpay", "application/set-payment-initiation"],
  ["setreg", "application/set-registration-initiation"],
  ["sfd-hdstx", "application/vnd.hydrostatix.sof-data"],
  ["sfs", "application/vnd.spotfire.sfs"],
  ["sfv", "text/x-sfv"],
  ["sgi", "image/sgi"],
  ["sgl", "application/vnd.stardivision.writer-global"],
  ["sgm", "text/sgml"],
  ["sgml", "text/sgml"],
  ["sh", "application/x-sh"],
  ["shar", "application/x-shar"],
  ["shex", "text/shex"],
  ["shf", "application/shf+xml"],
  ["shtml", "text/html"],
  ["sid", "image/x-mrsid-image"],
  ["sieve", "application/sieve"],
  ["sig", "application/pgp-signature"],
  ["sil", "audio/silk"],
  ["silo", "model/mesh"],
  ["sis", "application/vnd.symbian.install"],
  ["sisx", "application/vnd.symbian.install"],
  ["sit", "application/x-stuffit"],
  ["sitx", "application/x-stuffitx"],
  ["siv", "application/sieve"],
  ["skd", "application/vnd.koan"],
  ["skm", "application/vnd.koan"],
  ["skp", "application/vnd.koan"],
  ["skt", "application/vnd.koan"],
  ["sldm", "application/vnd.ms-powerpoint.slide.macroenabled.12"],
  ["sldx", "application/vnd.openxmlformats-officedocument.presentationml.slide"],
  ["slim", "text/slim"],
  ["slm", "text/slim"],
  ["sls", "application/route-s-tsid+xml"],
  ["slt", "application/vnd.epson.salt"],
  ["sm", "application/vnd.stepmania.stepchart"],
  ["smf", "application/vnd.stardivision.math"],
  ["smi", "application/smil"],
  ["smil", "application/smil"],
  ["smv", "video/x-smv"],
  ["smzip", "application/vnd.stepmania.package"],
  ["snd", "audio/basic"],
  ["snf", "application/x-font-snf"],
  ["so", "application/octet-stream"],
  ["spc", "application/x-pkcs7-certificates"],
  ["spdx", "text/spdx"],
  ["spf", "application/vnd.yamaha.smaf-phrase"],
  ["spl", "application/x-futuresplash"],
  ["spot", "text/vnd.in3d.spot"],
  ["spp", "application/scvp-vp-response"],
  ["spq", "application/scvp-vp-request"],
  ["spx", "audio/ogg"],
  ["sql", "application/x-sql"],
  ["src", "application/x-wais-source"],
  ["srt", "application/x-subrip"],
  ["sru", "application/sru+xml"],
  ["srx", "application/sparql-results+xml"],
  ["ssdl", "application/ssdl+xml"],
  ["sse", "application/vnd.kodak-descriptor"],
  ["ssf", "application/vnd.epson.ssf"],
  ["ssml", "application/ssml+xml"],
  ["sst", "application/octet-stream"],
  ["st", "application/vnd.sailingtracker.track"],
  ["stc", "application/vnd.sun.xml.calc.template"],
  ["std", "application/vnd.sun.xml.draw.template"],
  ["stf", "application/vnd.wt.stf"],
  ["sti", "application/vnd.sun.xml.impress.template"],
  ["stk", "application/hyperstudio"],
  ["stl", "model/stl"],
  ["stpx", "model/step+xml"],
  ["stpxz", "model/step-xml+zip"],
  ["stpz", "model/step+zip"],
  ["str", "application/vnd.pg.format"],
  ["stw", "application/vnd.sun.xml.writer.template"],
  ["styl", "text/stylus"],
  ["stylus", "text/stylus"],
  ["sub", "text/vnd.dvb.subtitle"],
  ["sus", "application/vnd.sus-calendar"],
  ["susp", "application/vnd.sus-calendar"],
  ["sv4cpio", "application/x-sv4cpio"],
  ["sv4crc", "application/x-sv4crc"],
  ["svc", "application/vnd.dvb.service"],
  ["svd", "application/vnd.svd"],
  ["svg", "image/svg+xml"],
  ["svgz", "image/svg+xml"],
  ["swa", "application/x-director"],
  ["swf", "application/x-shockwave-flash"],
  ["swi", "application/vnd.aristanetworks.swi"],
  ["swidtag", "application/swid+xml"],
  ["sxc", "application/vnd.sun.xml.calc"],
  ["sxd", "application/vnd.sun.xml.draw"],
  ["sxg", "application/vnd.sun.xml.writer.global"],
  ["sxi", "application/vnd.sun.xml.impress"],
  ["sxm", "application/vnd.sun.xml.math"],
  ["sxw", "application/vnd.sun.xml.writer"],
  ["t", "text/troff"],
  ["t3", "application/x-t3vm-image"],
  ["t38", "image/t38"],
  ["taglet", "application/vnd.mynfc"],
  ["tao", "application/vnd.tao.intent-module-archive"],
  ["tap", "image/vnd.tencent.tap"],
  ["tar", "application/x-tar"],
  ["tcap", "application/vnd.3gpp2.tcap"],
  ["tcl", "application/x-tcl"],
  ["td", "application/urc-targetdesc+xml"],
  ["teacher", "application/vnd.smart.teacher"],
  ["tei", "application/tei+xml"],
  ["teicorpus", "application/tei+xml"],
  ["tex", "application/x-tex"],
  ["texi", "application/x-texinfo"],
  ["texinfo", "application/x-texinfo"],
  ["text", "text/plain"],
  ["tfi", "application/thraud+xml"],
  ["tfm", "application/x-tex-tfm"],
  ["tfx", "image/tiff-fx"],
  ["tga", "image/x-tga"],
  ["tgz", "application/x-tar"],
  ["thmx", "application/vnd.ms-officetheme"],
  ["tif", "image/tiff"],
  ["tiff", "image/tiff"],
  ["tk", "application/x-tcl"],
  ["tmo", "application/vnd.tmobile-livetv"],
  ["toml", "application/toml"],
  ["torrent", "application/x-bittorrent"],
  ["tpl", "application/vnd.groove-tool-template"],
  ["tpt", "application/vnd.trid.tpt"],
  ["tr", "text/troff"],
  ["tra", "application/vnd.trueapp"],
  ["trig", "application/trig"],
  ["trm", "application/x-msterminal"],
  ["ts", "video/mp2t"],
  ["tsd", "application/timestamped-data"],
  ["tsv", "text/tab-separated-values"],
  ["ttc", "font/collection"],
  ["ttf", "font/ttf"],
  ["ttl", "text/turtle"],
  ["ttml", "application/ttml+xml"],
  ["twd", "application/vnd.simtech-mindmapper"],
  ["twds", "application/vnd.simtech-mindmapper"],
  ["txd", "application/vnd.genomatix.tuxedo"],
  ["txf", "application/vnd.mobius.txf"],
  ["txt", "text/plain"],
  ["u8dsn", "message/global-delivery-status"],
  ["u8hdr", "message/global-headers"],
  ["u8mdn", "message/global-disposition-notification"],
  ["u8msg", "message/global"],
  ["u32", "application/x-authorware-bin"],
  ["ubj", "application/ubjson"],
  ["udeb", "application/x-debian-package"],
  ["ufd", "application/vnd.ufdl"],
  ["ufdl", "application/vnd.ufdl"],
  ["ulx", "application/x-glulx"],
  ["umj", "application/vnd.umajin"],
  ["unityweb", "application/vnd.unity"],
  ["uoml", "application/vnd.uoml+xml"],
  ["uri", "text/uri-list"],
  ["uris", "text/uri-list"],
  ["urls", "text/uri-list"],
  ["usdz", "model/vnd.usdz+zip"],
  ["ustar", "application/x-ustar"],
  ["utz", "application/vnd.uiq.theme"],
  ["uu", "text/x-uuencode"],
  ["uva", "audio/vnd.dece.audio"],
  ["uvd", "application/vnd.dece.data"],
  ["uvf", "application/vnd.dece.data"],
  ["uvg", "image/vnd.dece.graphic"],
  ["uvh", "video/vnd.dece.hd"],
  ["uvi", "image/vnd.dece.graphic"],
  ["uvm", "video/vnd.dece.mobile"],
  ["uvp", "video/vnd.dece.pd"],
  ["uvs", "video/vnd.dece.sd"],
  ["uvt", "application/vnd.dece.ttml+xml"],
  ["uvu", "video/vnd.uvvu.mp4"],
  ["uvv", "video/vnd.dece.video"],
  ["uvva", "audio/vnd.dece.audio"],
  ["uvvd", "application/vnd.dece.data"],
  ["uvvf", "application/vnd.dece.data"],
  ["uvvg", "image/vnd.dece.graphic"],
  ["uvvh", "video/vnd.dece.hd"],
  ["uvvi", "image/vnd.dece.graphic"],
  ["uvvm", "video/vnd.dece.mobile"],
  ["uvvp", "video/vnd.dece.pd"],
  ["uvvs", "video/vnd.dece.sd"],
  ["uvvt", "application/vnd.dece.ttml+xml"],
  ["uvvu", "video/vnd.uvvu.mp4"],
  ["uvvv", "video/vnd.dece.video"],
  ["uvvx", "application/vnd.dece.unspecified"],
  ["uvvz", "application/vnd.dece.zip"],
  ["uvx", "application/vnd.dece.unspecified"],
  ["uvz", "application/vnd.dece.zip"],
  ["vbox", "application/x-virtualbox-vbox"],
  ["vbox-extpack", "application/x-virtualbox-vbox-extpack"],
  ["vcard", "text/vcard"],
  ["vcd", "application/x-cdlink"],
  ["vcf", "text/x-vcard"],
  ["vcg", "application/vnd.groove-vcard"],
  ["vcs", "text/x-vcalendar"],
  ["vcx", "application/vnd.vcx"],
  ["vdi", "application/x-virtualbox-vdi"],
  ["vds", "model/vnd.sap.vds"],
  ["vhd", "application/x-virtualbox-vhd"],
  ["vis", "application/vnd.visionary"],
  ["viv", "video/vnd.vivo"],
  ["vlc", "application/videolan"],
  ["vmdk", "application/x-virtualbox-vmdk"],
  ["vob", "video/x-ms-vob"],
  ["vor", "application/vnd.stardivision.writer"],
  ["vox", "application/x-authorware-bin"],
  ["vrml", "model/vrml"],
  ["vsd", "application/vnd.visio"],
  ["vsf", "application/vnd.vsf"],
  ["vss", "application/vnd.visio"],
  ["vst", "application/vnd.visio"],
  ["vsw", "application/vnd.visio"],
  ["vtf", "image/vnd.valve.source.texture"],
  ["vtt", "text/vtt"],
  ["vtu", "model/vnd.vtu"],
  ["vxml", "application/voicexml+xml"],
  ["w3d", "application/x-director"],
  ["wad", "application/x-doom"],
  ["wadl", "application/vnd.sun.wadl+xml"],
  ["war", "application/java-archive"],
  ["wasm", "application/wasm"],
  ["wav", "audio/x-wav"],
  ["wax", "audio/x-ms-wax"],
  ["wbmp", "image/vnd.wap.wbmp"],
  ["wbs", "application/vnd.criticaltools.wbs+xml"],
  ["wbxml", "application/wbxml"],
  ["wcm", "application/vnd.ms-works"],
  ["wdb", "application/vnd.ms-works"],
  ["wdp", "image/vnd.ms-photo"],
  ["weba", "audio/webm"],
  ["webapp", "application/x-web-app-manifest+json"],
  ["webm", "video/webm"],
  ["webmanifest", "application/manifest+json"],
  ["webp", "image/webp"],
  ["wg", "application/vnd.pmi.widget"],
  ["wgt", "application/widget"],
  ["wks", "application/vnd.ms-works"],
  ["wm", "video/x-ms-wm"],
  ["wma", "audio/x-ms-wma"],
  ["wmd", "application/x-ms-wmd"],
  ["wmf", "image/wmf"],
  ["wml", "text/vnd.wap.wml"],
  ["wmlc", "application/wmlc"],
  ["wmls", "text/vnd.wap.wmlscript"],
  ["wmlsc", "application/vnd.wap.wmlscriptc"],
  ["wmv", "video/x-ms-wmv"],
  ["wmx", "video/x-ms-wmx"],
  ["wmz", "application/x-msmetafile"],
  ["woff", "font/woff"],
  ["woff2", "font/woff2"],
  ["word", "application/msword"],
  ["wpd", "application/vnd.wordperfect"],
  ["wpl", "application/vnd.ms-wpl"],
  ["wps", "application/vnd.ms-works"],
  ["wqd", "application/vnd.wqd"],
  ["wri", "application/x-mswrite"],
  ["wrl", "model/vrml"],
  ["wsc", "message/vnd.wfa.wsc"],
  ["wsdl", "application/wsdl+xml"],
  ["wspolicy", "application/wspolicy+xml"],
  ["wtb", "application/vnd.webturbo"],
  ["wvx", "video/x-ms-wvx"],
  ["x3d", "model/x3d+xml"],
  ["x3db", "model/x3d+fastinfoset"],
  ["x3dbz", "model/x3d+binary"],
  ["x3dv", "model/x3d-vrml"],
  ["x3dvz", "model/x3d+vrml"],
  ["x3dz", "model/x3d+xml"],
  ["x32", "application/x-authorware-bin"],
  ["x_b", "model/vnd.parasolid.transmit.binary"],
  ["x_t", "model/vnd.parasolid.transmit.text"],
  ["xaml", "application/xaml+xml"],
  ["xap", "application/x-silverlight-app"],
  ["xar", "application/vnd.xara"],
  ["xav", "application/xcap-att+xml"],
  ["xbap", "application/x-ms-xbap"],
  ["xbd", "application/vnd.fujixerox.docuworks.binder"],
  ["xbm", "image/x-xbitmap"],
  ["xca", "application/xcap-caps+xml"],
  ["xcs", "application/calendar+xml"],
  ["xdf", "application/xcap-diff+xml"],
  ["xdm", "application/vnd.syncml.dm+xml"],
  ["xdp", "application/vnd.adobe.xdp+xml"],
  ["xdssc", "application/dssc+xml"],
  ["xdw", "application/vnd.fujixerox.docuworks"],
  ["xel", "application/xcap-el+xml"],
  ["xenc", "application/xenc+xml"],
  ["xer", "application/patch-ops-error+xml"],
  ["xfdf", "application/vnd.adobe.xfdf"],
  ["xfdl", "application/vnd.xfdl"],
  ["xht", "application/xhtml+xml"],
  ["xhtml", "application/xhtml+xml"],
  ["xhvml", "application/xv+xml"],
  ["xif", "image/vnd.xiff"],
  ["xl", "application/excel"],
  ["xla", "application/vnd.ms-excel"],
  ["xlam", "application/vnd.ms-excel.addin.macroEnabled.12"],
  ["xlc", "application/vnd.ms-excel"],
  ["xlf", "application/xliff+xml"],
  ["xlm", "application/vnd.ms-excel"],
  ["xls", "application/vnd.ms-excel"],
  ["xlsb", "application/vnd.ms-excel.sheet.binary.macroEnabled.12"],
  ["xlsm", "application/vnd.ms-excel.sheet.macroEnabled.12"],
  ["xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],
  ["xlt", "application/vnd.ms-excel"],
  ["xltm", "application/vnd.ms-excel.template.macroEnabled.12"],
  ["xltx", "application/vnd.openxmlformats-officedocument.spreadsheetml.template"],
  ["xlw", "application/vnd.ms-excel"],
  ["xm", "audio/xm"],
  ["xml", "application/xml"],
  ["xns", "application/xcap-ns+xml"],
  ["xo", "application/vnd.olpc-sugar"],
  ["xop", "application/xop+xml"],
  ["xpi", "application/x-xpinstall"],
  ["xpl", "application/xproc+xml"],
  ["xpm", "image/x-xpixmap"],
  ["xpr", "application/vnd.is-xpr"],
  ["xps", "application/vnd.ms-xpsdocument"],
  ["xpw", "application/vnd.intercon.formnet"],
  ["xpx", "application/vnd.intercon.formnet"],
  ["xsd", "application/xml"],
  ["xsl", "application/xml"],
  ["xslt", "application/xslt+xml"],
  ["xsm", "application/vnd.syncml+xml"],
  ["xspf", "application/xspf+xml"],
  ["xul", "application/vnd.mozilla.xul+xml"],
  ["xvm", "application/xv+xml"],
  ["xvml", "application/xv+xml"],
  ["xwd", "image/x-xwindowdump"],
  ["xyz", "chemical/x-xyz"],
  ["xz", "application/x-xz"],
  ["yaml", "text/yaml"],
  ["yang", "application/yang"],
  ["yin", "application/yin+xml"],
  ["yml", "text/yaml"],
  ["ymp", "text/x-suse-ymp"],
  ["z", "application/x-compress"],
  ["z1", "application/x-zmachine"],
  ["z2", "application/x-zmachine"],
  ["z3", "application/x-zmachine"],
  ["z4", "application/x-zmachine"],
  ["z5", "application/x-zmachine"],
  ["z6", "application/x-zmachine"],
  ["z7", "application/x-zmachine"],
  ["z8", "application/x-zmachine"],
  ["zaz", "application/vnd.zzazz.deck+xml"],
  ["zip", "application/zip"],
  ["zir", "application/vnd.zul"],
  ["zirz", "application/vnd.zul"],
  ["zmm", "application/vnd.handheld-entertainment+xml"],
  ["zsh", "text/x-scriptzsh"]
]);
function toFileWithPath(file, path, h) {
  const f = withMimeType(file);
  const { webkitRelativePath } = file;
  const p = typeof path === "string" ? path : typeof webkitRelativePath === "string" && webkitRelativePath.length > 0 ? webkitRelativePath : `./${file.name}`;
  if (typeof f.path !== "string") {
    setObjProp(f, "path", p);
  }
  if (h !== void 0) {
    Object.defineProperty(f, "handle", {
      value: h,
      writable: false,
      configurable: false,
      enumerable: true
    });
  }
  setObjProp(f, "relativePath", p);
  return f;
}
function withMimeType(file) {
  const { name } = file;
  const hasExtension = name && name.lastIndexOf(".") !== -1;
  if (hasExtension && !file.type) {
    const ext = name.split(".").pop().toLowerCase();
    const type = COMMON_MIME_TYPES.get(ext);
    if (type) {
      Object.defineProperty(file, "type", {
        value: type,
        writable: false,
        configurable: false,
        enumerable: true
      });
    }
  }
  return file;
}
function setObjProp(f, key, value) {
  Object.defineProperty(f, key, {
    value,
    writable: false,
    configurable: false,
    enumerable: true
  });
}

// node_modules/file-selector/dist/es2015/file-selector.js
var FILES_TO_IGNORE = [
  // Thumbnail cache files for macOS and Windows
  ".DS_Store",
  // macOs
  "Thumbs.db"
  // Windows
];
function fromEvent(evt) {
  return __awaiter(this, void 0, void 0, function* () {
    if (isObject(evt) && isDataTransfer(evt.dataTransfer)) {
      return getDataTransferFiles(evt.dataTransfer, evt.type);
    } else if (isChangeEvt(evt)) {
      return getInputFiles(evt);
    } else if (Array.isArray(evt) && evt.every((item) => "getFile" in item && typeof item.getFile === "function")) {
      return getFsHandleFiles(evt);
    }
    return [];
  });
}
function isDataTransfer(value) {
  return isObject(value);
}
function isChangeEvt(value) {
  return isObject(value) && isObject(value.target);
}
function isObject(v) {
  return typeof v === "object" && v !== null;
}
function getInputFiles(evt) {
  return fromList(evt.target.files).map((file) => toFileWithPath(file));
}
function getFsHandleFiles(handles) {
  return __awaiter(this, void 0, void 0, function* () {
    const files = yield Promise.all(handles.map((h) => h.getFile()));
    return files.map((file) => toFileWithPath(file));
  });
}
function getDataTransferFiles(dt, type) {
  return __awaiter(this, void 0, void 0, function* () {
    if (dt.items) {
      const items = fromList(dt.items).filter((item) => item.kind === "file");
      if (type !== "drop") {
        return items;
      }
      const files = yield Promise.all(items.map(toFilePromises));
      return noIgnoredFiles(flatten(files));
    }
    return noIgnoredFiles(fromList(dt.files).map((file) => toFileWithPath(file)));
  });
}
function noIgnoredFiles(files) {
  return files.filter((file) => FILES_TO_IGNORE.indexOf(file.name) === -1);
}
function fromList(items) {
  if (items === null) {
    return [];
  }
  const files = [];
  for (let i = 0; i < items.length; i++) {
    const file = items[i];
    files.push(file);
  }
  return files;
}
function toFilePromises(item) {
  if (typeof item.webkitGetAsEntry !== "function") {
    return fromDataTransferItem(item);
  }
  const entry = item.webkitGetAsEntry();
  if (entry && entry.isDirectory) {
    return fromDirEntry(entry);
  }
  return fromDataTransferItem(item, entry);
}
function flatten(items) {
  return items.reduce((acc, files) => [
    ...acc,
    ...Array.isArray(files) ? flatten(files) : [files]
  ], []);
}
function fromDataTransferItem(item, entry) {
  return __awaiter(this, void 0, void 0, function* () {
    var _a;
    if (globalThis.isSecureContext && typeof item.getAsFileSystemHandle === "function") {
      const h = yield item.getAsFileSystemHandle();
      if (h === null) {
        throw new Error(`${item} is not a File`);
      }
      if (h !== void 0) {
        const file2 = yield h.getFile();
        file2.handle = h;
        return toFileWithPath(file2);
      }
    }
    const file = item.getAsFile();
    if (!file) {
      throw new Error(`${item} is not a File`);
    }
    const fwp = toFileWithPath(file, (_a = entry === null || entry === void 0 ? void 0 : entry.fullPath) !== null && _a !== void 0 ? _a : void 0);
    return fwp;
  });
}
function fromEntry(entry) {
  return __awaiter(this, void 0, void 0, function* () {
    return entry.isDirectory ? fromDirEntry(entry) : fromFileEntry(entry);
  });
}
function fromDirEntry(entry) {
  const reader = entry.createReader();
  return new Promise((resolve, reject) => {
    const entries = [];
    function readEntries() {
      reader.readEntries((batch) => __awaiter(this, void 0, void 0, function* () {
        if (!batch.length) {
          try {
            const files = yield Promise.all(entries);
            resolve(files);
          } catch (err) {
            reject(err);
          }
        } else {
          const items = Promise.all(batch.map(fromEntry));
          entries.push(items);
          readEntries();
        }
      }), (err) => {
        reject(err);
      });
    }
    readEntries();
  });
}
function fromFileEntry(entry) {
  return __awaiter(this, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
      entry.file((file) => {
        const fwp = toFileWithPath(file, entry.fullPath);
        resolve(fwp);
      }, (err) => {
        reject(err);
      });
    });
  });
}

// node_modules/react-dropzone/dist/es/utils/index.js
var import_attr_accept = __toESM(require_es(), 1);
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
var accepts = typeof import_attr_accept.default === "function" ? import_attr_accept.default : import_attr_accept.default.default;
var FILE_INVALID_TYPE = "file-invalid-type";
var FILE_TOO_LARGE = "file-too-large";
var FILE_TOO_SMALL = "file-too-small";
var TOO_MANY_FILES = "too-many-files";
var ErrorCode = {
  FileInvalidType: FILE_INVALID_TYPE,
  FileTooLarge: FILE_TOO_LARGE,
  FileTooSmall: FILE_TOO_SMALL,
  TooManyFiles: TOO_MANY_FILES
};
var getInvalidTypeRejectionErr = function getInvalidTypeRejectionErr2() {
  var accept = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  var acceptArr = accept.split(",");
  var msg = acceptArr.length > 1 ? "one of ".concat(acceptArr.join(", ")) : acceptArr[0];
  return {
    code: FILE_INVALID_TYPE,
    message: "File type must be ".concat(msg)
  };
};
var getTooLargeRejectionErr = function getTooLargeRejectionErr2(maxSize) {
  return {
    code: FILE_TOO_LARGE,
    message: "File is larger than ".concat(maxSize, " ").concat(maxSize === 1 ? "byte" : "bytes")
  };
};
var getTooSmallRejectionErr = function getTooSmallRejectionErr2(minSize) {
  return {
    code: FILE_TOO_SMALL,
    message: "File is smaller than ".concat(minSize, " ").concat(minSize === 1 ? "byte" : "bytes")
  };
};
var TOO_MANY_FILES_REJECTION = {
  code: TOO_MANY_FILES,
  message: "Too many files"
};
function fileAccepted(file, accept) {
  var isAcceptable = file.type === "application/x-moz-file" || accepts(file, accept);
  return [isAcceptable, isAcceptable ? null : getInvalidTypeRejectionErr(accept)];
}
function fileMatchSize(file, minSize, maxSize) {
  if (isDefined(file.size)) {
    if (isDefined(minSize) && isDefined(maxSize)) {
      if (file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
      if (file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];
    } else if (isDefined(minSize) && file.size < minSize) return [false, getTooSmallRejectionErr(minSize)];
    else if (isDefined(maxSize) && file.size > maxSize) return [false, getTooLargeRejectionErr(maxSize)];
  }
  return [true, null];
}
function isDefined(value) {
  return value !== void 0 && value !== null;
}
function allFilesAccepted(_ref) {
  var files = _ref.files, accept = _ref.accept, minSize = _ref.minSize, maxSize = _ref.maxSize, multiple = _ref.multiple, maxFiles = _ref.maxFiles, validator = _ref.validator;
  if (!multiple && files.length > 1 || multiple && maxFiles >= 1 && files.length > maxFiles) {
    return false;
  }
  return files.every(function(file) {
    var _fileAccepted = fileAccepted(file, accept), _fileAccepted2 = _slicedToArray(_fileAccepted, 1), accepted = _fileAccepted2[0];
    var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray(_fileMatchSize, 1), sizeMatch = _fileMatchSize2[0];
    var customErrors = validator ? validator(file) : null;
    return accepted && sizeMatch && !customErrors;
  });
}
function isPropagationStopped(event) {
  if (typeof event.isPropagationStopped === "function") {
    return event.isPropagationStopped();
  } else if (typeof event.cancelBubble !== "undefined") {
    return event.cancelBubble;
  }
  return false;
}
function isEvtWithFiles(event) {
  if (!event.dataTransfer) {
    return !!event.target && !!event.target.files;
  }
  return Array.prototype.some.call(event.dataTransfer.types, function(type) {
    return type === "Files" || type === "application/x-moz-file";
  });
}
function onDocumentDragOver(event) {
  event.preventDefault();
}
function isIe(userAgent) {
  return userAgent.indexOf("MSIE") !== -1 || userAgent.indexOf("Trident/") !== -1;
}
function isEdge(userAgent) {
  return userAgent.indexOf("Edge/") !== -1;
}
function isIeOrEdge() {
  var userAgent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window.navigator.userAgent;
  return isIe(userAgent) || isEdge(userAgent);
}
function composeEventHandlers() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }
  return function(event) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }
    return fns.some(function(fn) {
      if (!isPropagationStopped(event) && fn) {
        fn.apply(void 0, [event].concat(args));
      }
      return isPropagationStopped(event);
    });
  };
}
function canUseFileSystemAccessAPI() {
  return "showOpenFilePicker" in window;
}
function pickerOptionsFromAccept(accept) {
  if (isDefined(accept)) {
    var acceptForPicker = Object.entries(accept).filter(function(_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2), mimeType = _ref3[0], ext = _ref3[1];
      var ok = true;
      if (!isMIMEType(mimeType)) {
        console.warn('Skipped "'.concat(mimeType, '" because it is not a valid MIME type. Check https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types for a list of valid MIME types.'));
        ok = false;
      }
      if (!Array.isArray(ext) || !ext.every(isExt)) {
        console.warn('Skipped "'.concat(mimeType, '" because an invalid file extension was provided.'));
        ok = false;
      }
      return ok;
    }).reduce(function(agg, _ref4) {
      var _ref5 = _slicedToArray(_ref4, 2), mimeType = _ref5[0], ext = _ref5[1];
      return _objectSpread(_objectSpread({}, agg), {}, _defineProperty({}, mimeType, ext));
    }, {});
    return [{
      // description is required due to https://crbug.com/1264708
      description: "Files",
      accept: acceptForPicker
    }];
  }
  return accept;
}
function acceptPropAsAcceptAttr(accept) {
  if (isDefined(accept)) {
    return Object.entries(accept).reduce(function(a, _ref6) {
      var _ref7 = _slicedToArray(_ref6, 2), mimeType = _ref7[0], ext = _ref7[1];
      return [].concat(_toConsumableArray(a), [mimeType], _toConsumableArray(ext));
    }, []).filter(function(v) {
      return isMIMEType(v) || isExt(v);
    }).join(",");
  }
  return void 0;
}
function isAbort(v) {
  return v instanceof DOMException && (v.name === "AbortError" || v.code === v.ABORT_ERR);
}
function isSecurityError(v) {
  return v instanceof DOMException && (v.name === "SecurityError" || v.code === v.SECURITY_ERR);
}
function isMIMEType(v) {
  return v === "audio/*" || v === "video/*" || v === "image/*" || v === "text/*" || v === "application/*" || /\w+\/[-+.\w]+/g.test(v);
}
function isExt(v) {
  return /^.*\.[\w]+$/.test(v);
}

// node_modules/react-dropzone/dist/es/index.js
var _excluded = ["children"];
var _excluded2 = ["open"];
var _excluded3 = ["refKey", "role", "onKeyDown", "onFocus", "onBlur", "onClick", "onDragEnter", "onDragOver", "onDragLeave", "onDrop"];
var _excluded4 = ["refKey", "onChange", "onClick"];
function _toConsumableArray2(arr) {
  return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread2();
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray2(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles2(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray2(arr);
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit2(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr)) return arr;
}
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var Dropzone = (0, import_react57.forwardRef)(function(_ref, ref) {
  var children = _ref.children, params = _objectWithoutProperties(_ref, _excluded);
  var _useDropzone = useDropzone(params), open = _useDropzone.open, props = _objectWithoutProperties(_useDropzone, _excluded2);
  (0, import_react57.useImperativeHandle)(ref, function() {
    return {
      open
    };
  }, [open]);
  return import_react57.default.createElement(import_react57.Fragment, null, children(_objectSpread2(_objectSpread2({}, props), {}, {
    open
  })));
});
Dropzone.displayName = "Dropzone";
var defaultProps = {
  disabled: false,
  getFilesFromEvent: fromEvent,
  maxSize: Infinity,
  minSize: 0,
  multiple: true,
  maxFiles: 0,
  preventDropOnDocument: true,
  noClick: false,
  noKeyboard: false,
  noDrag: false,
  noDragEventsBubbling: false,
  validator: null,
  useFsAccessApi: false,
  autoFocus: false
};
Dropzone.defaultProps = defaultProps;
Dropzone.propTypes = {
  /**
   * Render function that exposes the dropzone state and prop getter fns
   *
   * @param {object} params
   * @param {Function} params.getRootProps Returns the props you should apply to the root drop container you render
   * @param {Function} params.getInputProps Returns the props you should apply to hidden file input you render
   * @param {Function} params.open Open the native file selection dialog
   * @param {boolean} params.isFocused Dropzone area is in focus
   * @param {boolean} params.isFileDialogActive File dialog is opened
   * @param {boolean} params.isDragActive Active drag is in progress
   * @param {boolean} params.isDragAccept Dragged files are accepted
   * @param {boolean} params.isDragReject Some dragged files are rejected
   * @param {File[]} params.acceptedFiles Accepted files
   * @param {FileRejection[]} params.fileRejections Rejected files and why they were rejected
   */
  children: import_prop_types.default.func,
  /**
   * Set accepted file types.
   * Checkout https://developer.mozilla.org/en-US/docs/Web/API/window/showOpenFilePicker types option for more information.
   * Keep in mind that mime type determination is not reliable across platforms. CSV files,
   * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
   * Windows. In some cases there might not be a mime type set at all (https://github.com/react-dropzone/react-dropzone/issues/276).
   */
  accept: import_prop_types.default.objectOf(import_prop_types.default.arrayOf(import_prop_types.default.string)),
  /**
   * Allow drag 'n' drop (or selection from the file dialog) of multiple files
   */
  multiple: import_prop_types.default.bool,
  /**
   * If false, allow dropped items to take over the current browser window
   */
  preventDropOnDocument: import_prop_types.default.bool,
  /**
   * If true, disables click to open the native file selection dialog
   */
  noClick: import_prop_types.default.bool,
  /**
   * If true, disables SPACE/ENTER to open the native file selection dialog.
   * Note that it also stops tracking the focus state.
   */
  noKeyboard: import_prop_types.default.bool,
  /**
   * If true, disables drag 'n' drop
   */
  noDrag: import_prop_types.default.bool,
  /**
   * If true, stops drag event propagation to parents
   */
  noDragEventsBubbling: import_prop_types.default.bool,
  /**
   * Minimum file size (in bytes)
   */
  minSize: import_prop_types.default.number,
  /**
   * Maximum file size (in bytes)
   */
  maxSize: import_prop_types.default.number,
  /**
   * Maximum accepted number of files
   * The default value is 0 which means there is no limitation to how many files are accepted.
   */
  maxFiles: import_prop_types.default.number,
  /**
   * Enable/disable the dropzone
   */
  disabled: import_prop_types.default.bool,
  /**
   * Use this to provide a custom file aggregator
   *
   * @param {(DragEvent|Event|Array<FileSystemFileHandle>)} event A drag event or input change event (if files were selected via the file dialog)
   */
  getFilesFromEvent: import_prop_types.default.func,
  /**
   * Cb for when closing the file dialog with no selection
   */
  onFileDialogCancel: import_prop_types.default.func,
  /**
   * Cb for when opening the file dialog
   */
  onFileDialogOpen: import_prop_types.default.func,
  /**
   * Set to true to use the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API
   * to open the file picker instead of using an `<input type="file">` click event.
   */
  useFsAccessApi: import_prop_types.default.bool,
  /**
   * Set to true to focus the root element on render
   */
  autoFocus: import_prop_types.default.bool,
  /**
   * Cb for when the `dragenter` event occurs.
   *
   * @param {DragEvent} event
   */
  onDragEnter: import_prop_types.default.func,
  /**
   * Cb for when the `dragleave` event occurs
   *
   * @param {DragEvent} event
   */
  onDragLeave: import_prop_types.default.func,
  /**
   * Cb for when the `dragover` event occurs
   *
   * @param {DragEvent} event
   */
  onDragOver: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that this callback is invoked after the `getFilesFromEvent` callback is done.
   *
   * Files are accepted or rejected based on the `accept`, `multiple`, `minSize` and `maxSize` props.
   * `accept` must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file) or a valid file extension.
   * If `multiple` is set to false and additional files are dropped,
   * all files besides the first will be rejected.
   * Any file which does not have a size in the [`minSize`, `maxSize`] range, will be rejected as well.
   *
   * Note that the `onDrop` callback will always be invoked regardless if the dropped files were accepted or rejected.
   * If you'd like to react to a specific scenario, use the `onDropAccepted`/`onDropRejected` props.
   *
   * `onDrop` will provide you with an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File) objects which you can then process and send to a server.
   * For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:
   *
   * ```js
   * function onDrop(acceptedFiles) {
   *   const req = request.post('/upload')
   *   acceptedFiles.forEach(file => {
   *     req.attach(file.name, file)
   *   })
   *   req.end(callback)
   * }
   * ```
   *
   * @param {File[]} acceptedFiles
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event A drag event or input change event (if files were selected via the file dialog)
   */
  onDrop: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are accepted, this callback is not invoked.
   *
   * @param {File[]} files
   * @param {(DragEvent|Event)} event
   */
  onDropAccepted: import_prop_types.default.func,
  /**
   * Cb for when the `drop` event occurs.
   * Note that if no files are rejected, this callback is not invoked.
   *
   * @param {FileRejection[]} fileRejections
   * @param {(DragEvent|Event)} event
   */
  onDropRejected: import_prop_types.default.func,
  /**
   * Cb for when there's some error from any of the promises.
   *
   * @param {Error} error
   */
  onError: import_prop_types.default.func,
  /**
   * Custom validation function. It must return null if there's no errors.
   * @param {File} file
   * @returns {FileError|FileError[]|null}
   */
  validator: import_prop_types.default.func
};
var initialState = {
  isFocused: false,
  isFileDialogActive: false,
  isDragActive: false,
  isDragAccept: false,
  isDragReject: false,
  acceptedFiles: [],
  fileRejections: []
};
function useDropzone() {
  var props = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var _defaultProps$props = _objectSpread2(_objectSpread2({}, defaultProps), props), accept = _defaultProps$props.accept, disabled = _defaultProps$props.disabled, getFilesFromEvent = _defaultProps$props.getFilesFromEvent, maxSize = _defaultProps$props.maxSize, minSize = _defaultProps$props.minSize, multiple = _defaultProps$props.multiple, maxFiles = _defaultProps$props.maxFiles, onDragEnter = _defaultProps$props.onDragEnter, onDragLeave = _defaultProps$props.onDragLeave, onDragOver = _defaultProps$props.onDragOver, onDrop = _defaultProps$props.onDrop, onDropAccepted = _defaultProps$props.onDropAccepted, onDropRejected = _defaultProps$props.onDropRejected, onFileDialogCancel = _defaultProps$props.onFileDialogCancel, onFileDialogOpen = _defaultProps$props.onFileDialogOpen, useFsAccessApi = _defaultProps$props.useFsAccessApi, autoFocus = _defaultProps$props.autoFocus, preventDropOnDocument = _defaultProps$props.preventDropOnDocument, noClick = _defaultProps$props.noClick, noKeyboard = _defaultProps$props.noKeyboard, noDrag = _defaultProps$props.noDrag, noDragEventsBubbling = _defaultProps$props.noDragEventsBubbling, onError = _defaultProps$props.onError, validator = _defaultProps$props.validator;
  var acceptAttr = (0, import_react57.useMemo)(function() {
    return acceptPropAsAcceptAttr(accept);
  }, [accept]);
  var pickerTypes = (0, import_react57.useMemo)(function() {
    return pickerOptionsFromAccept(accept);
  }, [accept]);
  var onFileDialogOpenCb = (0, import_react57.useMemo)(function() {
    return typeof onFileDialogOpen === "function" ? onFileDialogOpen : noop;
  }, [onFileDialogOpen]);
  var onFileDialogCancelCb = (0, import_react57.useMemo)(function() {
    return typeof onFileDialogCancel === "function" ? onFileDialogCancel : noop;
  }, [onFileDialogCancel]);
  var rootRef = (0, import_react57.useRef)(null);
  var inputRef = (0, import_react57.useRef)(null);
  var _useReducer = (0, import_react57.useReducer)(reducer, initialState), _useReducer2 = _slicedToArray2(_useReducer, 2), state = _useReducer2[0], dispatch = _useReducer2[1];
  var isFocused = state.isFocused, isFileDialogActive = state.isFileDialogActive;
  var fsAccessApiWorksRef = (0, import_react57.useRef)(typeof window !== "undefined" && window.isSecureContext && useFsAccessApi && canUseFileSystemAccessAPI());
  var onWindowFocus = function onWindowFocus2() {
    if (!fsAccessApiWorksRef.current && isFileDialogActive) {
      setTimeout(function() {
        if (inputRef.current) {
          var files = inputRef.current.files;
          if (!files.length) {
            dispatch({
              type: "closeDialog"
            });
            onFileDialogCancelCb();
          }
        }
      }, 300);
    }
  };
  (0, import_react57.useEffect)(function() {
    window.addEventListener("focus", onWindowFocus, false);
    return function() {
      window.removeEventListener("focus", onWindowFocus, false);
    };
  }, [inputRef, isFileDialogActive, onFileDialogCancelCb, fsAccessApiWorksRef]);
  var dragTargetsRef = (0, import_react57.useRef)([]);
  var onDocumentDrop = function onDocumentDrop2(event) {
    if (rootRef.current && rootRef.current.contains(event.target)) {
      return;
    }
    event.preventDefault();
    dragTargetsRef.current = [];
  };
  (0, import_react57.useEffect)(function() {
    if (preventDropOnDocument) {
      document.addEventListener("dragover", onDocumentDragOver, false);
      document.addEventListener("drop", onDocumentDrop, false);
    }
    return function() {
      if (preventDropOnDocument) {
        document.removeEventListener("dragover", onDocumentDragOver);
        document.removeEventListener("drop", onDocumentDrop);
      }
    };
  }, [rootRef, preventDropOnDocument]);
  (0, import_react57.useEffect)(function() {
    if (!disabled && autoFocus && rootRef.current) {
      rootRef.current.focus();
    }
    return function() {
    };
  }, [rootRef, autoFocus, disabled]);
  var onErrCb = (0, import_react57.useCallback)(function(e) {
    if (onError) {
      onError(e);
    } else {
      console.error(e);
    }
  }, [onError]);
  var onDragEnterCb = (0, import_react57.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    dragTargetsRef.current = [].concat(_toConsumableArray2(dragTargetsRef.current), [event.target]);
    if (isEvtWithFiles(event)) {
      Promise.resolve(getFilesFromEvent(event)).then(function(files) {
        if (isPropagationStopped(event) && !noDragEventsBubbling) {
          return;
        }
        var fileCount = files.length;
        var isDragAccept = fileCount > 0 && allFilesAccepted({
          files,
          accept: acceptAttr,
          minSize,
          maxSize,
          multiple,
          maxFiles,
          validator
        });
        var isDragReject = fileCount > 0 && !isDragAccept;
        dispatch({
          isDragAccept,
          isDragReject,
          isDragActive: true,
          type: "setDraggedFiles"
        });
        if (onDragEnter) {
          onDragEnter(event);
        }
      }).catch(function(e) {
        return onErrCb(e);
      });
    }
  }, [getFilesFromEvent, onDragEnter, onErrCb, noDragEventsBubbling, acceptAttr, minSize, maxSize, multiple, maxFiles, validator]);
  var onDragOverCb = (0, import_react57.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    var hasFiles = isEvtWithFiles(event);
    if (hasFiles && event.dataTransfer) {
      try {
        event.dataTransfer.dropEffect = "copy";
      } catch (_unused) {
      }
    }
    if (hasFiles && onDragOver) {
      onDragOver(event);
    }
    return false;
  }, [onDragOver, noDragEventsBubbling]);
  var onDragLeaveCb = (0, import_react57.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    var targets = dragTargetsRef.current.filter(function(target) {
      return rootRef.current && rootRef.current.contains(target);
    });
    var targetIdx = targets.indexOf(event.target);
    if (targetIdx !== -1) {
      targets.splice(targetIdx, 1);
    }
    dragTargetsRef.current = targets;
    if (targets.length > 0) {
      return;
    }
    dispatch({
      type: "setDraggedFiles",
      isDragActive: false,
      isDragAccept: false,
      isDragReject: false
    });
    if (isEvtWithFiles(event) && onDragLeave) {
      onDragLeave(event);
    }
  }, [rootRef, onDragLeave, noDragEventsBubbling]);
  var setFiles = (0, import_react57.useCallback)(function(files, event) {
    var acceptedFiles = [];
    var fileRejections = [];
    files.forEach(function(file) {
      var _fileAccepted = fileAccepted(file, acceptAttr), _fileAccepted2 = _slicedToArray2(_fileAccepted, 2), accepted = _fileAccepted2[0], acceptError = _fileAccepted2[1];
      var _fileMatchSize = fileMatchSize(file, minSize, maxSize), _fileMatchSize2 = _slicedToArray2(_fileMatchSize, 2), sizeMatch = _fileMatchSize2[0], sizeError = _fileMatchSize2[1];
      var customErrors = validator ? validator(file) : null;
      if (accepted && sizeMatch && !customErrors) {
        acceptedFiles.push(file);
      } else {
        var errors = [acceptError, sizeError];
        if (customErrors) {
          errors = errors.concat(customErrors);
        }
        fileRejections.push({
          file,
          errors: errors.filter(function(e) {
            return e;
          })
        });
      }
    });
    if (!multiple && acceptedFiles.length > 1 || multiple && maxFiles >= 1 && acceptedFiles.length > maxFiles) {
      acceptedFiles.forEach(function(file) {
        fileRejections.push({
          file,
          errors: [TOO_MANY_FILES_REJECTION]
        });
      });
      acceptedFiles.splice(0);
    }
    dispatch({
      acceptedFiles,
      fileRejections,
      isDragReject: fileRejections.length > 0,
      type: "setFiles"
    });
    if (onDrop) {
      onDrop(acceptedFiles, fileRejections, event);
    }
    if (fileRejections.length > 0 && onDropRejected) {
      onDropRejected(fileRejections, event);
    }
    if (acceptedFiles.length > 0 && onDropAccepted) {
      onDropAccepted(acceptedFiles, event);
    }
  }, [dispatch, multiple, acceptAttr, minSize, maxSize, maxFiles, onDrop, onDropAccepted, onDropRejected, validator]);
  var onDropCb = (0, import_react57.useCallback)(function(event) {
    event.preventDefault();
    event.persist();
    stopPropagation(event);
    dragTargetsRef.current = [];
    if (isEvtWithFiles(event)) {
      Promise.resolve(getFilesFromEvent(event)).then(function(files) {
        if (isPropagationStopped(event) && !noDragEventsBubbling) {
          return;
        }
        setFiles(files, event);
      }).catch(function(e) {
        return onErrCb(e);
      });
    }
    dispatch({
      type: "reset"
    });
  }, [getFilesFromEvent, setFiles, onErrCb, noDragEventsBubbling]);
  var openFileDialog = (0, import_react57.useCallback)(function() {
    if (fsAccessApiWorksRef.current) {
      dispatch({
        type: "openDialog"
      });
      onFileDialogOpenCb();
      var opts = {
        multiple,
        types: pickerTypes
      };
      window.showOpenFilePicker(opts).then(function(handles) {
        return getFilesFromEvent(handles);
      }).then(function(files) {
        setFiles(files, null);
        dispatch({
          type: "closeDialog"
        });
      }).catch(function(e) {
        if (isAbort(e)) {
          onFileDialogCancelCb(e);
          dispatch({
            type: "closeDialog"
          });
        } else if (isSecurityError(e)) {
          fsAccessApiWorksRef.current = false;
          if (inputRef.current) {
            inputRef.current.value = null;
            inputRef.current.click();
          } else {
            onErrCb(new Error("Cannot open the file picker because the https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API is not supported and no <input> was provided."));
          }
        } else {
          onErrCb(e);
        }
      });
      return;
    }
    if (inputRef.current) {
      dispatch({
        type: "openDialog"
      });
      onFileDialogOpenCb();
      inputRef.current.value = null;
      inputRef.current.click();
    }
  }, [dispatch, onFileDialogOpenCb, onFileDialogCancelCb, useFsAccessApi, setFiles, onErrCb, pickerTypes, multiple]);
  var onKeyDownCb = (0, import_react57.useCallback)(function(event) {
    if (!rootRef.current || !rootRef.current.isEqualNode(event.target)) {
      return;
    }
    if (event.key === " " || event.key === "Enter" || event.keyCode === 32 || event.keyCode === 13) {
      event.preventDefault();
      openFileDialog();
    }
  }, [rootRef, openFileDialog]);
  var onFocusCb = (0, import_react57.useCallback)(function() {
    dispatch({
      type: "focus"
    });
  }, []);
  var onBlurCb = (0, import_react57.useCallback)(function() {
    dispatch({
      type: "blur"
    });
  }, []);
  var onClickCb = (0, import_react57.useCallback)(function() {
    if (noClick) {
      return;
    }
    if (isIeOrEdge()) {
      setTimeout(openFileDialog, 0);
    } else {
      openFileDialog();
    }
  }, [noClick, openFileDialog]);
  var composeHandler = function composeHandler2(fn) {
    return disabled ? null : fn;
  };
  var composeKeyboardHandler = function composeKeyboardHandler2(fn) {
    return noKeyboard ? null : composeHandler(fn);
  };
  var composeDragHandler = function composeDragHandler2(fn) {
    return noDrag ? null : composeHandler(fn);
  };
  var stopPropagation = function stopPropagation2(event) {
    if (noDragEventsBubbling) {
      event.stopPropagation();
    }
  };
  var getRootProps = (0, import_react57.useMemo)(function() {
    return function() {
      var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref2$refKey = _ref2.refKey, refKey = _ref2$refKey === void 0 ? "ref" : _ref2$refKey, role = _ref2.role, onKeyDown = _ref2.onKeyDown, onFocus = _ref2.onFocus, onBlur = _ref2.onBlur, onClick = _ref2.onClick, onDragEnter2 = _ref2.onDragEnter, onDragOver2 = _ref2.onDragOver, onDragLeave2 = _ref2.onDragLeave, onDrop2 = _ref2.onDrop, rest = _objectWithoutProperties(_ref2, _excluded3);
      return _objectSpread2(_objectSpread2(_defineProperty2({
        onKeyDown: composeKeyboardHandler(composeEventHandlers(onKeyDown, onKeyDownCb)),
        onFocus: composeKeyboardHandler(composeEventHandlers(onFocus, onFocusCb)),
        onBlur: composeKeyboardHandler(composeEventHandlers(onBlur, onBlurCb)),
        onClick: composeHandler(composeEventHandlers(onClick, onClickCb)),
        onDragEnter: composeDragHandler(composeEventHandlers(onDragEnter2, onDragEnterCb)),
        onDragOver: composeDragHandler(composeEventHandlers(onDragOver2, onDragOverCb)),
        onDragLeave: composeDragHandler(composeEventHandlers(onDragLeave2, onDragLeaveCb)),
        onDrop: composeDragHandler(composeEventHandlers(onDrop2, onDropCb)),
        role: typeof role === "string" && role !== "" ? role : "presentation"
      }, refKey, rootRef), !disabled && !noKeyboard ? {
        tabIndex: 0
      } : {}), rest);
    };
  }, [rootRef, onKeyDownCb, onFocusCb, onBlurCb, onClickCb, onDragEnterCb, onDragOverCb, onDragLeaveCb, onDropCb, noKeyboard, noDrag, disabled]);
  var onInputElementClick = (0, import_react57.useCallback)(function(event) {
    event.stopPropagation();
  }, []);
  var getInputProps = (0, import_react57.useMemo)(function() {
    return function() {
      var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref3$refKey = _ref3.refKey, refKey = _ref3$refKey === void 0 ? "ref" : _ref3$refKey, onChange = _ref3.onChange, onClick = _ref3.onClick, rest = _objectWithoutProperties(_ref3, _excluded4);
      var inputProps = _defineProperty2({
        accept: acceptAttr,
        multiple,
        type: "file",
        style: {
          border: 0,
          clip: "rect(0, 0, 0, 0)",
          clipPath: "inset(50%)",
          height: "1px",
          margin: "0 -1px -1px 0",
          overflow: "hidden",
          padding: 0,
          position: "absolute",
          width: "1px",
          whiteSpace: "nowrap"
        },
        onChange: composeHandler(composeEventHandlers(onChange, onDropCb)),
        onClick: composeHandler(composeEventHandlers(onClick, onInputElementClick)),
        tabIndex: -1
      }, refKey, inputRef);
      return _objectSpread2(_objectSpread2({}, inputProps), rest);
    };
  }, [inputRef, accept, multiple, onDropCb, disabled]);
  return _objectSpread2(_objectSpread2({}, state), {}, {
    isFocused: isFocused && !disabled,
    getRootProps,
    getInputProps,
    rootRef,
    inputRef,
    open: composeHandler(openFileDialog)
  });
}
function reducer(state, action) {
  switch (action.type) {
    case "focus":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isFocused: true
      });
    case "blur":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isFocused: false
      });
    case "openDialog":
      return _objectSpread2(_objectSpread2({}, initialState), {}, {
        isFileDialogActive: true
      });
    case "closeDialog":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isFileDialogActive: false
      });
    case "setDraggedFiles":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        isDragActive: action.isDragActive,
        isDragAccept: action.isDragAccept,
        isDragReject: action.isDragReject
      });
    case "setFiles":
      return _objectSpread2(_objectSpread2({}, state), {}, {
        acceptedFiles: action.acceptedFiles,
        fileRejections: action.fileRejections,
        isDragReject: action.isDragReject
      });
    case "reset":
      return _objectSpread2({}, initialState);
    default:
      return state;
  }
}
function noop() {
}

// node_modules/@patternfly/react-core/dist/esm/components/FileUpload/FileUpload.js
var FileUpload = (_a) => {
  var { id, type, value = type === fileReaderType.text || type === fileReaderType.dataURL ? "" : null, filename = "", children = null, onFileInputChange = null, onReadStarted = () => {
  }, onReadFinished = () => {
  }, onReadFailed = () => {
  }, onClearClick, onClick = (event) => event.preventDefault(), onTextChange, onDataChange, dropzoneProps = {} } = _a, props = __rest(_a, ["id", "type", "value", "filename", "children", "onFileInputChange", "onReadStarted", "onReadFinished", "onReadFailed", "onClearClick", "onClick", "onTextChange", "onDataChange", "dropzoneProps"]);
  const onDropAccepted = (acceptedFiles, event) => {
    if (acceptedFiles.length > 0) {
      const fileHandle = acceptedFiles[0];
      onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(event, fileHandle);
      if (type === fileReaderType.text || type === fileReaderType.dataURL) {
        onReadStarted(event, fileHandle);
        readFile(fileHandle, type).then((data) => {
          onReadFinished(event, fileHandle);
          onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange(event, data);
        }).catch((error) => {
          onReadFailed(event, error, fileHandle);
          onReadFinished(event, fileHandle);
          onDataChange === null || onDataChange === void 0 ? void 0 : onDataChange(event, "");
        });
      }
    }
    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);
  };
  const onDropRejected = (rejectedFiles, event) => {
    dropzoneProps.onDropRejected && dropzoneProps.onDropRejected(rejectedFiles, event);
  };
  const onClearButtonClick = (event) => {
    onClearClick === null || onClearClick === void 0 ? void 0 : onClearClick(event);
    setFileValue(null);
  };
  const { getRootProps, getInputProps, isDragActive, open, inputRef } = useDropzone(Object.assign(Object.assign({ noClick: true, multiple: false }, dropzoneProps), {
    onDropAccepted,
    onDropRejected
  }));
  const setFileValue = (filename2) => {
    inputRef.current.value = filename2;
  };
  const oldInputProps = getInputProps();
  const inputProps = Object.assign(Object.assign({}, oldInputProps), { onChange: (e) => __awaiter(void 0, void 0, void 0, function* () {
    var _b;
    (_b = oldInputProps.onChange) === null || _b === void 0 ? void 0 : _b.call(oldInputProps, e);
    const files = yield fromEvent(e.nativeEvent);
    if (files.length === 1) {
      onFileInputChange === null || onFileInputChange === void 0 ? void 0 : onFileInputChange(e, files[0]);
    }
  }) });
  const rootProps = getRootProps(Object.assign(Object.assign({}, props), {
    tabIndex: null,
    // Omit the unwanted tabIndex from react-dropzone's getRootProps
    id,
    type,
    filename,
    value,
    isDragActive,
    onBrowseButtonClick: open,
    onClearButtonClick,
    onTextAreaClick: onClick,
    onTextChange,
    onClick,
    refKey: "containerRef"
  }));
  return (0, import_jsx_runtime138.jsxs)(FileUploadField, Object.assign({}, rootProps, { children: [(0, import_jsx_runtime138.jsx)("input", Object.assign({}, inputProps, { hidden: true })), children] }));
};
FileUpload.displayName = "FileUpload";

// node_modules/@patternfly/react-core/dist/esm/components/FileUpload/FileUploadHelperText.js
var import_jsx_runtime139 = __toESM(require_jsx_runtime());
var FileUploadHelperText = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime139.jsx)("div", Object.assign({ className: css(`${file_upload_default.fileUpload}__helper-text`, className) }, props, { children }));
};
FileUploadHelperText.displayName = "FileUploadHelperText";

// node_modules/@patternfly/react-core/dist/esm/components/FormSelect/FormSelect.js
var import_jsx_runtime140 = __toESM(require_jsx_runtime());
var import_react58 = __toESM(require_react());
var FormSelect = class _FormSelect extends import_react58.Component {
  constructor(props) {
    super(props);
    this.handleChange = (event) => {
      this.props.onChange(event, event.currentTarget.value);
    };
    if (!props.id && !props["aria-label"]) {
      console.error("FormSelect requires either an id or aria-label to be specified");
    }
    this.state = {
      ouiaStateId: getDefaultOUIAId(_FormSelect.displayName, props.validated)
    };
  }
  render() {
    const _a = this.props, { children, className, value, validated, isDisabled, isRequired, ouiaId, ouiaSafe } = _a, props = __rest(_a, ["children", "className", "value", "validated", "isDisabled", "isRequired", "ouiaId", "ouiaSafe"]);
    const selectedOption = import_react58.Children.toArray(children).find((option) => option.props.value === value);
    const isSelectedPlaceholder = selectedOption && selectedOption.props.isPlaceholder;
    const hasStatusIcon = ["success", "error", "warning"].includes(validated);
    return (0, import_jsx_runtime140.jsxs)("span", { className: css(form_control_default.formControl, isDisabled && form_control_default.modifiers.disabled, isSelectedPlaceholder && form_control_default.modifiers.placeholder, hasStatusIcon && form_control_default.modifiers[validated], className), children: [(0, import_jsx_runtime140.jsx)("select", Object.assign({}, props, { "aria-invalid": validated === ValidatedOptions.error }, getOUIAProps(_FormSelect.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), { onChange: this.handleChange, disabled: isDisabled, required: isRequired, value, children })), (0, import_jsx_runtime140.jsxs)("span", { className: css(form_control_default.formControlUtilities), children: [hasStatusIcon && (0, import_jsx_runtime140.jsx)(FormControlIcon, { status: validated }), (0, import_jsx_runtime140.jsx)("span", { className: css(form_control_default.formControlToggleIcon), children: (0, import_jsx_runtime140.jsx)(caret_down_icon_default, {}) })] })] });
  }
};
FormSelect.displayName = "FormSelect";
FormSelect.defaultProps = {
  className: "",
  value: "",
  validated: "default",
  isDisabled: false,
  isRequired: false,
  onBlur: () => void 0,
  onFocus: () => void 0,
  onChange: () => void 0,
  ouiaSafe: true
};

// node_modules/@patternfly/react-core/dist/esm/components/FormSelect/FormSelectOption.js
var import_jsx_runtime141 = __toESM(require_jsx_runtime());
var FormSelectOption = (_a) => {
  var {
    className = "",
    value = "",
    isDisabled = false,
    label,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isPlaceholder = false
  } = _a, props = __rest(_a, ["className", "value", "isDisabled", "label", "isPlaceholder"]);
  return (0, import_jsx_runtime141.jsx)("option", Object.assign({}, props, { className, value, disabled: isDisabled, children: label }));
};
FormSelectOption.displayName = "FormSelectOption";

// node_modules/@patternfly/react-core/dist/esm/components/FormSelect/FormSelectOptionGroup.js
var import_jsx_runtime142 = __toESM(require_jsx_runtime());
var FormSelectOptionGroup = (_a) => {
  var { children = null, className = "", isDisabled = false, label } = _a, props = __rest(_a, ["children", "className", "isDisabled", "label"]);
  return (0, import_jsx_runtime142.jsx)("optgroup", Object.assign({}, props, { disabled: !!isDisabled, className, label, children }));
};
FormSelectOptionGroup.displayName = "FormSelectOptionGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Hint/Hint.js
var import_jsx_runtime143 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/Hint/hint.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Hint/hint.css";
var hint_default = {
  "button": "pf-v6-c-button",
  "hint": "pf-v6-c-hint",
  "hintActions": "pf-v6-c-hint__actions",
  "hintBody": "pf-v6-c-hint__body",
  "hintFooter": "pf-v6-c-hint__footer",
  "hintTitle": "pf-v6-c-hint__title",
  "modifiers": {
    "link": "pf-m-link",
    "inline": "pf-m-inline",
    "noOffset": "pf-m-no-offset"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Hint/Hint.js
var Hint = (_a) => {
  var { children, className, actions, hasNoActionsOffset = false } = _a, props = __rest(_a, ["children", "className", "actions", "hasNoActionsOffset"]);
  return (0, import_jsx_runtime143.jsxs)("div", Object.assign({ className: css(hint_default.hint, className) }, props, { children: [actions && (0, import_jsx_runtime143.jsx)("div", { className: css(hint_default.hintActions, hasNoActionsOffset && hint_default.modifiers.noOffset), children: actions }), children] }));
};
Hint.displayName = "Hint";

// node_modules/@patternfly/react-core/dist/esm/components/Hint/HintBody.js
var import_jsx_runtime144 = __toESM(require_jsx_runtime());
var HintBody = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime144.jsx)("div", Object.assign({ className: css(hint_default.hintBody, className) }, props, { children }));
};
HintBody.displayName = "HintBody";

// node_modules/@patternfly/react-core/dist/esm/components/Hint/HintFooter.js
var import_jsx_runtime145 = __toESM(require_jsx_runtime());
var HintFooter = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime145.jsx)("div", Object.assign({ className: css(hint_default.hintFooter, className) }, props, { children }));
};
HintFooter.displayName = "HintFooter";

// node_modules/@patternfly/react-core/dist/esm/components/Hint/HintTitle.js
var import_jsx_runtime146 = __toESM(require_jsx_runtime());
var HintTitle = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime146.jsx)("div", Object.assign({ className: css(hint_default.hintTitle, className) }, props, { children }));
};
HintTitle.displayName = "HintTitle";

// node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinks.js
var import_jsx_runtime149 = __toESM(require_jsx_runtime());
var import_react60 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/JumpLinks/jump-links.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/JumpLinks/jump-links.css";
var jump_links_default = {
  "dirRtl": "pf-v6-m-dir-rtl",
  "jumpLinks": "pf-v6-c-jump-links",
  "jumpLinksItem": "pf-v6-c-jump-links__item",
  "jumpLinksLabel": "pf-v6-c-jump-links__label",
  "jumpLinksLink": "pf-v6-c-jump-links__link",
  "jumpLinksLinkText": "pf-v6-c-jump-links__link-text",
  "jumpLinksList": "pf-v6-c-jump-links__list",
  "jumpLinksMain": "pf-v6-c-jump-links__main",
  "jumpLinksToggle": "pf-v6-c-jump-links__toggle",
  "jumpLinksToggleIcon": "pf-v6-c-jump-links__toggle-icon",
  "modifiers": {
    "center": "pf-m-center",
    "vertical": "pf-m-vertical",
    "expandable": "pf-m-expandable",
    "nonExpandable": "pf-m-non-expandable",
    "expandableOnSm": "pf-m-expandable-on-sm",
    "nonExpandableOnSm": "pf-m-non-expandable-on-sm",
    "expandableOnMd": "pf-m-expandable-on-md",
    "nonExpandableOnMd": "pf-m-non-expandable-on-md",
    "expandableOnLg": "pf-m-expandable-on-lg",
    "nonExpandableOnLg": "pf-m-non-expandable-on-lg",
    "expandableOnXl": "pf-m-expandable-on-xl",
    "nonExpandableOnXl": "pf-m-non-expandable-on-xl",
    "expandableOn_2xl": "pf-m-expandable-on-2xl",
    "nonExpandableOn_2xl": "pf-m-non-expandable-on-2xl",
    "expanded": "pf-m-expanded",
    "current": "pf-m-current"
  }
};

// node_modules/@patternfly/react-styles/css/components/Sidebar/sidebar.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Sidebar/sidebar.css";
var sidebar_default = {
  "modifiers": {
    "gutter": "pf-m-gutter",
    "panelRight": "pf-m-panel-right",
    "stack": "pf-m-stack",
    "split": "pf-m-split",
    "border": "pf-m-border",
    "padding": "pf-m-padding",
    "sticky": "pf-m-sticky",
    "static": "pf-m-static",
    "secondary": "pf-m-secondary",
    "noBackground": "pf-m-no-background",
    "widthDefault": "pf-m-width-default",
    "width_25": "pf-m-width-25",
    "width_33": "pf-m-width-33",
    "width_50": "pf-m-width-50",
    "width_66": "pf-m-width-66",
    "width_75": "pf-m-width-75",
    "width_100": "pf-m-width-100",
    "widthDefaultOnSm": "pf-m-width-default-on-sm",
    "width_25OnSm": "pf-m-width-25-on-sm",
    "width_33OnSm": "pf-m-width-33-on-sm",
    "width_50OnSm": "pf-m-width-50-on-sm",
    "width_66OnSm": "pf-m-width-66-on-sm",
    "width_75OnSm": "pf-m-width-75-on-sm",
    "width_100OnSm": "pf-m-width-100-on-sm",
    "widthDefaultOnMd": "pf-m-width-default-on-md",
    "width_25OnMd": "pf-m-width-25-on-md",
    "width_33OnMd": "pf-m-width-33-on-md",
    "width_50OnMd": "pf-m-width-50-on-md",
    "width_66OnMd": "pf-m-width-66-on-md",
    "width_75OnMd": "pf-m-width-75-on-md",
    "width_100OnMd": "pf-m-width-100-on-md",
    "widthDefaultOnLg": "pf-m-width-default-on-lg",
    "width_25OnLg": "pf-m-width-25-on-lg",
    "width_33OnLg": "pf-m-width-33-on-lg",
    "width_50OnLg": "pf-m-width-50-on-lg",
    "width_66OnLg": "pf-m-width-66-on-lg",
    "width_75OnLg": "pf-m-width-75-on-lg",
    "width_100OnLg": "pf-m-width-100-on-lg",
    "widthDefaultOnXl": "pf-m-width-default-on-xl",
    "width_25OnXl": "pf-m-width-25-on-xl",
    "width_33OnXl": "pf-m-width-33-on-xl",
    "width_50OnXl": "pf-m-width-50-on-xl",
    "width_66OnXl": "pf-m-width-66-on-xl",
    "width_75OnXl": "pf-m-width-75-on-xl",
    "width_100OnXl": "pf-m-width-100-on-xl",
    "widthDefaultOn_2xl": "pf-m-width-default-on-2xl",
    "width_25On_2xl": "pf-m-width-25-on-2xl",
    "width_33On_2xl": "pf-m-width-33-on-2xl",
    "width_50On_2xl": "pf-m-width-50-on-2xl",
    "width_66On_2xl": "pf-m-width-66-on-2xl",
    "width_75On_2xl": "pf-m-width-75-on-2xl",
    "width_100On_2xl": "pf-m-width-100-on-2xl"
  },
  "sidebar": "pf-v6-c-sidebar",
  "sidebarContent": "pf-v6-c-sidebar__content",
  "sidebarMain": "pf-v6-c-sidebar__main",
  "sidebarPanel": "pf-v6-c-sidebar__panel"
};

// node_modules/@patternfly/react-tokens/dist/esm/c_jump_links__toggle_Display.js
var c_jump_links__toggle_Display = {
  "name": "--pf-v6-c-jump-links__toggle--Display",
  "value": "none",
  "var": "var(--pf-v6-c-jump-links__toggle--Display)"
};
var c_jump_links_toggle_Display_default = c_jump_links__toggle_Display;

// node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinksItem.js
var import_jsx_runtime148 = __toESM(require_jsx_runtime());
var import_react59 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinksList.js
var import_jsx_runtime147 = __toESM(require_jsx_runtime());
var JumpLinksList = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime147.jsx)("ul", Object.assign({ className: css(jump_links_default.jumpLinksList, className), role: "list" }, props, { children }));
};
JumpLinksList.displayName = "JumpLinksList";

// node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinksItem.js
var JumpLinksItem = (_a) => {
  var {
    isActive,
    href,
    // eslint-disable-next-line
    node,
    children,
    onClick,
    className
  } = _a, props = __rest(_a, ["isActive", "href", "node", "children", "onClick", "className"]);
  const childrenArr = import_react59.Children.toArray(children);
  const sublists = childrenArr.filter((child) => child.type === JumpLinksList);
  children = childrenArr.filter((child) => child.type !== JumpLinksList);
  return (0, import_jsx_runtime148.jsxs)("li", Object.assign({ className: css(jump_links_default.jumpLinksItem, isActive && jump_links_default.modifiers.current, className) }, isActive && { "aria-current": "location" }, props, { children: [(0, import_jsx_runtime148.jsx)("span", { className: jump_links_default.jumpLinksLink, children: (0, import_jsx_runtime148.jsx)(Button, { variant: ButtonVariant.link, component: "a", href, onClick, children: (0, import_jsx_runtime148.jsx)("span", { className: jump_links_default.jumpLinksLinkText, children }) }) }), sublists] }));
};
JumpLinksItem.displayName = "JumpLinksItem";

// node_modules/@patternfly/react-core/dist/esm/components/JumpLinks/JumpLinks.js
var getScrollItems = (children, res) => {
  import_react60.Children.forEach(children, (child) => {
    if (canUseDOM && document.getElementById && document.querySelector && child.type === JumpLinksItem) {
      const scrollNode = child.props.node || child.props.href;
      if (typeof scrollNode === "string") {
        if (scrollNode.startsWith("#")) {
          res.push(document.getElementById(scrollNode.substr(1)));
        } else {
          res.push(document.querySelector(scrollNode));
        }
      } else if (scrollNode instanceof HTMLElement) {
        res.push(scrollNode);
      }
    }
    if ([import_react60.Fragment, JumpLinksList, JumpLinksItem].includes(child.type)) {
      getScrollItems(child.props.children, res);
    }
  });
  return res;
};
function isResponsive(jumpLinks) {
  return jumpLinks && getComputedStyle(jumpLinks).getPropertyValue(c_jump_links_toggle_Display_default.name).includes("block");
}
var JumpLinks = (_a) => {
  var { isCentered, isVertical, children, label, "aria-label": ariaLabel = typeof label === "string" ? label : null, scrollableRef, scrollableSelector, activeIndex: activeIndexProp = 0, offset = 0, expandable, isExpanded: isExpandedProp = false, alwaysShowLabel = true, toggleAriaLabel = "Toggle jump links", className, shouldReplaceNavHistory = false } = _a, props = __rest(_a, ["isCentered", "isVertical", "children", "label", "aria-label", "scrollableRef", "scrollableSelector", "activeIndex", "offset", "expandable", "isExpanded", "alwaysShowLabel", "toggleAriaLabel", "className", "shouldReplaceNavHistory"]);
  const hasScrollSpy = Boolean(scrollableRef || scrollableSelector);
  const [scrollItems, setScrollItems] = (0, import_react60.useState)(hasScrollSpy ? getScrollItems(children, []) : []);
  const [activeIndex, setActiveIndex] = (0, import_react60.useState)(activeIndexProp);
  const [isExpanded, setIsExpanded] = (0, import_react60.useState)(isExpandedProp);
  const isLinkClicked = (0, import_react60.useRef)(false);
  const navRef = (0, import_react60.useRef)(void 0);
  let scrollableElement;
  const getScrollableElement = () => {
    if (scrollableRef) {
      if (scrollableRef instanceof HTMLElement) {
        return scrollableRef;
      } else if (typeof scrollableRef === "function") {
        return scrollableRef();
      }
      return scrollableRef.current;
    } else if (scrollableSelector) {
      return document.querySelector(scrollableSelector);
    }
  };
  const scrollSpy = (0, import_react60.useCallback)(() => {
    if (!canUseDOM || !hasScrollSpy || !(scrollableElement instanceof HTMLElement)) {
      return;
    }
    if (isLinkClicked.current) {
      isLinkClicked.current = false;
      return;
    }
    const scrollPosition = Math.ceil(scrollableElement.scrollTop + offset);
    window.requestAnimationFrame(() => {
      let newScrollItems = scrollItems;
      const requiresRefresh = newScrollItems.every((e) => !(e === null || e === void 0 ? void 0 : e.offsetTop)) || !newScrollItems[0] || newScrollItems.includes(null);
      if (requiresRefresh) {
        newScrollItems = getScrollItems(children, []);
        setScrollItems(newScrollItems);
      }
      const scrollElements = newScrollItems.map((e, index) => ({
        y: e ? e.offsetTop : null,
        index
      })).filter(({ y }) => y !== null).sort((e1, e2) => e2.y - e1.y);
      for (const { y, index } of scrollElements) {
        if (scrollPosition >= y) {
          return setActiveIndex(index);
        }
      }
    });
  }, [scrollItems, hasScrollSpy, scrollableElement, offset]);
  (0, import_react60.useEffect)(() => {
    scrollableElement = getScrollableElement();
    if (!(scrollableElement instanceof HTMLElement)) {
      return;
    }
    scrollableElement.addEventListener("scroll", scrollSpy);
    return () => scrollableElement.removeEventListener("scroll", scrollSpy);
  }, [scrollableElement, scrollSpy, getScrollableElement]);
  (0, import_react60.useEffect)(() => {
    scrollSpy();
  }, []);
  let jumpLinkIndex = 0;
  const cloneChildren = (children2) => !hasScrollSpy ? children2 : import_react60.Children.map(children2, (child) => {
    if (child.type === JumpLinksItem) {
      const { onClick: onClickProp, isActive: isActiveProp } = child.props;
      const itemIndex = jumpLinkIndex++;
      const scrollItem = scrollItems[itemIndex];
      return (0, import_react60.cloneElement)(child, {
        onClick(ev) {
          isLinkClicked.current = true;
          let newScrollItems;
          if (!scrollItem) {
            newScrollItems = getScrollItems(children2, []);
            setScrollItems(newScrollItems);
          }
          const newScrollItem = scrollItem || newScrollItems[itemIndex];
          if (newScrollItem) {
            const scrollableElement2 = getScrollableElement();
            if (scrollableElement2 instanceof HTMLElement) {
              if (isResponsive(navRef.current)) {
                if (navRef.current) {
                  navRef.current.classList.remove(jump_links_default.modifiers.expanded);
                }
                let stickyParent = navRef.current && navRef.current.parentElement;
                while (stickyParent && !stickyParent.classList.contains(sidebar_default.modifiers.sticky)) {
                  stickyParent = stickyParent.parentElement;
                }
                setIsExpanded(false);
                if (stickyParent) {
                  offset += stickyParent.scrollHeight;
                }
              }
              scrollableElement2.scrollTo(0, newScrollItem.offsetTop - offset);
            }
            newScrollItem.focus();
            if (shouldReplaceNavHistory) {
              window.history.replaceState("", "", ev.currentTarget.href);
            } else {
              window.history.pushState("", "", ev.currentTarget.href);
            }
            ev.preventDefault();
            setActiveIndex(itemIndex);
          }
          if (onClickProp) {
            onClickProp(ev);
          }
        },
        isActive: isActiveProp || activeIndex === itemIndex,
        children: cloneChildren(child.props.children)
      });
    } else if (child.type === import_react60.Fragment) {
      return cloneChildren(child.props.children);
    } else if (child.type === JumpLinksList) {
      return (0, import_react60.cloneElement)(child, { children: cloneChildren(child.props.children) });
    }
    return child;
  });
  return (0, import_jsx_runtime149.jsx)("nav", Object.assign({ className: css(jump_links_default.jumpLinks, isCentered && jump_links_default.modifiers.center, isVertical && jump_links_default.modifiers.vertical, formatBreakpointMods(expandable, jump_links_default), isExpanded && jump_links_default.modifiers.expanded, className), "aria-label": ariaLabel, ref: navRef }, props, { children: (0, import_jsx_runtime149.jsxs)("div", { className: jump_links_default.jumpLinksMain, children: [(0, import_jsx_runtime149.jsxs)("div", { className: css(`${jump_links_default.jumpLinks}__header`), children: [expandable && (0, import_jsx_runtime149.jsx)("div", { className: jump_links_default.jumpLinksToggle, children: (0, import_jsx_runtime149.jsx)(Button, { variant: "plain", onClick: () => setIsExpanded(!isExpanded), "aria-label": toggleAriaLabel, "aria-expanded": isExpanded, icon: (0, import_jsx_runtime149.jsx)("span", { className: jump_links_default.jumpLinksToggleIcon, children: (0, import_jsx_runtime149.jsx)(angle_right_icon_default, {}) }), children: label && label }) }), label && alwaysShowLabel && (0, import_jsx_runtime149.jsx)("div", { className: css(jump_links_default.jumpLinksLabel), children: label })] }), (0, import_jsx_runtime149.jsx)("ul", { className: jump_links_default.jumpLinksList, role: "list", children: cloneChildren(children) })] }) }));
};
JumpLinks.displayName = "JumpLinks";

// node_modules/@patternfly/react-core/dist/esm/components/Label/Label.js
var import_jsx_runtime150 = __toESM(require_jsx_runtime());
var import_react61 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Label/label.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Label/label.css";
var label_default = {
  "button": "pf-v6-c-button",
  "label": "pf-v6-c-label",
  "labelActions": "pf-v6-c-label__actions",
  "labelContent": "pf-v6-c-label__content",
  "labelIcon": "pf-v6-c-label__icon",
  "labelText": "pf-v6-c-label__text",
  "modifiers": {
    "blue": "pf-m-blue",
    "red": "pf-m-red",
    "orange": "pf-m-orange",
    "orangered": "pf-m-orangered",
    "yellow": "pf-m-yellow",
    "green": "pf-m-green",
    "teal": "pf-m-teal",
    "purple": "pf-m-purple",
    "success": "pf-m-success",
    "warning": "pf-m-warning",
    "danger": "pf-m-danger",
    "info": "pf-m-info",
    "custom": "pf-m-custom",
    "compact": "pf-m-compact",
    "filled": "pf-m-filled",
    "outline": "pf-m-outline",
    "editable": "pf-m-editable",
    "editableActive": "pf-m-editable-active",
    "overflow": "pf-m-overflow",
    "add": "pf-m-add",
    "clickable": "pf-m-clickable",
    "disabled": "pf-m-disabled"
  }
};

// node_modules/@patternfly/react-styles/css/components/Label/label-group.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Label/label-group.css";
var label_group_default = {
  "button": "pf-v6-c-button",
  "labelGroup": "pf-v6-c-label-group",
  "labelGroupClose": "pf-v6-c-label-group__close",
  "labelGroupLabel": "pf-v6-c-label-group__label",
  "labelGroupList": "pf-v6-c-label-group__list",
  "labelGroupListItem": "pf-v6-c-label-group__list-item",
  "labelGroupMain": "pf-v6-c-label-group__main",
  "labelGroupTextarea": "pf-v6-c-label-group__textarea",
  "modifiers": {
    "category": "pf-m-category",
    "vertical": "pf-m-vertical",
    "editable": "pf-m-editable",
    "textarea": "pf-m-textarea"
  }
};

// node_modules/@patternfly/react-tokens/dist/esm/c_label__text_MaxWidth.js
var c_label__text_MaxWidth = {
  "name": "--pf-v6-c-label__text--MaxWidth",
  "value": "100%",
  "var": "var(--pf-v6-c-label__text--MaxWidth)"
};
var c_label_text_MaxWidth_default = c_label__text_MaxWidth;

// node_modules/@patternfly/react-core/dist/esm/components/Label/Label.js
var colorStyles = {
  blue: label_default.modifiers.blue,
  teal: label_default.modifiers.teal,
  green: label_default.modifiers.green,
  orange: label_default.modifiers.orange,
  purple: label_default.modifiers.purple,
  red: label_default.modifiers.red,
  orangered: label_default.modifiers.orangered,
  yellow: label_default.modifiers.yellow,
  grey: ""
};
var statusIcons2 = {
  success: (0, import_jsx_runtime150.jsx)(check_circle_icon_default, {}),
  warning: (0, import_jsx_runtime150.jsx)(exclamation_triangle_icon_default, {}),
  danger: (0, import_jsx_runtime150.jsx)(exclamation_circle_icon_default, {}),
  info: (0, import_jsx_runtime150.jsx)(info_circle_icon_default, {}),
  custom: (0, import_jsx_runtime150.jsx)(bell_icon_default, {})
};
var Label = (_a) => {
  var { children, className = "", color = "grey", variant = "filled", status, isCompact = false, isDisabled = false, isEditable = false, isClickable: isClickableProp = false, editableProps, textMaxWidth, tooltipPosition, icon, onClose, onClick: onLabelClick, onEditCancel, onEditComplete, closeBtn, closeBtnAriaLabel, closeBtnProps, href, render } = _a, props = __rest(_a, ["children", "className", "color", "variant", "status", "isCompact", "isDisabled", "isEditable", "isClickable", "editableProps", "textMaxWidth", "tooltipPosition", "icon", "onClose", "onClick", "onEditCancel", "onEditComplete", "closeBtn", "closeBtnAriaLabel", "closeBtnProps", "href", "render"]);
  const [isEditableActive, setIsEditableActive] = (0, import_react61.useState)(false);
  const [currValue, setCurrValue] = (0, import_react61.useState)(children);
  const editableButtonRef = (0, import_react61.useRef)(void 0);
  const editableInputRef = (0, import_react61.useRef)(void 0);
  const isOverflowLabel = variant === "overflow";
  const isAddLabel = variant === "add";
  const isClickable = isClickableProp || onLabelClick && !isOverflowLabel && !isAddLabel || href;
  let _icon;
  if (status) {
    _icon = statusIcons2[status];
  }
  if (icon) {
    _icon = icon;
  }
  (0, import_react61.useEffect)(() => {
    const onDocMouseDown = (event) => {
      if (isEditableActive && editableInputRef && editableInputRef.current && !editableInputRef.current.contains(event.target)) {
        if (editableInputRef.current.value) {
          onEditComplete && onEditComplete(event, editableInputRef.current.value);
        }
        setIsEditableActive(false);
      }
    };
    const onKeyDown = (event) => {
      var _a2, _b;
      const key = event.key;
      if (!isEditableActive && (!editableButtonRef || !editableButtonRef.current || !editableButtonRef.current.contains(event.target)) || isEditableActive && (!editableInputRef || !editableInputRef.current || !editableInputRef.current.contains(event.target))) {
        return;
      }
      if (isEditableActive && (key === "Enter" || key === "Tab")) {
        event.preventDefault();
        event.stopImmediatePropagation();
        if (editableInputRef.current.value) {
          onEditComplete && onEditComplete(event, editableInputRef.current.value);
        }
        setIsEditableActive(false);
        (_a2 = editableButtonRef === null || editableButtonRef === void 0 ? void 0 : editableButtonRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus();
      }
      if (isEditableActive && key === "Escape") {
        event.preventDefault();
        event.stopImmediatePropagation();
        if (editableInputRef.current.value) {
          editableInputRef.current.value = children;
          onEditCancel && onEditCancel(event, children);
        }
        setIsEditableActive(false);
        (_b = editableButtonRef === null || editableButtonRef === void 0 ? void 0 : editableButtonRef.current) === null || _b === void 0 ? void 0 : _b.focus();
      }
      if (!isEditableActive && key === "Enter") {
        event.preventDefault();
        event.stopImmediatePropagation();
        setIsEditableActive(true);
        const el = event.target;
        const range = document.createRange();
        const sel = window.getSelection();
        range.selectNodeContents(el);
        range.collapse(false);
        sel.removeAllRanges();
        sel.addRange(range);
      }
    };
    document.addEventListener("mousedown", onDocMouseDown);
    document.addEventListener("keydown", onKeyDown);
    return () => {
      document.removeEventListener("mousedown", onDocMouseDown);
      document.removeEventListener("keydown", onKeyDown);
    };
  }, [isEditableActive, editableInputRef, editableButtonRef, onEditComplete, onEditCancel, children]);
  (0, import_react61.useEffect)(() => {
    if (onLabelClick && href) {
      console.warn("Link labels cannot have onClick passed, this results in invalid HTML. Please remove either the href or onClick prop.");
    } else if (onLabelClick && isEditable) {
      console.warn("Editable labels cannot have onClick passed, clicking starts the label edit process. Please remove either the isEditable or onClick prop.");
    }
  }, [onLabelClick, href, isEditable]);
  const isClickableDisabled = (href || onLabelClick) && isDisabled;
  const defaultCloseButton = (0, import_jsx_runtime150.jsx)(Button, Object.assign({ type: "button", variant: "plain", hasNoPadding: true, onClick: onClose, "aria-label": closeBtnAriaLabel || `Close ${children}` }, isClickableDisabled && { isDisabled: true }, closeBtnProps, { icon: (0, import_jsx_runtime150.jsx)(times_icon_default, {}) }));
  const closeButton = (0, import_jsx_runtime150.jsx)("span", { className: css(label_default.labelActions), children: closeBtn || defaultCloseButton });
  const textRef = (0, import_react61.createRef)();
  const componentRef = (0, import_react61.useRef)(void 0);
  const [isTooltipVisible, setIsTooltipVisible] = (0, import_react61.useState)(false);
  useIsomorphicLayoutEffect(() => {
    const currTextRef = isEditable ? editableButtonRef : textRef;
    if (!isEditableActive) {
      setIsTooltipVisible(currTextRef.current && currTextRef.current.offsetWidth < currTextRef.current.scrollWidth);
    }
  }, [isEditableActive]);
  const content = (0, import_jsx_runtime150.jsxs)(import_react61.Fragment, { children: [_icon && (0, import_jsx_runtime150.jsx)("span", { className: css(label_default.labelIcon), children: _icon }), (0, import_jsx_runtime150.jsx)("span", Object.assign({ ref: textRef, className: css(label_default.labelText) }, textMaxWidth && {
    style: {
      [c_label_text_MaxWidth_default.name]: textMaxWidth
    }
  }, { children }))] });
  (0, import_react61.useEffect)(() => {
    if (isEditableActive && editableInputRef) {
      editableInputRef.current && editableInputRef.current.focus();
    }
  }, [editableInputRef, isEditableActive]);
  const updateVal = () => {
    setCurrValue(editableInputRef.current.value);
  };
  let LabelComponentChildElement = "span";
  if (href) {
    LabelComponentChildElement = "a";
  } else if (isEditable || onLabelClick && !isOverflowLabel && !isAddLabel) {
    LabelComponentChildElement = "button";
  }
  const clickableLabelProps = {
    type: "button",
    onClick: onLabelClick
  };
  const isButton = LabelComponentChildElement === "button";
  const labelComponentChildProps = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ className: css(label_default.labelContent, isClickable && label_default.modifiers.clickable) }, isTooltipVisible && { tabIndex: 0 }), href && { href }), href && isDisabled && { onClick: (event) => event.preventDefault() }), isButton && clickableLabelProps), isEditable && Object.assign({ ref: editableButtonRef, onClick: (e) => {
    setIsEditableActive(true);
    e.stopPropagation();
  } }, editableProps)), isClickableDisabled && isButton && { disabled: true }), isClickableDisabled && href && { tabIndex: -1, "aria-disabled": true });
  let labelComponentChild = (0, import_jsx_runtime150.jsx)(LabelComponentChildElement, Object.assign({}, labelComponentChildProps, { children: content }));
  if (render) {
    labelComponentChild = (0, import_jsx_runtime150.jsxs)(import_react61.Fragment, { children: [isTooltipVisible && (0, import_jsx_runtime150.jsx)(Tooltip, { triggerRef: componentRef, content: children, position: tooltipPosition }), render({
      className: label_default.labelContent,
      content,
      componentRef
    })] });
  } else if (isTooltipVisible) {
    labelComponentChild = (0, import_jsx_runtime150.jsx)(Tooltip, { content: children, position: tooltipPosition, children: labelComponentChild });
  }
  const LabelComponent = isOverflowLabel ? "button" : "span";
  return (0, import_jsx_runtime150.jsxs)(LabelComponent, Object.assign({}, props, { className: css(label_default.label, isClickableDisabled && label_default.modifiers.disabled, colorStyles[color], variant === "filled" && label_default.modifiers.filled, variant === "outline" && label_default.modifiers.outline, status && label_default.modifiers[status], isOverflowLabel && label_default.modifiers.overflow, isCompact && label_default.modifiers.compact, isEditable && label_group_default.modifiers.editable, isEditableActive && label_default.modifiers.editableActive, isClickable && label_default.modifiers.clickable, isAddLabel && label_default.modifiers.add, className), onClick: isOverflowLabel || isAddLabel ? onLabelClick : void 0 }, LabelComponent === "button" && { type: "button" }, { children: [!isEditableActive && labelComponentChild, !isEditableActive && onClose && closeButton, isEditableActive && (0, import_jsx_runtime150.jsx)("input", Object.assign({ className: css(label_default.labelContent), type: "text", id: "editable-input", ref: editableInputRef, value: currValue, onChange: updateVal }, editableProps))] }));
};
Label.displayName = "Label";

// node_modules/@patternfly/react-core/dist/esm/components/Label/LabelGroup.js
var import_jsx_runtime151 = __toESM(require_jsx_runtime());
var import_react62 = __toESM(require_react());
var LabelGroup = class extends import_react62.Component {
  constructor(props) {
    super(props);
    this.headingRef = (0, import_react62.createRef)();
    this.toggleCollapse = () => {
      this.setState((prevState) => ({
        isOpen: !prevState.isOpen,
        isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)
      }));
    };
    this.state = {
      isOpen: this.props.defaultIsOpen,
      isTooltipVisible: false
    };
  }
  componentDidMount() {
    this.setState({
      isTooltipVisible: Boolean(this.headingRef.current && this.headingRef.current.offsetWidth < this.headingRef.current.scrollWidth)
    });
  }
  renderLabel(id) {
    const { categoryName, tooltipPosition } = this.props;
    const { isTooltipVisible } = this.state;
    return isTooltipVisible ? (0, import_jsx_runtime151.jsx)(Tooltip, { position: tooltipPosition, content: categoryName, children: (0, import_jsx_runtime151.jsx)("span", { tabIndex: 0, ref: this.headingRef, className: css(label_group_default.labelGroupLabel), children: (0, import_jsx_runtime151.jsx)("span", { "aria-hidden": "true", id, children: categoryName }) }) }) : (0, import_jsx_runtime151.jsx)("span", { ref: this.headingRef, className: css(label_group_default.labelGroupLabel), "aria-hidden": "true", id, children: categoryName });
  }
  render() {
    const _a = this.props, {
      categoryName,
      children,
      className,
      isClosable,
      isCompact,
      closeBtnAriaLabel,
      "aria-label": ariaLabel,
      onClick,
      numLabels,
      expandedText,
      collapsedText,
      /* eslint-disable @typescript-eslint/no-unused-vars */
      defaultIsOpen,
      tooltipPosition,
      isVertical,
      isEditable,
      hasEditableTextArea,
      editableTextAreaProps,
      addLabelControl
    } = _a, rest = __rest(_a, ["categoryName", "children", "className", "isClosable", "isCompact", "closeBtnAriaLabel", "aria-label", "onClick", "numLabels", "expandedText", "collapsedText", "defaultIsOpen", "tooltipPosition", "isVertical", "isEditable", "hasEditableTextArea", "editableTextAreaProps", "addLabelControl"]);
    const { isOpen } = this.state;
    const renderedChildren = import_react62.Children.toArray(children);
    const numChildren = renderedChildren.length;
    const collapsedTextResult = fillTemplate(collapsedText, {
      remaining: numChildren - numLabels
    });
    const renderLabelGroup = (id) => {
      const labelArray = !isOpen ? renderedChildren.slice(0, numLabels) : renderedChildren;
      const content = (0, import_jsx_runtime151.jsxs)(import_react62.Fragment, { children: [categoryName && this.renderLabel(id), (0, import_jsx_runtime151.jsxs)("ul", Object.assign({ className: css(label_group_default.labelGroupList) }, categoryName && { "aria-labelledby": id }, !categoryName && { "aria-label": ariaLabel }, { role: "list" }, rest, { children: [labelArray.map((child, i) => (0, import_jsx_runtime151.jsx)("li", { className: css(label_group_default.labelGroupListItem), children: child }, i)), numChildren > numLabels && (0, import_jsx_runtime151.jsx)("li", { className: css(label_group_default.labelGroupListItem), children: (0, import_jsx_runtime151.jsx)(Label, { variant: "overflow", onClick: this.toggleCollapse, className: css(isCompact && label_default.modifiers.compact), children: isOpen ? expandedText : collapsedTextResult }) }), addLabelControl && (0, import_jsx_runtime151.jsx)("li", { className: css(label_group_default.labelGroupListItem), children: addLabelControl }), isEditable && hasEditableTextArea && (0, import_jsx_runtime151.jsx)("li", { className: css(label_group_default.labelGroupListItem, label_group_default.modifiers.textarea), children: (0, import_jsx_runtime151.jsx)("textarea", Object.assign({ className: css(label_group_default.labelGroupTextarea), rows: 1, tabIndex: 0 }, editableTextAreaProps)) })] }))] });
      const close = (0, import_jsx_runtime151.jsx)("div", { className: css(label_group_default.labelGroupClose), children: (0, import_jsx_runtime151.jsx)(Button, { variant: "plain", hasNoPadding: true, "aria-label": closeBtnAriaLabel, onClick, id: `remove_group_${id}`, "aria-labelledby": `remove_group_${id} ${id}`, icon: (0, import_jsx_runtime151.jsx)(times_circle_icon_default, {}) }) });
      return (0, import_jsx_runtime151.jsxs)("div", { className: css(label_group_default.labelGroup, className, categoryName && label_group_default.modifiers.category, isVertical && label_group_default.modifiers.vertical, isEditable && label_group_default.modifiers.editable), children: [(0, import_jsx_runtime151.jsx)("div", { className: css(label_group_default.labelGroupMain), children: content }), isClosable && close] });
    };
    return numChildren === 0 && addLabelControl === void 0 ? null : (0, import_jsx_runtime151.jsx)(GenerateId, { children: (randomId) => renderLabelGroup(this.props.id || randomId) });
  }
};
LabelGroup.displayName = "LabelGroup";
LabelGroup.defaultProps = {
  expandedText: "Show Less",
  collapsedText: "${remaining} more",
  categoryName: "",
  defaultIsOpen: false,
  numLabels: 3,
  isClosable: false,
  isCompact: false,
  onClick: (_e) => void 0,
  closeBtnAriaLabel: "Close label group",
  tooltipPosition: "top",
  "aria-label": "Label group category",
  isVertical: false,
  isEditable: false,
  hasEditableTextArea: false
};

// node_modules/@patternfly/react-core/dist/esm/components/List/List.js
var import_jsx_runtime152 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/List/list.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/List/list.css";
var list_default = {
  "list": "pf-v6-c-list",
  "listItem": "pf-v6-c-list__item",
  "listItemIcon": "pf-v6-c-list__item-icon",
  "modifiers": {
    "iconLg": "pf-m-icon-lg",
    "plain": "pf-m-plain",
    "inline": "pf-m-inline",
    "bordered": "pf-m-bordered"
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/List/List.js
var OrderType;
(function(OrderType2) {
  OrderType2["number"] = "1";
  OrderType2["lowercaseLetter"] = "a";
  OrderType2["uppercaseLetter"] = "A";
  OrderType2["lowercaseRomanNumber"] = "i";
  OrderType2["uppercaseRomanNumber"] = "I";
})(OrderType || (OrderType = {}));
var ListVariant;
(function(ListVariant2) {
  ListVariant2["inline"] = "inline";
})(ListVariant || (ListVariant = {}));
var ListComponent;
(function(ListComponent2) {
  ListComponent2["ol"] = "ol";
  ListComponent2["ul"] = "ul";
})(ListComponent || (ListComponent = {}));
var List = (_a) => {
  var { className = "", children = null, variant = null, isBordered = false, isPlain = false, iconSize = "default", type = OrderType.number, ref = null, component = ListComponent.ul, "aria-label": ariaLabel } = _a, props = __rest(_a, ["className", "children", "variant", "isBordered", "isPlain", "iconSize", "type", "ref", "component", "aria-label"]);
  return component === ListComponent.ol ? (0, import_jsx_runtime152.jsx)("ol", Object.assign({ ref, type, "aria-label": ariaLabel }, isPlain && { role: "list" }, props, { className: css(list_default.list, variant && list_default.modifiers[variant], isBordered && list_default.modifiers.bordered, isPlain && list_default.modifiers.plain, iconSize && iconSize === "large" && list_default.modifiers.iconLg, className), children })) : (0, import_jsx_runtime152.jsx)("ul", Object.assign({ ref, "aria-label": ariaLabel }, isPlain && { role: "list" }, props, { className: css(list_default.list, variant && list_default.modifiers[variant], isBordered && list_default.modifiers.bordered, isPlain && list_default.modifiers.plain, iconSize && iconSize === "large" && list_default.modifiers.iconLg, className), children }));
};
List.displayName = "List";

// node_modules/@patternfly/react-core/dist/esm/components/List/ListItem.js
var import_jsx_runtime153 = __toESM(require_jsx_runtime());
var ListItem = (_a) => {
  var { className, children = null, icon = null } = _a, props = __rest(_a, ["className", "children", "icon"]);
  return (0, import_jsx_runtime153.jsxs)("li", Object.assign({ className: css(icon && list_default.listItem, className) }, props, { children: [icon && (0, import_jsx_runtime153.jsx)("span", { className: css(list_default.listItemIcon), children: icon }), (0, import_jsx_runtime153.jsx)("span", { className: icon && css(`${list_default.list}__item-text`), children })] }));
};
ListItem.displayName = "ListItem";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginPage.js
var import_jsx_runtime160 = __toESM(require_jsx_runtime());
var import_react63 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/Login.js
var import_jsx_runtime154 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/Login/login.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Login/login.css";
var login_default = {
  "brand": "pf-v6-c-brand",
  "button": "pf-v6-c-button",
  "list": "pf-v6-c-list",
  "login": "pf-v6-c-login",
  "loginContainer": "pf-v6-c-login__container",
  "loginFooter": "pf-v6-c-login__footer",
  "loginHeader": "pf-v6-c-login__header",
  "loginMain": "pf-v6-c-login__main",
  "loginMainBody": "pf-v6-c-login__main-body",
  "loginMainFooter": "pf-v6-c-login__main-footer",
  "loginMainFooterBand": "pf-v6-c-login__main-footer-band",
  "loginMainFooterLinks": "pf-v6-c-login__main-footer-links",
  "loginMainFooterLinksItem": "pf-v6-c-login__main-footer-links-item",
  "loginMainHeader": "pf-v6-c-login__main-header",
  "loginMainHeaderDesc": "pf-v6-c-login__main-header-desc",
  "loginMainHeaderUtilities": "pf-v6-c-login__main-header-utilities",
  "menuToggle": "pf-v6-c-menu-toggle",
  "title": "pf-v6-c-title"
};

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/Login.js
var Login = (_a) => {
  var { className = "", children = null, footer = null, header = null } = _a, props = __rest(_a, ["className", "children", "footer", "header"]);
  return (0, import_jsx_runtime154.jsx)("div", Object.assign({}, props, { className: css(login_default.login, className), children: (0, import_jsx_runtime154.jsxs)("div", { className: css(login_default.loginContainer), children: [header, (0, import_jsx_runtime154.jsx)("main", { className: css(login_default.loginMain), children }), footer] }) }));
};
Login.displayName = "Login";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginHeader.js
var import_jsx_runtime155 = __toESM(require_jsx_runtime());
var LoginHeader = (_a) => {
  var { className = "", children = null, headerBrand = null } = _a, props = __rest(_a, ["className", "children", "headerBrand"]);
  return (0, import_jsx_runtime155.jsxs)("header", Object.assign({ className: css(login_default.loginHeader, className) }, props, { children: [headerBrand, children] }));
};
LoginHeader.displayName = "LoginHeader";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginFooter.js
var import_jsx_runtime156 = __toESM(require_jsx_runtime());
var LoginFooter = (_a) => {
  var { className = "", children = null } = _a, props = __rest(_a, ["className", "children"]);
  return (0, import_jsx_runtime156.jsx)("footer", Object.assign({ className: css(login_default.loginFooter, className) }, props, { children }));
};
LoginFooter.displayName = "LoginFooter";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainHeader.js
var import_jsx_runtime157 = __toESM(require_jsx_runtime());
var LoginMainHeader = (_a) => {
  var { children = null, className = "", title = "", subtitle = "", headerUtilities = null } = _a, props = __rest(_a, ["children", "className", "title", "subtitle", "headerUtilities"]);
  return (0, import_jsx_runtime157.jsxs)("div", Object.assign({ className: css(login_default.loginMainHeader, className) }, props, { children: [title && (0, import_jsx_runtime157.jsx)(Title, { headingLevel: "h2", size: TitleSizes["3xl"], children: title }), subtitle && (0, import_jsx_runtime157.jsx)("p", { className: css(login_default.loginMainHeaderDesc), children: subtitle }), headerUtilities && (0, import_jsx_runtime157.jsx)("div", { className: css(login_default.loginMainHeaderUtilities), children: headerUtilities }), children] }));
};
LoginMainHeader.displayName = "LoginMainHeader";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainBody.js
var import_jsx_runtime158 = __toESM(require_jsx_runtime());
var LoginMainBody = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime158.jsx)("div", Object.assign({ className: css(login_default.loginMainBody, className) }, props, { children }));
};
LoginMainBody.displayName = "LoginMainBody";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainFooter.js
var import_jsx_runtime159 = __toESM(require_jsx_runtime());
var LoginMainFooter = (_a) => {
  var { children = null, socialMediaLoginContent = null, signUpForAccountMessage = null, forgotCredentials = null, className = "", socialMediaLoginAriaLabel } = _a, props = __rest(_a, ["children", "socialMediaLoginContent", "signUpForAccountMessage", "forgotCredentials", "className", "socialMediaLoginAriaLabel"]);
  return (0, import_jsx_runtime159.jsxs)("div", Object.assign({ className: css(login_default.loginMainFooter, className) }, props, { children: [children, socialMediaLoginContent && (0, import_jsx_runtime159.jsx)("ul", { className: css(login_default.loginMainFooterLinks), "aria-label": socialMediaLoginAriaLabel, role: "list", children: socialMediaLoginContent }), (signUpForAccountMessage || forgotCredentials) && (0, import_jsx_runtime159.jsxs)("div", { className: css(login_default.loginMainFooterBand), children: [signUpForAccountMessage, forgotCredentials] })] }));
};
LoginMainFooter.displayName = "LoginMainFooter";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginPage.js
var LoginPage = (_a) => {
  var { children = null, className = "", brandImgSrc = "", brandImgAlt = "", backgroundImgSrc = "", footerListItems = null, textContent = "", footerListVariants, loginTitle, loginSubtitle, headerUtilities, signUpForAccountMessage = null, forgotCredentials = null, socialMediaLoginContent = null, socialMediaLoginAriaLabel } = _a, props = __rest(_a, ["children", "className", "brandImgSrc", "brandImgAlt", "backgroundImgSrc", "footerListItems", "textContent", "footerListVariants", "loginTitle", "loginSubtitle", "headerUtilities", "signUpForAccountMessage", "forgotCredentials", "socialMediaLoginContent", "socialMediaLoginAriaLabel"]);
  const HeaderBrand = (0, import_jsx_runtime160.jsx)(import_react63.Fragment, { children: (0, import_jsx_runtime160.jsx)(Brand, { src: brandImgSrc, alt: brandImgAlt }) });
  const Header = (0, import_jsx_runtime160.jsx)(LoginHeader, { headerBrand: HeaderBrand });
  const Footer = (0, import_jsx_runtime160.jsxs)(LoginFooter, { children: [(0, import_jsx_runtime160.jsx)("p", { children: textContent }), (0, import_jsx_runtime160.jsx)(List, { variant: footerListVariants, children: footerListItems })] });
  return (0, import_jsx_runtime160.jsxs)(import_react63.Fragment, { children: [backgroundImgSrc && (0, import_jsx_runtime160.jsx)(BackgroundImage, { src: backgroundImgSrc }), (0, import_jsx_runtime160.jsxs)(Login, Object.assign({ header: Header, footer: Footer, className: css(className) }, props, { children: [(0, import_jsx_runtime160.jsx)(LoginMainHeader, { title: loginTitle, subtitle: loginSubtitle, headerUtilities }), (0, import_jsx_runtime160.jsx)(LoginMainBody, { children }), (socialMediaLoginContent || forgotCredentials || signUpForAccountMessage) && (0, import_jsx_runtime160.jsx)(LoginMainFooter, { socialMediaLoginContent, socialMediaLoginAriaLabel, forgotCredentials, signUpForAccountMessage })] }))] });
};
LoginPage.displayName = "LoginPage";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginForm.js
var import_jsx_runtime161 = __toESM(require_jsx_runtime());
var import_react64 = __toESM(require_react());
var LoginForm = (_a) => {
  var { noAutoFocus = false, className = "", showHelperText = false, helperText = null, helperTextIcon = null, usernameLabel = "Username", usernameValue = "", onChangeUsername = () => void 0, isValidUsername = true, isPasswordRequired = true, passwordLabel = "Password", passwordValue = "", onChangePassword = () => void 0, isShowPasswordEnabled = false, hidePasswordAriaLabel = "Hide password", showPasswordAriaLabel = "Show password", isValidPassword = true, loginButtonLabel = "Log In", isLoginButtonDisabled = false, onLoginButtonClick = () => void 0, rememberMeLabel = "", isRememberMeChecked = false, onChangeRememberMe = () => void 0 } = _a, props = __rest(_a, ["noAutoFocus", "className", "showHelperText", "helperText", "helperTextIcon", "usernameLabel", "usernameValue", "onChangeUsername", "isValidUsername", "isPasswordRequired", "passwordLabel", "passwordValue", "onChangePassword", "isShowPasswordEnabled", "hidePasswordAriaLabel", "showPasswordAriaLabel", "isValidPassword", "loginButtonLabel", "isLoginButtonDisabled", "onLoginButtonClick", "rememberMeLabel", "isRememberMeChecked", "onChangeRememberMe"]);
  const [passwordHidden, setPasswordHidden] = (0, import_react64.useState)(true);
  const passwordInput = (0, import_jsx_runtime161.jsx)(TextInput, { isRequired: isPasswordRequired, type: passwordHidden ? "password" : "text", id: "pf-login-password-id", name: "pf-login-password-id", validated: isValidPassword ? ValidatedOptions.default : ValidatedOptions.error, value: passwordValue, onChange: onChangePassword });
  return (0, import_jsx_runtime161.jsxs)(Form, Object.assign({ className }, props, { children: [showHelperText && (0, import_jsx_runtime161.jsx)(FormHelperText, { children: (0, import_jsx_runtime161.jsx)(HelperText, { children: (0, import_jsx_runtime161.jsx)(HelperTextItem, { variant: !isValidUsername || !isValidPassword ? "error" : "default", icon: helperTextIcon, children: helperText }) }) }), (0, import_jsx_runtime161.jsx)(FormGroup, { label: usernameLabel, isRequired: true, fieldId: "pf-login-username-id", children: (0, import_jsx_runtime161.jsx)(TextInput, { autoFocus: !noAutoFocus, id: "pf-login-username-id", isRequired: true, validated: isValidUsername ? ValidatedOptions.default : ValidatedOptions.error, type: "text", name: "pf-login-username-id", value: usernameValue, onChange: onChangeUsername }) }), (0, import_jsx_runtime161.jsxs)(FormGroup, { label: passwordLabel, isRequired: isPasswordRequired, fieldId: "pf-login-password-id", children: [isShowPasswordEnabled && (0, import_jsx_runtime161.jsxs)(InputGroup, { children: [(0, import_jsx_runtime161.jsx)(InputGroupItem, { isFill: true, children: passwordInput }), (0, import_jsx_runtime161.jsx)(InputGroupItem, { children: (0, import_jsx_runtime161.jsx)(Button, { variant: "control", onClick: () => setPasswordHidden(!passwordHidden), "aria-label": passwordHidden ? showPasswordAriaLabel : hidePasswordAriaLabel, icon: passwordHidden ? (0, import_jsx_runtime161.jsx)(eye_icon_default, {}) : (0, import_jsx_runtime161.jsx)(eye_slash_icon_default, {}) }) })] }), !isShowPasswordEnabled && passwordInput] }), rememberMeLabel.length > 0 && (0, import_jsx_runtime161.jsx)(FormGroup, { fieldId: "pf-login-remember-me-id", children: (0, import_jsx_runtime161.jsx)(Checkbox, { id: "pf-login-remember-me-id", label: rememberMeLabel, isChecked: isRememberMeChecked, onChange: onChangeRememberMe }) }), (0, import_jsx_runtime161.jsx)(ActionGroup, { children: (0, import_jsx_runtime161.jsx)(Button, { variant: "primary", type: "submit", onClick: onLoginButtonClick, isBlock: true, isDisabled: isLoginButtonDisabled, children: loginButtonLabel }) })] }));
};
LoginForm.displayName = "LoginForm";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginFooterItem.js
var import_jsx_runtime162 = __toESM(require_jsx_runtime());
var import_react65 = __toESM(require_react());
var LoginFooterItem = (_a) => {
  var { children = null, href = "#", target = "_blank" } = _a, props = __rest(_a, ["children", "href", "target"]);
  return (0, import_react65.isValidElement)(children) ? children : (0, import_jsx_runtime162.jsx)("a", Object.assign({ target, href }, props, { children }));
};
LoginFooterItem.displayName = "LoginFooterItem";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainFooterBandItem.js
var import_jsx_runtime163 = __toESM(require_jsx_runtime());
var LoginMainFooterBandItem = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime163.jsx)("p", Object.assign({ className: css(`${login_default.loginMainFooterBand}-item`, className) }, props, { children }));
};
LoginMainFooterBandItem.displayName = "LoginMainFooterBandItem";

// node_modules/@patternfly/react-core/dist/esm/components/LoginPage/LoginMainFooterLinksItem.js
var import_jsx_runtime164 = __toESM(require_jsx_runtime());
var LoginMainFooterLinksItem = (_a) => {
  var { children = null, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime164.jsx)("li", Object.assign({ className: css(login_default.loginMainFooterLinksItem, className) }, props, { children }));
};
LoginMainFooterLinksItem.displayName = "LoginMainFooterLinksItem";

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/Masthead.js
var import_jsx_runtime165 = __toESM(require_jsx_runtime());
var import_react67 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Masthead/masthead.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Masthead/masthead.css";
var masthead_default = {
  "masthead": "pf-v6-c-masthead",
  "mastheadBrand": "pf-v6-c-masthead__brand",
  "mastheadContent": "pf-v6-c-masthead__content",
  "mastheadExpandableContent": "pf-v6-c-masthead__expandable-content",
  "mastheadLogo": "pf-v6-c-masthead__logo",
  "mastheadMain": "pf-v6-c-masthead__main",
  "mastheadToggle": "pf-v6-c-masthead__toggle",
  "modifiers": {
    "resizeObserver": "pf-m-resize-observer",
    "displayStack": "pf-m-display-stack",
    "displayInline": "pf-m-display-inline",
    "insetNone": "pf-m-inset-none",
    "insetSm": "pf-m-inset-sm",
    "insetMd": "pf-m-inset-md",
    "insetLg": "pf-m-inset-lg",
    "insetXl": "pf-m-inset-xl",
    "inset_2xl": "pf-m-inset-2xl",
    "displayStackOnSm": "pf-m-display-stack-on-sm",
    "displayInlineOnSm": "pf-m-display-inline-on-sm",
    "displayStackOnMd": "pf-m-display-stack-on-md",
    "displayInlineOnMd": "pf-m-display-inline-on-md",
    "displayStackOnLg": "pf-m-display-stack-on-lg",
    "displayInlineOnLg": "pf-m-display-inline-on-lg",
    "displayStackOnXl": "pf-m-display-stack-on-xl",
    "displayInlineOnXl": "pf-m-display-inline-on-xl",
    "displayStackOn_2xl": "pf-m-display-stack-on-2xl",
    "displayInlineOn_2xl": "pf-m-display-inline-on-2xl"
  },
  "toolbar": "pf-v6-c-toolbar",
  "toolbarContentSection": "pf-v6-c-toolbar__content-section",
  "toolbarExpandableContent": "pf-v6-c-toolbar__expandable-content"
};

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageContext.js
var import_react66 = __toESM(require_react());
var pageContextDefaults = {
  isManagedSidebar: false,
  isSidebarOpen: false,
  onSidebarToggle: () => null,
  width: null,
  height: null,
  getBreakpoint,
  getVerticalBreakpoint
};
var PageContext = (0, import_react66.createContext)(pageContextDefaults);
var PageContextProvider = PageContext.Provider;
var PageContextConsumer = PageContext.Consumer;

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/Masthead.js
var Masthead = (_a) => {
  var { children, className, display = {
    md: "inline"
  }, inset } = _a, props = __rest(_a, ["children", "className", "display", "inset"]);
  const { width, getBreakpoint: getBreakpoint2 } = (0, import_react67.useContext)(PageContext);
  return (0, import_jsx_runtime165.jsx)("header", Object.assign({ className: css(masthead_default.masthead, formatBreakpointMods(display, masthead_default, "display-", getBreakpoint2(width)), formatBreakpointMods(inset, masthead_default, "", getBreakpoint2(width)), className) }, props, { children }));
};
Masthead.displayName = "Masthead";

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadBrand.js
var import_jsx_runtime166 = __toESM(require_jsx_runtime());
var MastheadBrand = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime166.jsx)("div", Object.assign({ className: css(masthead_default.mastheadBrand, className) }, props, { children }));
};
MastheadBrand.displayName = "MastheadBrand";

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadContent.js
var import_jsx_runtime167 = __toESM(require_jsx_runtime());
var MastheadContent = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime167.jsx)("div", Object.assign({ className: css(masthead_default.mastheadContent, className) }, props, { children }));
};
MastheadContent.displayName = "MastheadContent";

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadLogo.js
var import_jsx_runtime168 = __toESM(require_jsx_runtime());
var MastheadLogo = (_a) => {
  var { children, className, component } = _a, props = __rest(_a, ["children", "className", "component"]);
  let Component32 = component;
  if (!component) {
    if ((props === null || props === void 0 ? void 0 : props.href) !== void 0) {
      Component32 = "a";
    } else {
      Component32 = "span";
    }
  }
  return (0, import_jsx_runtime168.jsx)(Component32, Object.assign({ className: css(masthead_default.mastheadLogo, className) }, Component32 === "a" && { tabIndex: 0 }, props, { children }));
};
MastheadLogo.displayName = "MastheadLogo";

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadMain.js
var import_jsx_runtime169 = __toESM(require_jsx_runtime());
var MastheadMain = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime169.jsx)("div", Object.assign({ className: css(masthead_default.mastheadMain, className) }, props, { children }));
};
MastheadMain.displayName = "MastheadMain";

// node_modules/@patternfly/react-core/dist/esm/components/Masthead/MastheadToggle.js
var import_jsx_runtime170 = __toESM(require_jsx_runtime());
var MastheadToggle = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime170.jsx)("span", Object.assign({ className: css(masthead_default.mastheadToggle, className) }, props, { children }));
};
MastheadToggle.displayName = "MastheadToggle";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUpload.js
var import_jsx_runtime171 = __toESM(require_jsx_runtime());
var import_react68 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/MultipleFileUpload/multiple-file-upload.css";
var multiple_file_upload_default = {
  "modifiers": {
    "horizontal": "pf-m-horizontal",
    "dragOver": "pf-m-drag-over"
  },
  "multipleFileUpload": "pf-v6-c-multiple-file-upload",
  "multipleFileUploadInfo": "pf-v6-c-multiple-file-upload__info",
  "multipleFileUploadMain": "pf-v6-c-multiple-file-upload__main",
  "multipleFileUploadStatus": "pf-v6-c-multiple-file-upload__status",
  "multipleFileUploadStatusItem": "pf-v6-c-multiple-file-upload__status-item",
  "multipleFileUploadStatusItemIcon": "pf-v6-c-multiple-file-upload__status-item-icon",
  "multipleFileUploadStatusItemMain": "pf-v6-c-multiple-file-upload__status-item-main",
  "multipleFileUploadStatusItemProgress": "pf-v6-c-multiple-file-upload__status-item-progress",
  "multipleFileUploadStatusItemProgressSize": "pf-v6-c-multiple-file-upload__status-item-progress-size",
  "multipleFileUploadStatusItemProgressText": "pf-v6-c-multiple-file-upload__status-item-progress-text",
  "multipleFileUploadStatusProgress": "pf-v6-c-multiple-file-upload__status-progress",
  "multipleFileUploadStatusProgressIcon": "pf-v6-c-multiple-file-upload__status-progress-icon",
  "multipleFileUploadTitle": "pf-v6-c-multiple-file-upload__title",
  "multipleFileUploadTitleIcon": "pf-v6-c-multiple-file-upload__title-icon",
  "multipleFileUploadTitleText": "pf-v6-c-multiple-file-upload__title-text",
  "multipleFileUploadTitleTextSeparator": "pf-v6-c-multiple-file-upload__title-text-separator",
  "multipleFileUploadUpload": "pf-v6-c-multiple-file-upload__upload"
};

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUpload.js
var MultipleFileUploadContext = (0, import_react68.createContext)({
  open: () => {
  }
});
var MultipleFileUpload = (_a) => {
  var { className, children, dropzoneProps = {}, isHorizontal, onFileDrop = () => {
  } } = _a, props = __rest(_a, ["className", "children", "dropzoneProps", "isHorizontal", "onFileDrop"]);
  const onDropAccepted = (acceptedFiles, event) => {
    onFileDrop(event, acceptedFiles);
    dropzoneProps.onDropAccepted && dropzoneProps.onDropAccepted(acceptedFiles, event);
  };
  const { getRootProps, getInputProps, isDragActive, open } = useDropzone(Object.assign(Object.assign({ multiple: true }, dropzoneProps), { onDropAccepted }));
  const rootProps = getRootProps(Object.assign(Object.assign({}, props), {
    onClick: (event) => event.stopPropagation()
    // Prevents clicking TextArea from opening file dialog
  }));
  return (0, import_jsx_runtime171.jsx)(MultipleFileUploadContext.Provider, { value: { open }, children: (0, import_jsx_runtime171.jsxs)("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUpload, isDragActive && multiple_file_upload_default.modifiers.dragOver, isHorizontal && multiple_file_upload_default.modifiers.horizontal, className) }, rootProps, props, { children: [(0, import_jsx_runtime171.jsx)("input", Object.assign({}, getInputProps(), { hidden: true })), children] })) });
};
MultipleFileUpload.displayName = "MultipleFileUpload";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadMain.js
var import_jsx_runtime178 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitle.js
var import_jsx_runtime175 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitleIcon.js
var import_jsx_runtime172 = __toESM(require_jsx_runtime());
var MultipleFileUploadTitleIcon = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime172.jsx)("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadTitleIcon, className) }, props, { children }));
};
MultipleFileUploadTitleIcon.displayName = "MultipleFileUploadTitleIcon";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitleText.js
var import_jsx_runtime173 = __toESM(require_jsx_runtime());
var MultipleFileUploadTitleText = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return (0, import_jsx_runtime173.jsx)("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadTitleText, className) }, props, { children }));
};
MultipleFileUploadTitleText.displayName = "MultipleFileUploadTitleText";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitleTextSeparator.js
var import_jsx_runtime174 = __toESM(require_jsx_runtime());
var MultipleFileUploadTitleTextSeparator = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return (0, import_jsx_runtime174.jsx)("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadTitleTextSeparator, className) }, props, { children }));
};
MultipleFileUploadTitleTextSeparator.displayName = "MultipleFileUploadTitleTextSeparator";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadTitle.js
var MultipleFileUploadTitle = (_a) => {
  var { className, icon, text = "", textSeparator = "" } = _a, props = __rest(_a, ["className", "icon", "text", "textSeparator"]);
  return (0, import_jsx_runtime175.jsxs)("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadTitle, className) }, props, { children: [icon && (0, import_jsx_runtime175.jsx)(MultipleFileUploadTitleIcon, { children: icon }), text && (0, import_jsx_runtime175.jsxs)(MultipleFileUploadTitleText, { children: [`${text} `, textSeparator && (0, import_jsx_runtime175.jsx)(MultipleFileUploadTitleTextSeparator, { children: textSeparator })] })] }));
};
MultipleFileUploadTitle.displayName = "MultipleFileUploadTitle";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadButton.js
var import_jsx_runtime176 = __toESM(require_jsx_runtime());
var import_react69 = __toESM(require_react());
var MultipleFileUploadButton = (_a) => {
  var { className, "aria-label": ariaLabel, browseButtonText = "Upload" } = _a, props = __rest(_a, ["className", "aria-label", "browseButtonText"]);
  if (!ariaLabel && !browseButtonText) {
    console.warn("For accessibility reasons an aria-label should be specified on MultipleFileUploadButton if a browseButtonText isn't");
  }
  const { open } = (0, import_react69.useContext)(MultipleFileUploadContext);
  return (0, import_jsx_runtime176.jsx)("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadUpload, className) }, props, { children: (0, import_jsx_runtime176.jsx)(Button, { variant: "secondary", "aria-label": ariaLabel, onClick: open, children: browseButtonText }) }));
};
MultipleFileUploadButton.displayName = "MultipleFileUploadButton";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadInfo.js
var import_jsx_runtime177 = __toESM(require_jsx_runtime());
var MultipleFileUploadInfo = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return (0, import_jsx_runtime177.jsx)("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadInfo, className) }, props, { children }));
};
MultipleFileUploadInfo.displayName = "MultipleFileUploadInfo";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadMain.js
var MultipleFileUploadMain = (_a) => {
  var { className, titleIcon, titleText, titleTextSeparator, infoText, isUploadButtonHidden, browseButtonText = "Upload" } = _a, props = __rest(_a, ["className", "titleIcon", "titleText", "titleTextSeparator", "infoText", "isUploadButtonHidden", "browseButtonText"]);
  const showTitle = !!titleIcon || !!titleText || !!titleTextSeparator;
  return (0, import_jsx_runtime178.jsxs)("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadMain, className) }, props, { children: [showTitle && (0, import_jsx_runtime178.jsx)(MultipleFileUploadTitle, { icon: titleIcon, text: titleText, textSeparator: titleTextSeparator }), isUploadButtonHidden || (0, import_jsx_runtime178.jsx)(MultipleFileUploadButton, { browseButtonText }), !!infoText && (0, import_jsx_runtime178.jsx)(MultipleFileUploadInfo, { children: infoText })] }));
};
MultipleFileUploadMain.displayName = "MultipleFileUploadMain";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadStatus.js
var import_jsx_runtime179 = __toESM(require_jsx_runtime());
var import_react70 = __toESM(require_react());
var MultipleFileUploadStatus = (_a) => {
  var { children, className, statusToggleText, statusToggleIcon, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "statusToggleText", "statusToggleIcon", "aria-label"]);
  const [icon, setIcon] = (0, import_react70.useState)();
  const [isOpen, setIsOpen] = (0, import_react70.useState)(true);
  (0, import_react70.useEffect)(() => {
    switch (statusToggleIcon) {
      case "danger":
        setIcon((0, import_jsx_runtime179.jsx)(times_circle_icon_default, {}));
        break;
      case "success":
        setIcon((0, import_jsx_runtime179.jsx)(check_circle_icon_default, {}));
        break;
      case "inProgress":
        setIcon((0, import_jsx_runtime179.jsx)(in_progress_icon_default, {}));
        break;
      default:
        setIcon(statusToggleIcon);
    }
  }, [statusToggleIcon]);
  const toggle = (0, import_jsx_runtime179.jsxs)("div", { className: multiple_file_upload_default.multipleFileUploadStatusProgress, children: [(0, import_jsx_runtime179.jsx)("div", { className: `${multiple_file_upload_default.multipleFileUploadStatusProgress}-icon`, children: icon }), (0, import_jsx_runtime179.jsx)("div", { className: `${multiple_file_upload_default.multipleFileUploadStatusProgress}-text`, children: statusToggleText })] });
  const toggleExpandableSection = () => {
    setIsOpen(!isOpen);
  };
  return (0, import_jsx_runtime179.jsx)("div", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadStatus, className) }, props, { children: (0, import_jsx_runtime179.jsx)(GenerateId, { prefix: "pf-expandable-section-", children: (expandableSectionId) => (0, import_jsx_runtime179.jsx)(ExpandableSection, { contentId: `${expandableSectionId}-content`, toggleId: `${expandableSectionId}-toggle`, toggleContent: toggle, isExpanded: isOpen, onToggle: toggleExpandableSection, children: (0, import_jsx_runtime179.jsx)("ul", { className: `${multiple_file_upload_default.multipleFileUploadStatus}-list`, role: "list", "aria-label": ariaLabel, children }) }) }) }));
};
MultipleFileUploadStatus.displayName = "MultipleFileUploadStatus";

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadStatusItem.js
var import_jsx_runtime184 = __toESM(require_jsx_runtime());
var import_react73 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Progress/Progress.js
var import_jsx_runtime183 = __toESM(require_jsx_runtime());
var import_react72 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Progress/progress.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Progress/progress.css";
var progress_default = {
  "modifiers": {
    "sm": "pf-m-sm",
    "lg": "pf-m-lg",
    "inside": "pf-m-inside",
    "outside": "pf-m-outside",
    "staticWidth": "pf-m-static-width",
    "singleline": "pf-m-singleline",
    "success": "pf-m-success",
    "warning": "pf-m-warning",
    "danger": "pf-m-danger",
    "truncate": "pf-m-truncate"
  },
  "progress": "pf-v6-c-progress",
  "progressBar": "pf-v6-c-progress__bar",
  "progressDescription": "pf-v6-c-progress__description",
  "progressHelperText": "pf-v6-c-progress__helper-text",
  "progressIndicator": "pf-v6-c-progress__indicator",
  "progressMeasure": "pf-v6-c-progress__measure",
  "progressStatus": "pf-v6-c-progress__status",
  "progressStatusIcon": "pf-v6-c-progress__status-icon"
};

// node_modules/@patternfly/react-core/dist/esm/components/Progress/ProgressContainer.js
var import_jsx_runtime182 = __toESM(require_jsx_runtime());
var import_react71 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Progress/ProgressBar.js
var import_jsx_runtime180 = __toESM(require_jsx_runtime());
var ProgressBar = (_a) => {
  var { progressBarAriaProps, className = "", children = null, value } = _a, props = __rest(_a, ["progressBarAriaProps", "className", "children", "value"]);
  return (0, import_jsx_runtime180.jsx)("div", Object.assign({}, props, { className: css(progress_default.progressBar, className) }, progressBarAriaProps, { children: (0, import_jsx_runtime180.jsx)("div", { className: css(progress_default.progressIndicator), style: { width: `${value}%` }, children: (0, import_jsx_runtime180.jsx)("span", { className: css(progress_default.progressMeasure), children }) }) }));
};
ProgressBar.displayName = "ProgressBar";

// node_modules/@patternfly/react-core/dist/esm/components/Progress/ProgressHelperText.js
var import_jsx_runtime181 = __toESM(require_jsx_runtime());
var ProgressHelperText = (_a) => {
  var { children } = _a, props = __rest(_a, ["children"]);
  return (0, import_jsx_runtime181.jsx)("div", Object.assign({ className: progress_default.progressHelperText }, props, { children }));
};
ProgressHelperText.displayName = "ProgressHelperText";

// node_modules/@patternfly/react-core/dist/esm/components/Progress/ProgressContainer.js
var ProgressMeasureLocation;
(function(ProgressMeasureLocation2) {
  ProgressMeasureLocation2["outside"] = "outside";
  ProgressMeasureLocation2["inside"] = "inside";
  ProgressMeasureLocation2["top"] = "top";
  ProgressMeasureLocation2["none"] = "none";
})(ProgressMeasureLocation || (ProgressMeasureLocation = {}));
var ProgressVariant;
(function(ProgressVariant2) {
  ProgressVariant2["danger"] = "danger";
  ProgressVariant2["success"] = "success";
  ProgressVariant2["warning"] = "warning";
})(ProgressVariant || (ProgressVariant = {}));
var variantToIcon = {
  danger: times_circle_icon_default,
  success: check_circle_icon_default,
  warning: exclamation_triangle_icon_default
};
var ProgressContainer = ({ progressBarAriaProps, value, title = "", parentId, label = null, variant = null, measureLocation = ProgressMeasureLocation.top, isTitleTruncated = false, tooltipPosition, helperText }) => {
  const StatusIcon = variantToIcon.hasOwnProperty(variant) && variantToIcon[variant];
  const [tooltip, setTooltip] = (0, import_react71.useState)("");
  const titleRef = (0, import_react71.useRef)(null);
  const updateTooltip = (event) => {
    if (event.target.offsetWidth < event.target.scrollWidth) {
      setTooltip(title || event.target.innerHTML);
    } else {
      setTooltip("");
    }
  };
  (0, import_react71.useEffect)(() => {
    if (tooltip !== "") {
      titleRef.current.focus();
    }
  }, [tooltip]);
  const _isTruncatedAndString = isTitleTruncated && typeof title === "string";
  const Title2 = (0, import_jsx_runtime182.jsx)("div", Object.assign({ className: css(progress_default.progressDescription, _isTruncatedAndString && progress_default.modifiers.truncate), id: `${parentId}-description`, "aria-hidden": _isTruncatedAndString ? null : "true", onMouseEnter: _isTruncatedAndString ? updateTooltip : null, onFocus: _isTruncatedAndString ? updateTooltip : null }, _isTruncatedAndString && { tabIndex: 0 }, { ref: titleRef, children: title }));
  return (0, import_jsx_runtime182.jsxs)(import_react71.Fragment, { children: [title && (0, import_jsx_runtime182.jsxs)(import_jsx_runtime182.Fragment, { children: [tooltip && (0, import_jsx_runtime182.jsx)(Tooltip, { position: tooltipPosition, content: tooltip, isVisible: true, triggerRef: titleRef }), Title2] }), (measureLocation !== ProgressMeasureLocation.none || StatusIcon) && (0, import_jsx_runtime182.jsxs)("div", { className: css(progress_default.progressStatus), "aria-hidden": "true", children: [(measureLocation === ProgressMeasureLocation.top || measureLocation === ProgressMeasureLocation.outside) && (0, import_jsx_runtime182.jsx)("span", { className: css(progress_default.progressMeasure), children: label || `${value}%` }), StatusIcon && (0, import_jsx_runtime182.jsx)("span", { className: css(progress_default.progressStatusIcon), children: (0, import_jsx_runtime182.jsx)(StatusIcon, {}) })] }), (0, import_jsx_runtime182.jsx)(ProgressBar, { role: "progressbar", progressBarAriaProps, value, children: measureLocation === ProgressMeasureLocation.inside && `${value}%` }), helperText && (0, import_jsx_runtime182.jsx)(ProgressHelperText, { children: helperText })] });
};
ProgressContainer.displayName = "ProgressContainer";

// node_modules/@patternfly/react-core/dist/esm/components/Progress/Progress.js
var ProgressSize;
(function(ProgressSize2) {
  ProgressSize2["sm"] = "sm";
  ProgressSize2["md"] = "md";
  ProgressSize2["lg"] = "lg";
})(ProgressSize || (ProgressSize = {}));
var Progress = class extends import_react72.Component {
  constructor() {
    super(...arguments);
    this.id = this.props.id || getUniqueId();
  }
  render() {
    const _a = this.props, {
      /* eslint-disable @typescript-eslint/no-unused-vars */
      id,
      size,
      /* eslint-enable @typescript-eslint/no-unused-vars */
      className,
      value,
      title,
      label,
      variant,
      measureLocation,
      min,
      max,
      valueText,
      isTitleTruncated,
      tooltipPosition,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      helperText
    } = _a, props = __rest(_a, ["id", "size", "className", "value", "title", "label", "variant", "measureLocation", "min", "max", "valueText", "isTitleTruncated", "tooltipPosition", "aria-label", "aria-labelledby", "helperText"]);
    const progressBarAriaProps = {
      "aria-valuemin": min,
      "aria-valuenow": value,
      "aria-valuemax": max
    };
    if (title || ariaLabelledBy) {
      progressBarAriaProps["aria-labelledby"] = title ? `${this.id}-description` : ariaLabelledBy;
    }
    if (ariaLabel) {
      progressBarAriaProps["aria-label"] = ariaLabel;
    }
    if (valueText) {
      progressBarAriaProps["aria-valuetext"] = valueText;
    }
    if (!title && !ariaLabelledBy && !ariaLabel) {
      console.warn("One of aria-label or aria-labelledby properties should be passed when using the progress component without a title.");
    }
    const scaledValue = Math.min(100, Math.max(0, Math.floor((value - min) / (max - min) * 100))) || 0;
    return (0, import_jsx_runtime183.jsx)("div", Object.assign({}, props, { className: css(progress_default.progress, progress_default.modifiers[variant], ["inside", "outside"].includes(measureLocation) && progress_default.modifiers[measureLocation], measureLocation === "inside" ? progress_default.modifiers[ProgressSize.lg] : progress_default.modifiers[size], !title && progress_default.modifiers.singleline, className), id: this.id, children: (0, import_jsx_runtime183.jsx)(ProgressContainer, { parentId: this.id, value: scaledValue, title, label, variant, measureLocation, progressBarAriaProps, isTitleTruncated, tooltipPosition, helperText }) }));
  }
};
Progress.displayName = "Progress";
Progress.defaultProps = {
  className: "",
  measureLocation: ProgressMeasureLocation.top,
  variant: null,
  id: "",
  title: "",
  min: 0,
  max: 100,
  size: null,
  label: null,
  value: 0,
  valueText: null,
  isTitleTruncated: false,
  tooltipPosition: "top",
  "aria-label": null,
  "aria-labelledby": null
};

// node_modules/@patternfly/react-core/dist/esm/components/MultipleFileUpload/MultipleFileUploadStatusItem.js
var MultipleFileUploadStatusItem = (_a) => {
  var { className, file, fileIcon, onReadStarted = () => {
  }, onReadFinished = () => {
  }, onReadSuccess = () => {
  }, onReadFail = () => {
  }, onClearClick = () => {
  }, customFileHandler, fileName, fileSize, progressValue, progressVariant, progressAriaLabel, progressAriaLabelledBy, progressId, progressAriaLiveMessage, buttonAriaLabel = "Remove from list", progressHelperText } = _a, props = __rest(_a, ["className", "file", "fileIcon", "onReadStarted", "onReadFinished", "onReadSuccess", "onReadFail", "onClearClick", "customFileHandler", "fileName", "fileSize", "progressValue", "progressVariant", "progressAriaLabel", "progressAriaLabelledBy", "progressId", "progressAriaLiveMessage", "buttonAriaLabel", "progressHelperText"]);
  const [loadPercentage, setLoadPercentage] = (0, import_react73.useState)(0);
  const [loadResult, setLoadResult] = (0, import_react73.useState)();
  function readFile2(file2) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.onerror = () => reject(reader.error);
      reader.onprogress = (data) => {
        if (data.lengthComputable) {
          setLoadPercentage(data.loaded / data.total * 100);
        }
      };
      reader.readAsDataURL(file2);
    });
  }
  (0, import_react73.useEffect)(() => {
    if (customFileHandler) {
      customFileHandler(file);
    } else {
      onReadStarted(file);
      readFile2(file).then((data) => {
        setLoadResult("success");
        setLoadPercentage(100);
        onReadFinished(file);
        onReadSuccess(data, file);
      }).catch((error) => {
        onReadFinished(file);
        onReadFail(error, file);
        setLoadResult("danger");
      });
    }
  }, []);
  const getHumanReadableFileSize = (size) => {
    const prefixes = ["", "K", "M", "G", "T"];
    let prefixUnit = 0;
    while (size >= 1e3) {
      prefixUnit += 1;
      size = size / 1e3;
    }
    if (prefixUnit >= prefixes.length) {
      return "File size too large";
    }
    return `${Math.round(size)}${prefixes[prefixUnit]}B`;
  };
  const value = progressValue || loadPercentage;
  const variant = progressVariant || loadResult;
  const title = (0, import_jsx_runtime184.jsxs)("span", { className: multiple_file_upload_default.multipleFileUploadStatusItemProgress, children: [(0, import_jsx_runtime184.jsx)("span", { className: multiple_file_upload_default.multipleFileUploadStatusItemProgressText, children: fileName || (file === null || file === void 0 ? void 0 : file.name) || "" }), (0, import_jsx_runtime184.jsx)("span", { className: multiple_file_upload_default.multipleFileUploadStatusItemProgressSize, children: fileSize || getHumanReadableFileSize((file === null || file === void 0 ? void 0 : file.size) || 0) })] });
  return (0, import_jsx_runtime184.jsxs)("li", Object.assign({ className: css(multiple_file_upload_default.multipleFileUploadStatusItem, className) }, props, { children: [(0, import_jsx_runtime184.jsx)("div", { className: multiple_file_upload_default.multipleFileUploadStatusItemIcon, children: fileIcon || (0, import_jsx_runtime184.jsx)(file_icon_default, {}) }), (0, import_jsx_runtime184.jsxs)("div", { className: multiple_file_upload_default.multipleFileUploadStatusItemMain, children: [(0, import_jsx_runtime184.jsxs)("div", { className: "pf-v6-screen-reader", "aria-live": "polite", children: [progressAriaLiveMessage && typeof progressAriaLiveMessage === "function" && progressAriaLiveMessage(+loadPercentage.toFixed(2)), progressAriaLiveMessage && typeof progressAriaLiveMessage === "string" && progressAriaLiveMessage, !progressAriaLiveMessage && `Progress value is ${progressValue || Math.floor(loadPercentage)}%.`] }), (0, import_jsx_runtime184.jsx)(Progress, { title, value, variant, "aria-label": progressAriaLabel, "aria-labelledby": progressAriaLabelledBy, id: progressId, helperText: progressHelperText })] }), (0, import_jsx_runtime184.jsx)("div", { className: `${multiple_file_upload_default.multipleFileUploadStatusItem}-close`, children: (0, import_jsx_runtime184.jsx)(Button, { variant: "plain", "aria-label": buttonAriaLabel, onClick: onClearClick, icon: (0, import_jsx_runtime184.jsx)(times_icon_default, {}) }) })] }));
};
MultipleFileUploadStatusItem.displayName = "MultipleFileUploadStatusItem";

// node_modules/@patternfly/react-core/dist/esm/components/Nav/Nav.js
var import_jsx_runtime185 = __toESM(require_jsx_runtime());
var import_react74 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Nav/nav.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Nav/nav.css";
var nav_default = {
  "button": "pf-v6-c-button",
  "dirRtl": "pf-v6-m-dir-rtl",
  "menu": "pf-v6-c-menu",
  "menuList": "pf-v6-c-menu__list",
  "menuListItem": "pf-v6-c-menu__list-item",
  "modifiers": {
    "overflowHidden": "pf-m-overflow-hidden",
    "inset": "pf-m-inset",
    "fill": "pf-m-fill",
    "drilldown": "pf-m-drilldown",
    "expanded": "pf-m-expanded",
    "hover": "pf-m-hover",
    "current": "pf-m-current",
    "flyout": "pf-m-flyout",
    "horizontal": "pf-m-horizontal",
    "subnav": "pf-m-subnav",
    "scrollable": "pf-m-scrollable"
  },
  "nav": "pf-v6-c-nav",
  "navItem": "pf-v6-c-nav__item",
  "navLink": "pf-v6-c-nav__link",
  "navLinkIcon": "pf-v6-c-nav__link-icon",
  "navList": "pf-v6-c-nav__list",
  "navNav": "pf-v6-c-nav__nav",
  "navScrollButton": "pf-v6-c-nav__scroll-button",
  "navSection": "pf-v6-c-nav__section",
  "navSectionTitle": "pf-v6-c-nav__section-title",
  "navSubnav": "pf-v6-c-nav__subnav",
  "navToggle": "pf-v6-c-nav__toggle",
  "navToggleIcon": "pf-v6-c-nav__toggle-icon"
};

// node_modules/@patternfly/react-core/dist/esm/components/Nav/Nav.js
var navContextDefaults = {};
var NavContext = (0, import_react74.createContext)(navContextDefaults);
var Nav = class _Nav extends import_react74.Component {
  constructor() {
    super(...arguments);
    this.state = {
      isScrollable: false,
      ouiaStateId: getDefaultOUIAId(_Nav.displayName, this.props.variant),
      flyoutRef: null
    };
    this.navRef = (0, import_react74.createRef)();
  }
  // Callback from NavItem
  onSelect(event, groupId, itemId, to, preventDefault, onClick) {
    if (preventDefault) {
      event.preventDefault();
    }
    this.props.onSelect(event, { groupId, itemId, to });
    if (onClick) {
      onClick(event, itemId, groupId, to);
    }
  }
  // Callback from NavExpandable
  onToggle(event, groupId, toggleValue) {
    this.props.onToggle(event, {
      groupId,
      isExpanded: toggleValue
    });
  }
  render() {
    const _a = this.props, {
      "aria-label": ariaLabel,
      children,
      className,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onSelect,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onToggle,
      ouiaId,
      ouiaSafe,
      variant
    } = _a, props = __rest(_a, ["aria-label", "children", "className", "onSelect", "onToggle", "ouiaId", "ouiaSafe", "variant"]);
    const isHorizontal = ["horizontal", "horizontal-subnav"].includes(variant);
    return (0, import_jsx_runtime185.jsx)(NavContext.Provider, { value: {
      onSelect: (event, groupId, itemId, to, preventDefault, onClick) => this.onSelect(event, groupId, itemId, to, preventDefault, onClick),
      onToggle: (event, groupId, expanded) => this.onToggle(event, groupId, expanded),
      updateIsScrollable: (isScrollable) => this.setState({ isScrollable }),
      isHorizontal: ["horizontal", "horizontal-subnav"].includes(variant),
      flyoutRef: this.state.flyoutRef,
      setFlyoutRef: (flyoutRef) => this.setState({ flyoutRef }),
      navRef: this.navRef
    }, children: (0, import_jsx_runtime185.jsx)("nav", Object.assign({ className: css(nav_default.nav, isHorizontal && nav_default.modifiers.horizontal, variant === "horizontal-subnav" && nav_default.modifiers.subnav, this.state.isScrollable && nav_default.modifiers.scrollable, className), "aria-label": ariaLabel || (variant === "horizontal-subnav" ? "Local" : "Global"), ref: this.navRef }, getOUIAProps(_Nav.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), props, { children })) });
  }
};
Nav.displayName = "Nav";
Nav.defaultProps = {
  onSelect: () => void 0,
  onToggle: () => void 0,
  ouiaSafe: true
};

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavList.js
var import_jsx_runtime187 = __toESM(require_jsx_runtime());
var import_react76 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageSidebar.js
var import_jsx_runtime186 = __toESM(require_jsx_runtime());
var import_react75 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Page/page.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Page/page.css";
var page_default = {
  "button": "pf-v6-c-button",
  "dirRtl": "pf-v6-m-dir-rtl",
  "masthead": "pf-v6-c-masthead",
  "mastheadToggle": "pf-v6-c-masthead__toggle",
  "modifiers": {
    "hamburger": "pf-m-hamburger",
    "expanded": "pf-m-expanded",
    "collapsed": "pf-m-collapsed",
    "pageInsets": "pf-m-page-insets",
    "contextSelector": "pf-m-context-selector",
    "insetNone": "pf-m-inset-none",
    "fill": "pf-m-fill",
    "noFill": "pf-m-no-fill",
    "limitWidth": "pf-m-limit-width",
    "alignCenter": "pf-m-align-center",
    "overflowScroll": "pf-m-overflow-scroll",
    "shadowBottom": "pf-m-shadow-bottom",
    "shadowTop": "pf-m-shadow-top",
    "stickyTop": "pf-m-sticky-top",
    "stickyBottom": "pf-m-sticky-bottom",
    "stickyTopOnSmHeight": "pf-m-sticky-top-on-sm-height",
    "stickyBottomOnSmHeight": "pf-m-sticky-bottom-on-sm-height",
    "stickyTopOnMdHeight": "pf-m-sticky-top-on-md-height",
    "stickyBottomOnMdHeight": "pf-m-sticky-bottom-on-md-height",
    "stickyTopOnLgHeight": "pf-m-sticky-top-on-lg-height",
    "stickyBottomOnLgHeight": "pf-m-sticky-bottom-on-lg-height",
    "stickyTopOnXlHeight": "pf-m-sticky-top-on-xl-height",
    "stickyBottomOnXlHeight": "pf-m-sticky-bottom-on-xl-height",
    "stickyTopOn_2xlHeight": "pf-m-sticky-top-on-2xl-height",
    "stickyBottomOn_2xlHeight": "pf-m-sticky-bottom-on-2xl-height",
    "noSidebar": "pf-m-no-sidebar",
    "secondary": "pf-m-secondary",
    "padding": "pf-m-padding",
    "noPadding": "pf-m-no-padding",
    "paddingOnSm": "pf-m-padding-on-sm",
    "noPaddingOnSm": "pf-m-no-padding-on-sm",
    "paddingOnMd": "pf-m-padding-on-md",
    "noPaddingOnMd": "pf-m-no-padding-on-md",
    "paddingOnLg": "pf-m-padding-on-lg",
    "noPaddingOnLg": "pf-m-no-padding-on-lg",
    "paddingOnXl": "pf-m-padding-on-xl",
    "noPaddingOnXl": "pf-m-no-padding-on-xl",
    "paddingOn_2xl": "pf-m-padding-on-2xl",
    "noPaddingOn_2xl": "pf-m-no-padding-on-2xl"
  },
  "page": "pf-v6-c-page",
  "pageDrawer": "pf-v6-c-page__drawer",
  "pageMain": "pf-v6-c-page__main",
  "pageMainBody": "pf-v6-c-page__main-body",
  "pageMainBreadcrumb": "pf-v6-c-page__main-breadcrumb",
  "pageMainContainer": "pf-v6-c-page__main-container",
  "pageMainDrawer": "pf-v6-c-page__main-drawer",
  "pageMainGroup": "pf-v6-c-page__main-group",
  "pageMainSection": "pf-v6-c-page__main-section",
  "pageMainSubnav": "pf-v6-c-page__main-subnav",
  "pageMainTabs": "pf-v6-c-page__main-tabs",
  "pageMainWizard": "pf-v6-c-page__main-wizard",
  "pageSidebar": "pf-v6-c-page__sidebar",
  "pageSidebarBody": "pf-v6-c-page__sidebar-body",
  "pageSidebarHeader": "pf-v6-c-page__sidebar-header",
  "pageSidebarTitle": "pf-v6-c-page__sidebar-title"
};

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageSidebar.js
var pageSidebarContextDefaults = {
  isSidebarOpen: true
};
var PageSidebarContext = (0, import_react75.createContext)(pageSidebarContextDefaults);
var PageSidebar = (_a) => {
  var { className = "", children, isSidebarOpen = true, id = "page-sidebar" } = _a, props = __rest(_a, ["className", "children", "isSidebarOpen", "id"]);
  return (0, import_jsx_runtime186.jsx)(PageContextConsumer, { children: ({ isManagedSidebar, isSidebarOpen: managedIsNavOpen }) => {
    const sidebarOpen = isManagedSidebar ? managedIsNavOpen : isSidebarOpen;
    return (0, import_jsx_runtime186.jsx)("div", Object.assign({ id, className: css(page_default.pageSidebar, sidebarOpen && page_default.modifiers.expanded, !sidebarOpen && page_default.modifiers.collapsed, className), "aria-hidden": !sidebarOpen }, props, { children: (0, import_jsx_runtime186.jsx)(PageSidebarContext.Provider, { value: { isSidebarOpen: sidebarOpen }, children }) }));
  } });
};
PageSidebar.displayName = "PageSidebar";

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavList.js
var NavList = class extends import_react76.Component {
  constructor() {
    super(...arguments);
    this.direction = "ltr";
    this.state = {
      scrollViewAtStart: false,
      scrollViewAtEnd: false
    };
    this.navList = (0, import_react76.createRef)();
    this.observer = () => {
    };
    this.handleScrollButtons = () => {
      const container = this.navList.current;
      if (container) {
        const scrollViewAtStart = isElementInView(container, container.firstChild, false);
        const scrollViewAtEnd = isElementInView(container, container.lastChild, false);
        this.setState({
          scrollViewAtStart,
          scrollViewAtEnd
        });
        this.context.updateIsScrollable(!scrollViewAtStart || !scrollViewAtEnd);
      }
    };
    this.scrollBack = () => {
      const container = this.navList.current;
      if (container) {
        const childrenArr = Array.from(container.children);
        let firstElementInView;
        let lastElementOutOfView;
        for (let i = 0; i < childrenArr.length && !firstElementInView; i++) {
          if (isElementInView(container, childrenArr[i], false)) {
            firstElementInView = childrenArr[i];
            lastElementOutOfView = childrenArr[i - 1];
          }
        }
        if (lastElementOutOfView) {
          if (this.direction === "ltr") {
            container.scrollLeft -= lastElementOutOfView.scrollWidth;
          } else {
            container.scrollLeft += lastElementOutOfView.scrollWidth;
          }
        }
        this.handleScrollButtons();
      }
    };
    this.scrollForward = () => {
      const container = this.navList.current;
      if (container) {
        const childrenArr = Array.from(container.children);
        let lastElementInView;
        let firstElementOutOfView;
        for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {
          if (isElementInView(container, childrenArr[i], false)) {
            lastElementInView = childrenArr[i];
            firstElementOutOfView = childrenArr[i + 1];
          }
        }
        if (firstElementOutOfView) {
          if (this.direction === "ltr") {
            container.scrollLeft += firstElementOutOfView.scrollWidth;
          } else {
            container.scrollLeft -= firstElementOutOfView.scrollWidth;
          }
        }
        this.handleScrollButtons();
      }
    };
  }
  componentDidMount() {
    this.observer = getResizeObserver(this.navList.current, this.handleScrollButtons, true);
    this.direction = getLanguageDirection(this.navList.current);
    this.handleScrollButtons();
  }
  componentWillUnmount() {
    this.observer();
  }
  componentDidUpdate() {
    this.direction = getLanguageDirection(this.navList.current);
  }
  render() {
    const _a = this.props, { children, className, backScrollAriaLabel, forwardScrollAriaLabel } = _a, props = __rest(_a, ["children", "className", "backScrollAriaLabel", "forwardScrollAriaLabel"]);
    const { scrollViewAtStart, scrollViewAtEnd } = this.state;
    return (0, import_jsx_runtime187.jsx)(NavContext.Consumer, { children: ({ isHorizontal }) => (0, import_jsx_runtime187.jsx)(PageSidebarContext.Consumer, { children: ({ isSidebarOpen }) => (0, import_jsx_runtime187.jsxs)(import_react76.Fragment, { children: [isHorizontal && (!scrollViewAtStart || !scrollViewAtEnd) && (0, import_jsx_runtime187.jsx)("div", { className: css(nav_default.navScrollButton), children: (0, import_jsx_runtime187.jsx)(Button, { variant: "plain", "aria-label": backScrollAriaLabel, onClick: this.scrollBack, isDisabled: scrollViewAtStart, tabIndex: isSidebarOpen ? null : -1, icon: (0, import_jsx_runtime187.jsx)(angle_left_icon_default, {}) }) }), (0, import_jsx_runtime187.jsx)("ul", Object.assign({ ref: this.navList, className: css(nav_default.navList, className), onScroll: this.handleScrollButtons, role: "list" }, props, { children })), isHorizontal && (!scrollViewAtStart || !scrollViewAtEnd) && (0, import_jsx_runtime187.jsx)("div", { className: css(nav_default.navScrollButton), children: (0, import_jsx_runtime187.jsx)(Button, { variant: "plain", "aria-label": forwardScrollAriaLabel, onClick: this.scrollForward, isDisabled: scrollViewAtEnd, tabIndex: isSidebarOpen ? null : -1, icon: (0, import_jsx_runtime187.jsx)(angle_right_icon_default, {}) }) })] }) }) });
  }
};
NavList.displayName = "NavList";
NavList.contextType = NavContext;
NavList.defaultProps = {
  backScrollAriaLabel: "Scroll back",
  forwardScrollAriaLabel: "Scroll foward"
};

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavGroup.js
var import_jsx_runtime188 = __toESM(require_jsx_runtime());
var NavGroup = (_a) => {
  var { title, children = null, className = "", id = getUniqueId() } = _a, props = __rest(_a, ["title", "children", "className", "id"]);
  if (!title && !props["aria-label"]) {
    console.warn("For accessibility reasons an aria-label should be specified on nav groups if a title isn't");
  }
  const labelledBy = title ? id : void 0;
  return (0, import_jsx_runtime188.jsxs)("section", Object.assign({ className: css(nav_default.navSection, className), "aria-labelledby": labelledBy }, props, { children: [title && (0, import_jsx_runtime188.jsx)("h2", { className: css(nav_default.navSectionTitle), id, children: title }), (0, import_jsx_runtime188.jsx)("ul", { className: css(nav_default.navList, className), role: "list", children })] }));
};
NavGroup.displayName = "NavGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavItem.js
var import_jsx_runtime189 = __toESM(require_jsx_runtime());
var import_react77 = __toESM(require_react());
var NavItem = (_a) => {
  var { children, styleChildren = true, className, to, isActive = false, groupId = null, itemId = null, preventDefault = false, onClick, component = "a", flyout, onShowFlyout, ouiaId, ouiaSafe, zIndex = 9999, icon } = _a, props = __rest(_a, ["children", "styleChildren", "className", "to", "isActive", "groupId", "itemId", "preventDefault", "onClick", "component", "flyout", "onShowFlyout", "ouiaId", "ouiaSafe", "zIndex", "icon"]);
  const { flyoutRef, setFlyoutRef, navRef } = (0, import_react77.useContext)(NavContext);
  const { isSidebarOpen } = (0, import_react77.useContext)(PageSidebarContext);
  const [flyoutTarget, setFlyoutTarget] = (0, import_react77.useState)(null);
  const [isHovered, setIsHovered] = (0, import_react77.useState)(false);
  const ref = (0, import_react77.useRef)(void 0);
  const flyoutVisible = ref === flyoutRef;
  const popperRef = (0, import_react77.useRef)(void 0);
  const hasFlyout = flyout !== void 0;
  const Component32 = hasFlyout ? "button" : component;
  if (to && hasFlyout) {
    console.error('NavItem cannot have both "to" and "flyout" props.');
  }
  const showFlyout = (show, override) => {
    if ((!flyoutVisible || override) && show) {
      setFlyoutRef(ref);
    } else if ((flyoutVisible || override) && !show) {
      setFlyoutRef(null);
    }
    onShowFlyout && show && onShowFlyout();
  };
  const onMouseOver = (event) => {
    const evtContainedInFlyout = event.target.closest(`.${nav_default.navItem}.pf-m-flyout`);
    if (hasFlyout && !flyoutVisible) {
      showFlyout(true);
    } else if (flyoutRef !== null && !evtContainedInFlyout) {
      setFlyoutRef(null);
    }
  };
  const onFlyoutClick = (event) => {
    const target = event.target;
    const closestItem = target.closest(".pf-m-flyout");
    if (!closestItem) {
      if (hasFlyout) {
        showFlyout(false, true);
      } else if (flyoutRef !== null) {
        setFlyoutRef(null);
      }
    }
  };
  const handleFlyout = (event) => {
    var _a2, _b;
    const key = event.key;
    const target = event.target;
    if ((key === " " || key === "Enter" || key === "ArrowRight") && hasFlyout && ((_a2 = ref === null || ref === void 0 ? void 0 : ref.current) === null || _a2 === void 0 ? void 0 : _a2.contains(target))) {
      event.stopPropagation();
      event.preventDefault();
      if (!flyoutVisible) {
        showFlyout(true);
        setFlyoutTarget(target);
      }
    }
    if ((key === "Escape" || key === "ArrowLeft") && ((_b = popperRef === null || popperRef === void 0 ? void 0 : popperRef.current) === null || _b === void 0 ? void 0 : _b.querySelectorAll(`.${menu_default.menu}`).length) === 1) {
      if (flyoutVisible) {
        event.stopPropagation();
        event.preventDefault();
        showFlyout(false);
      }
    }
  };
  (0, import_react77.useEffect)(() => {
    if (hasFlyout) {
      window.addEventListener("click", onFlyoutClick);
    }
    return () => {
      if (hasFlyout) {
        window.removeEventListener("click", onFlyoutClick);
      }
    };
  }, []);
  (0, import_react77.useEffect)(() => {
    if (flyoutTarget) {
      if (flyoutVisible) {
        const flyoutItems = Array.from(popperRef.current.getElementsByTagName("UL")[0].children).filter((el) => !(el.classList.contains("pf-m-disabled") || el.classList.contains(divider_default.divider)));
        flyoutItems[0].firstChild.focus();
      } else {
        flyoutTarget.focus();
      }
    }
  }, [flyoutVisible, flyoutTarget]);
  const flyoutButton = (0, import_jsx_runtime189.jsx)("span", { className: css(nav_default.navToggle), children: (0, import_jsx_runtime189.jsx)("span", { className: css(nav_default.navToggleIcon), children: (0, import_jsx_runtime189.jsx)(angle_right_icon_default, {}) }) });
  const ariaFlyoutProps = {
    "aria-haspopup": "menu",
    "aria-expanded": flyoutVisible
  };
  const tabIndex = isSidebarOpen ? null : -1;
  const renderDefaultLink = (context) => {
    const preventLinkDefault = preventDefault || !to;
    return (0, import_jsx_runtime189.jsxs)(Component32, Object.assign({ href: to, onClick: (e) => context.onSelect(e, groupId, itemId, to, preventLinkDefault, onClick), className: css(nav_default.navLink, isActive && nav_default.modifiers.current, isHovered && nav_default.modifiers.hover, className), "aria-current": isActive ? "page" : null, tabIndex }, hasFlyout && Object.assign({}, ariaFlyoutProps), props, { children: [icon && (0, import_jsx_runtime189.jsx)("span", { className: css(nav_default.navLinkIcon), children: icon }), (0, import_jsx_runtime189.jsx)("span", { className: css(`${nav_default.nav}__link-text`), children }), flyout && flyoutButton] }));
  };
  const renderClonedChild = (context, child) => (0, import_react77.cloneElement)(child, Object.assign(Object.assign({ onClick: (e) => context.onSelect(e, groupId, itemId, to, preventDefault, onClick), "aria-current": isActive ? "page" : null }, styleChildren && {
    className: css(nav_default.navLink, isActive && nav_default.modifiers.current, child.props && child.props.className)
  }), { tabIndex: child.props.tabIndex || tabIndex, children: hasFlyout ? (0, import_jsx_runtime189.jsxs)(import_react77.Fragment, { children: [child.props.children, flyoutButton] }) : child.props.children }));
  const ouiaProps = useOUIAProps(NavItem.displayName, ouiaId, ouiaSafe);
  const handleMouseEnter = () => {
    setIsHovered(true);
  };
  const handleMouseLeave = () => {
    setIsHovered(false);
  };
  const flyoutPopper = (0, import_jsx_runtime189.jsx)(Popper, { triggerRef: ref, popper: (0, import_jsx_runtime189.jsx)("div", { ref: popperRef, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, children: flyout }), popperRef, placement: "right-start", isVisible: flyoutVisible, onDocumentKeyDown: handleFlyout, zIndex, appendTo: navRef === null || navRef === void 0 ? void 0 : navRef.current });
  const navItem = (0, import_jsx_runtime189.jsxs)(import_jsx_runtime189.Fragment, { children: [(0, import_jsx_runtime189.jsx)("li", Object.assign({ onMouseOver, className: css(nav_default.navItem, hasFlyout && nav_default.modifiers.flyout, className), ref }, ouiaProps, { children: (0, import_jsx_runtime189.jsx)(NavContext.Consumer, { children: (context) => (0, import_react77.isValidElement)(children) ? renderClonedChild(context, children) : renderDefaultLink(context) }) })), flyout && flyoutPopper] });
  return navItem;
};
NavItem.displayName = "NavItem";

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavItemSeparator.js
var import_jsx_runtime190 = __toESM(require_jsx_runtime());
var NavItemSeparator = (_a) => {
  var { component = "li", role = "presentation" } = _a, props = __rest(_a, ["component", "role"]);
  return (0, import_jsx_runtime190.jsx)(Divider, Object.assign({ component, role }, props));
};
NavItemSeparator.displayName = "NavItemSeparator";

// node_modules/@patternfly/react-core/dist/esm/components/Nav/NavExpandable.js
var import_jsx_runtime191 = __toESM(require_jsx_runtime());
var import_react78 = __toESM(require_react());
var NavExpandable = class _NavExpandable extends import_react78.Component {
  constructor() {
    super(...arguments);
    this.id = this.props.id || getUniqueId();
    this.state = {
      expandedState: this.props.isExpanded,
      ouiaStateId: getDefaultOUIAId(_NavExpandable.displayName)
    };
    this.onExpand = (event, onToggle) => {
      const { expandedState } = this.state;
      if (this.props.onExpand) {
        this.props.onExpand(event, !expandedState);
      } else {
        this.setState((prevState) => ({ expandedState: !prevState.expandedState }));
        const { groupId } = this.props;
        onToggle(event, groupId, !expandedState);
      }
    };
  }
  componentDidMount() {
    this.setState({ expandedState: this.props.isExpanded });
  }
  componentDidUpdate(prevProps) {
    if (this.props.isExpanded !== prevProps.isExpanded) {
      this.setState({ expandedState: this.props.isExpanded });
    }
  }
  render() {
    const _a = this.props, {
      title,
      srText,
      children,
      className,
      isActive,
      ouiaId,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      groupId,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      id,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      isExpanded,
      buttonProps,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onExpand
    } = _a, props = __rest(_a, ["title", "srText", "children", "className", "isActive", "ouiaId", "groupId", "id", "isExpanded", "buttonProps", "onExpand"]);
    const { expandedState, ouiaStateId } = this.state;
    return (0, import_jsx_runtime191.jsx)(NavContext.Consumer, { children: (context) => (0, import_jsx_runtime191.jsxs)("li", Object.assign({ className: css(nav_default.navItem, expandedState && nav_default.modifiers.expanded, isActive && nav_default.modifiers.current, className) }, getOUIAProps(_NavExpandable.displayName, ouiaId !== void 0 ? ouiaId : ouiaStateId), props, { children: [(0, import_jsx_runtime191.jsx)(PageSidebarContext.Consumer, { children: ({ isSidebarOpen }) => (0, import_jsx_runtime191.jsxs)("button", Object.assign({ className: css(nav_default.navLink), id: srText ? null : this.id, onClick: (event) => this.onExpand(event, context.onToggle), "aria-expanded": expandedState, tabIndex: isSidebarOpen ? null : -1 }, buttonProps, { children: [typeof title !== "string" ? (0, import_jsx_runtime191.jsx)("span", { className: css(`${nav_default.nav}__link-text`), children: title }) : title, (0, import_jsx_runtime191.jsx)("span", { className: css(nav_default.navToggle), children: (0, import_jsx_runtime191.jsx)("span", { className: css(nav_default.navToggleIcon), children: (0, import_jsx_runtime191.jsx)(angle_right_icon_default, {}) }) })] })) }), (0, import_jsx_runtime191.jsxs)("section", Object.assign({ className: css(nav_default.navSubnav), "aria-labelledby": this.id, hidden: expandedState ? null : true }, !expandedState && { inert: "" }, { children: [srText && (0, import_jsx_runtime191.jsx)("h2", { className: "pf-v6-screen-reader", id: this.id, children: srText }), (0, import_jsx_runtime191.jsx)("ul", { className: css(nav_default.navList), role: "list", children })] }))] })) });
  }
};
NavExpandable.displayName = "NavExpandable";
NavExpandable.defaultProps = {
  srText: "",
  isExpanded: false,
  children: "",
  className: "",
  groupId: null,
  isActive: false,
  id: ""
};

// node_modules/@patternfly/react-core/dist/esm/components/NotificationBadge/NotificationBadge.js
var import_jsx_runtime192 = __toESM(require_jsx_runtime());
var import_react79 = __toESM(require_react());
var NotificationBadgeVariant;
(function(NotificationBadgeVariant2) {
  NotificationBadgeVariant2["read"] = "read";
  NotificationBadgeVariant2["unread"] = "unread";
  NotificationBadgeVariant2["attention"] = "attention";
})(NotificationBadgeVariant || (NotificationBadgeVariant = {}));
var NotificationBadge = (_a) => {
  var { children, variant = NotificationBadgeVariant.read, count = 0, attentionIcon = (0, import_jsx_runtime192.jsx)(attention_bell_icon_default, {}), icon = (0, import_jsx_runtime192.jsx)(bell_icon_default, {}), className, isExpanded = false, shouldNotify = false, onAnimationEnd } = _a, props = __rest(_a, ["children", "variant", "count", "attentionIcon", "icon", "className", "isExpanded", "shouldNotify", "onAnimationEnd"]);
  const [isAnimating, setIsAnimating] = (0, import_react79.useState)(shouldNotify);
  const hasCount = count > 0;
  const hasChildren = children !== void 0;
  const isAttention = variant === NotificationBadgeVariant.attention;
  const notificationIcon = isAttention ? attentionIcon : icon;
  let notificationContent = null;
  if (hasCount) {
    notificationContent = count;
  } else if (hasChildren) {
    notificationContent = children;
  }
  const buttonClassName = isAnimating ? css(className, button_default.modifiers.notify) : className;
  (0, import_react79.useEffect)(() => {
    setIsAnimating(shouldNotify);
  }, [shouldNotify]);
  const handleAnimationEnd = (event) => {
    onAnimationEnd === null || onAnimationEnd === void 0 ? void 0 : onAnimationEnd(event);
    setIsAnimating(false);
  };
  return (0, import_jsx_runtime192.jsx)(Button, Object.assign({ variant: ButtonVariant.stateful, className: buttonClassName, "aria-expanded": isExpanded, state: variant, isClicked: isExpanded, icon: notificationIcon, onAnimationEnd: handleAnimationEnd }, props, { children: notificationContent }));
};
NotificationBadge.displayName = "NotificationBadge";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawer.js
var import_jsx_runtime193 = __toESM(require_jsx_runtime());
var import_react80 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/NotificationDrawer/notification-drawer.css";
var notification_drawer_default = {
  "dirRtl": "pf-v6-m-dir-rtl",
  "modifiers": {
    "info": "pf-m-info",
    "warning": "pf-m-warning",
    "danger": "pf-m-danger",
    "success": "pf-m-success",
    "custom": "pf-m-custom",
    "read": "pf-m-read",
    "hoverable": "pf-m-hoverable",
    "truncate": "pf-m-truncate",
    "noOffset": "pf-m-no-offset",
    "expanded": "pf-m-expanded"
  },
  "notificationDrawer": "pf-v6-c-notification-drawer",
  "notificationDrawerBody": "pf-v6-c-notification-drawer__body",
  "notificationDrawerGroup": "pf-v6-c-notification-drawer__group",
  "notificationDrawerGroupList": "pf-v6-c-notification-drawer__group-list",
  "notificationDrawerGroupToggle": "pf-v6-c-notification-drawer__group-toggle",
  "notificationDrawerGroupToggleCount": "pf-v6-c-notification-drawer__group-toggle-count",
  "notificationDrawerGroupToggleIcon": "pf-v6-c-notification-drawer__group-toggle-icon",
  "notificationDrawerGroupToggleTitle": "pf-v6-c-notification-drawer__group-toggle-title",
  "notificationDrawerHeader": "pf-v6-c-notification-drawer__header",
  "notificationDrawerHeaderAction": "pf-v6-c-notification-drawer__header-action",
  "notificationDrawerHeaderStatus": "pf-v6-c-notification-drawer__header-status",
  "notificationDrawerHeaderTitle": "pf-v6-c-notification-drawer__header-title",
  "notificationDrawerList": "pf-v6-c-notification-drawer__list",
  "notificationDrawerListItem": "pf-v6-c-notification-drawer__list-item",
  "notificationDrawerListItemAction": "pf-v6-c-notification-drawer__list-item-action",
  "notificationDrawerListItemDescription": "pf-v6-c-notification-drawer__list-item-description",
  "notificationDrawerListItemHeader": "pf-v6-c-notification-drawer__list-item-header",
  "notificationDrawerListItemHeaderIcon": "pf-v6-c-notification-drawer__list-item-header-icon",
  "notificationDrawerListItemHeaderTitle": "pf-v6-c-notification-drawer__list-item-header-title",
  "notificationDrawerListItemTimestamp": "pf-v6-c-notification-drawer__list-item-timestamp"
};

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawer.js
var NotificationDrawerBase = (_a) => {
  var { children, className = "", innerRef } = _a, props = __rest(_a, ["children", "className", "innerRef"]);
  return (0, import_jsx_runtime193.jsx)("div", Object.assign({ ref: innerRef }, props, { className: css(notification_drawer_default.notificationDrawer, className), children }));
};
var NotificationDrawer = (0, import_react80.forwardRef)((props, ref) => (0, import_jsx_runtime193.jsx)(NotificationDrawerBase, Object.assign({ innerRef: ref }, props)));
NotificationDrawer.displayName = "NotificationDrawer";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerBody.js
var import_jsx_runtime194 = __toESM(require_jsx_runtime());
var NotificationDrawerBody = (_a) => {
  var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime194.jsx)("div", Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerBody, className), children }));
};
NotificationDrawerBody.displayName = "NotificationDrawerBody";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerGroup.js
var import_jsx_runtime195 = __toESM(require_jsx_runtime());
var import_react81 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/c_notification_drawer__group_toggle_title_max_lines.js
var c_notification_drawer__group_toggle_title_max_lines = {
  "name": "--pf-v6-c-notification-drawer__group-toggle-title--max-lines",
  "value": "1",
  "var": "var(--pf-v6-c-notification-drawer__group-toggle-title--max-lines)"
};
var c_notification_drawer_group_toggle_title_max_lines_default = c_notification_drawer__group_toggle_title_max_lines;

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerGroup.js
var NotificationDrawerGroup = (_a) => {
  var {
    children,
    className = "",
    count,
    isExpanded,
    isRead = false,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onExpand = (event, expanded) => void 0,
    title,
    truncateTitle = 0,
    tooltipPosition,
    headingLevel: HeadingLevel = "h1"
  } = _a, props = __rest(_a, ["children", "className", "count", "isExpanded", "isRead", "onExpand", "title", "truncateTitle", "tooltipPosition", "headingLevel"]);
  const titleRef = (0, import_react81.useRef)(null);
  const [isTooltipVisible, setIsTooltipVisible] = (0, import_react81.useState)(false);
  (0, import_react81.useEffect)(() => {
    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;
    if (isTooltipVisible !== showTooltip) {
      setIsTooltipVisible(showTooltip);
    }
    if (!titleRef.current || !truncateTitle) {
      return;
    }
    titleRef.current.style.setProperty(c_notification_drawer_group_toggle_title_max_lines_default.name, truncateTitle.toString());
  }, [titleRef, truncateTitle, isTooltipVisible]);
  const Title2 = (0, import_jsx_runtime195.jsx)("div", Object.assign({}, isTooltipVisible && { tabIndex: 0 }, { ref: titleRef, className: css(notification_drawer_default.notificationDrawerGroupToggleTitle), children: title }));
  return (0, import_jsx_runtime195.jsxs)("section", Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerGroup, isExpanded && notification_drawer_default.modifiers.expanded, className), children: [(0, import_jsx_runtime195.jsx)(HeadingLevel, { children: (0, import_jsx_runtime195.jsxs)("button", { className: css(notification_drawer_default.notificationDrawerGroupToggle), "aria-expanded": isExpanded, onClick: (e) => onExpand(e, !isExpanded), onKeyDown: (e) => {
    if (e.key === "Enter" || e.key === " ") {
      e.preventDefault();
      onExpand(e, !isExpanded);
    }
  }, children: [isTooltipVisible ? (0, import_jsx_runtime195.jsx)(Tooltip, { content: title, position: tooltipPosition, children: Title2 }) : Title2, (0, import_jsx_runtime195.jsx)("div", { className: css(notification_drawer_default.notificationDrawerGroupToggleCount), children: (0, import_jsx_runtime195.jsx)(Badge, { isRead, children: count }) }), (0, import_jsx_runtime195.jsx)("span", { className: notification_drawer_default.notificationDrawerGroupToggleIcon, children: (0, import_jsx_runtime195.jsx)(angle_right_icon_default, {}) })] }) }), children] }));
};
NotificationDrawerGroup.displayName = "NotificationDrawerGroup";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerGroupList.js
var import_jsx_runtime196 = __toESM(require_jsx_runtime());
var NotificationDrawerGroupList = (_a) => {
  var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime196.jsx)("div", Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerGroupList, className), children }));
};
NotificationDrawerGroupList.displayName = "NotificationDrawerGroupList";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerHeader.js
var import_jsx_runtime197 = __toESM(require_jsx_runtime());
var NotificationDrawerHeader = (_a) => {
  var { children, className = "", count, closeButtonAriaLabel = "Close", customText, onClose, title = "Notifications", unreadText = "unread" } = _a, props = __rest(_a, ["children", "className", "count", "closeButtonAriaLabel", "customText", "onClose", "title", "unreadText"]);
  return (0, import_jsx_runtime197.jsxs)("div", Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerHeader, className), children: [(0, import_jsx_runtime197.jsx)("h1", { className: css(notification_drawer_default.notificationDrawerHeaderTitle), children: title }), (customText !== void 0 || count !== void 0) && (0, import_jsx_runtime197.jsx)("span", { className: css(notification_drawer_default.notificationDrawerHeaderStatus), "aria-live": "polite", children: customText || `${count} ${unreadText}` }), (children || onClose) && (0, import_jsx_runtime197.jsxs)("div", { className: css(notification_drawer_default.notificationDrawerHeaderAction), children: [children, onClose && (0, import_jsx_runtime197.jsx)("div", { children: (0, import_jsx_runtime197.jsx)(Button, { variant: ButtonVariant.plain, "aria-label": closeButtonAriaLabel, onClick: (event) => onClose(event), icon: (0, import_jsx_runtime197.jsx)(times_icon_default, {}) }) })] })] }));
};
NotificationDrawerHeader.displayName = "NotificationDrawerHeader";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerList.js
var import_jsx_runtime198 = __toESM(require_jsx_runtime());
var NotificationDrawerList = (_a) => {
  var { children, className = "", isHidden = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "isHidden", "aria-label"]);
  return (0, import_jsx_runtime198.jsx)("ul", Object.assign({}, props, { className: css(`${notification_drawer_default.notificationDrawer}__list`, className), hidden: isHidden, role: "list", "aria-label": ariaLabel, children }));
};
NotificationDrawerList.displayName = "NotificationDrawerList";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerListItem.js
var import_jsx_runtime199 = __toESM(require_jsx_runtime());
var NotificationDrawerListItem = (_a) => {
  var {
    children = null,
    className = "",
    isHoverable = true,
    isRead = false,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onClick = (event) => void 0,
    readStateScreenReaderText,
    tabIndex = 0,
    variant = "custom"
  } = _a, props = __rest(_a, ["children", "className", "isHoverable", "isRead", "onClick", "readStateScreenReaderText", "tabIndex", "variant"]);
  const onKeyDown = (event) => {
    if (!event.target.parentElement.classList.contains(notification_drawer_default.notificationDrawerListItemAction)) {
      if (event.key === "Enter" || event.key === " ") {
        event.target.click();
      }
    }
  };
  let readStateSRText;
  if (readStateScreenReaderText) {
    readStateSRText = readStateScreenReaderText;
  } else {
    readStateSRText = isRead ? "read" : "unread";
  }
  return (0, import_jsx_runtime199.jsxs)("li", Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerListItem, isHoverable && notification_drawer_default.modifiers.hoverable, notification_drawer_default.modifiers[variant], isRead && notification_drawer_default.modifiers.read, className), tabIndex, onClick: (e) => onClick(e), onKeyDown, children: [(0, import_jsx_runtime199.jsx)("span", { className: "pf-v6-screen-reader", children: readStateSRText }), children] }));
};
NotificationDrawerListItem.displayName = "NotificationDrawerListItem";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerListItemBody.js
var import_jsx_runtime200 = __toESM(require_jsx_runtime());
var import_react82 = __toESM(require_react());
var NotificationDrawerListItemBody = (_a) => {
  var { children, className = "", timestamp } = _a, props = __rest(_a, ["children", "className", "timestamp"]);
  return (0, import_jsx_runtime200.jsxs)(import_react82.Fragment, { children: [(0, import_jsx_runtime200.jsx)("div", Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerListItemDescription, className), children })), timestamp && (0, import_jsx_runtime200.jsx)("div", { className: css(notification_drawer_default.notificationDrawerListItemTimestamp, className), children: timestamp })] });
};
NotificationDrawerListItemBody.displayName = "NotificationDrawerListItemBody";

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerListItemHeader.js
var import_jsx_runtime201 = __toESM(require_jsx_runtime());
var import_react83 = __toESM(require_react());

// node_modules/@patternfly/react-tokens/dist/esm/c_notification_drawer__list_item_header_title_max_lines.js
var c_notification_drawer__list_item_header_title_max_lines = {
  "name": "--pf-v6-c-notification-drawer__list-item-header-title--max-lines",
  "value": "1",
  "var": "var(--pf-v6-c-notification-drawer__list-item-header-title--max-lines)"
};
var c_notification_drawer_list_item_header_title_max_lines_default = c_notification_drawer__list_item_header_title_max_lines;

// node_modules/@patternfly/react-core/dist/esm/components/NotificationDrawer/NotificationDrawerListItemHeader.js
var variantIcons2 = {
  success: check_circle_icon_default,
  danger: exclamation_circle_icon_default,
  warning: exclamation_triangle_icon_default,
  info: info_circle_icon_default,
  custom: bell_icon_default
};
var NotificationDrawerListItemHeader = (_a) => {
  var { children, className = "", icon = null, srTitle, title, variant = "custom", truncateTitle = 0, tooltipPosition, headingLevel: HeadingLevel = "h2", actionHasNoOffset = false } = _a, props = __rest(_a, ["children", "className", "icon", "srTitle", "title", "variant", "truncateTitle", "tooltipPosition", "headingLevel", "actionHasNoOffset"]);
  const titleRef = (0, import_react83.useRef)(null);
  const [isTooltipVisible, setIsTooltipVisible] = (0, import_react83.useState)(false);
  (0, import_react83.useEffect)(() => {
    if (!titleRef.current || !truncateTitle) {
      return;
    }
    titleRef.current.style.setProperty(c_notification_drawer_list_item_header_title_max_lines_default.name, truncateTitle.toString());
    const showTooltip = titleRef.current && titleRef.current.offsetHeight < titleRef.current.scrollHeight;
    if (isTooltipVisible !== showTooltip) {
      setIsTooltipVisible(showTooltip);
    }
  }, [titleRef, truncateTitle, isTooltipVisible]);
  const Icon2 = variantIcons2[variant];
  const Title2 = (0, import_jsx_runtime201.jsxs)(HeadingLevel, Object.assign({}, isTooltipVisible && { tabIndex: 0 }, { ref: titleRef, className: css(notification_drawer_default.notificationDrawerListItemHeaderTitle, truncateTitle && notification_drawer_default.modifiers.truncate), children: [srTitle && (0, import_jsx_runtime201.jsx)("span", { className: "pf-v6-screen-reader", children: srTitle }), title] }));
  return (0, import_jsx_runtime201.jsxs)(import_react83.Fragment, { children: [(0, import_jsx_runtime201.jsxs)("div", Object.assign({}, props, { className: css(notification_drawer_default.notificationDrawerListItemHeader, className), children: [(0, import_jsx_runtime201.jsx)("span", { className: css(notification_drawer_default.notificationDrawerListItemHeaderIcon), children: icon ? icon : (0, import_jsx_runtime201.jsx)(Icon2, {}) }), isTooltipVisible ? (0, import_jsx_runtime201.jsx)(Tooltip, { content: title, position: tooltipPosition, children: Title2 }) : Title2] })), children && (0, import_jsx_runtime201.jsx)("div", { className: css(notification_drawer_default.notificationDrawerListItemAction, actionHasNoOffset && notification_drawer_default.modifiers.noOffset), children })] });
};
NotificationDrawerListItemHeader.displayName = "NotificationDrawerListItemHeader";

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenu.js
var import_jsx_runtime202 = __toESM(require_jsx_runtime());
var import_react85 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/OverflowMenu/overflow-menu.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/OverflowMenu/overflow-menu.css";
var overflow_menu_default = {
  "modifiers": {
    "buttonGroup": "pf-m-button-group",
    "iconButtonGroup": "pf-m-icon-button-group"
  },
  "overflowMenu": "pf-v6-c-overflow-menu",
  "overflowMenuContent": "pf-v6-c-overflow-menu__content",
  "overflowMenuControl": "pf-v6-c-overflow-menu__control",
  "overflowMenuGroup": "pf-v6-c-overflow-menu__group",
  "overflowMenuItem": "pf-v6-c-overflow-menu__item"
};

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuContext.js
var import_react84 = __toESM(require_react());
var OverflowMenuContext = (0, import_react84.createContext)({
  isBelowBreakpoint: false
});

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenu.js
var OverflowMenu = class extends import_react85.Component {
  constructor(props) {
    super(props);
    this.observer = () => {
    };
    this.handleResize = () => {
      const breakpointWidth = globalWidthBreakpoints[this.props.breakpoint];
      if (!breakpointWidth) {
        console.error("OverflowMenu will not be visible without a valid breakpoint.");
        return;
      }
      const relativeWidth = this.state.breakpointRef ? this.state.breakpointRef.clientWidth : window.innerWidth;
      const isBelowBreakpoint = relativeWidth < breakpointWidth;
      if (this.state.isBelowBreakpoint !== isBelowBreakpoint) {
        this.setState({ isBelowBreakpoint });
      }
    };
    this.handleResizeWithDelay = debounce(this.handleResize, 250);
    this.state = {
      isBelowBreakpoint: false,
      breakpointRef: void 0
    };
  }
  getBreakpointRef() {
    const { breakpointReference } = this.props;
    if (breakpointReference.current) {
      return breakpointReference.current;
    } else if (typeof breakpointReference === "function") {
      return breakpointReference();
    }
  }
  componentDidMount() {
    const reference = this.props.breakpointReference ? this.getBreakpointRef() : void 0;
    this.setState({ breakpointRef: reference });
    this.observer = getResizeObserver(reference, this.handleResizeWithDelay);
    this.handleResize();
  }
  componentDidUpdate(prevProps, prevState) {
    const reference = this.props.breakpointReference ? this.getBreakpointRef() : void 0;
    if (prevState.breakpointRef !== reference) {
      this.observer();
      this.setState({ breakpointRef: reference });
      this.observer = getResizeObserver(reference, this.handleResizeWithDelay);
      this.handleResize();
    }
  }
  componentWillUnmount() {
    this.observer();
  }
  render() {
    const _a = this.props, { className, breakpoint, children, breakpointReference } = _a, props = __rest(_a, ["className", "breakpoint", "children", "breakpointReference"]);
    return (0, import_jsx_runtime202.jsx)("div", Object.assign({}, props, { className: css(overflow_menu_default.overflowMenu, className), children: (0, import_jsx_runtime202.jsx)(OverflowMenuContext.Provider, { value: { isBelowBreakpoint: this.state.isBelowBreakpoint }, children }) }));
  }
};
OverflowMenu.displayName = "OverflowMenu";
OverflowMenu.contextType = OverflowMenuContext;

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuControl.js
var import_jsx_runtime203 = __toESM(require_jsx_runtime());
var OverflowMenuControl = (_a) => {
  var { className, children, hasAdditionalOptions } = _a, props = __rest(_a, ["className", "children", "hasAdditionalOptions"]);
  return (0, import_jsx_runtime203.jsx)(OverflowMenuContext.Consumer, { children: (value) => (value.isBelowBreakpoint || hasAdditionalOptions) && (0, import_jsx_runtime203.jsxs)("div", Object.assign({ className: css(overflow_menu_default.overflowMenuControl, className) }, props, { children: [" ", children, " "] })) });
};
OverflowMenuControl.displayName = "OverflowMenuControl";

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuContent.js
var import_jsx_runtime204 = __toESM(require_jsx_runtime());
var OverflowMenuContent = ({ className, children, isPersistent }) => (0, import_jsx_runtime204.jsx)(OverflowMenuContext.Consumer, { children: (value) => (!value.isBelowBreakpoint || isPersistent) && (0, import_jsx_runtime204.jsx)("div", { className: css(overflow_menu_default.overflowMenuContent, className), children }) });
OverflowMenuContent.displayName = "OverflowMenuContent";

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuGroup.js
var import_jsx_runtime205 = __toESM(require_jsx_runtime());
var OverflowMenuGroup = (_a) => {
  var { className, children, isPersistent = false, groupType } = _a, props = __rest(_a, ["className", "children", "isPersistent", "groupType"]);
  return (0, import_jsx_runtime205.jsx)(OverflowMenuContext.Consumer, { children: (value) => (isPersistent || !value.isBelowBreakpoint) && (0, import_jsx_runtime205.jsx)("div", Object.assign({ className: css(overflow_menu_default.overflowMenuGroup, groupType === "button" && overflow_menu_default.modifiers.buttonGroup, groupType === "icon" && overflow_menu_default.modifiers.iconButtonGroup, className) }, props, { children })) });
};
OverflowMenuGroup.displayName = "OverflowMenuGroup";

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuItem.js
var import_jsx_runtime206 = __toESM(require_jsx_runtime());
var OverflowMenuItem = ({ className, children, isPersistent = false }) => (0, import_jsx_runtime206.jsx)(OverflowMenuContext.Consumer, { children: (value) => (isPersistent || !value.isBelowBreakpoint) && (0, import_jsx_runtime206.jsxs)("div", { className: css(overflow_menu_default.overflowMenuItem, className), children: [" ", children, " "] }) });
OverflowMenuItem.displayName = "OverflowMenuItem";

// node_modules/@patternfly/react-core/dist/esm/components/OverflowMenu/OverflowMenuDropdownItem.js
var import_jsx_runtime207 = __toESM(require_jsx_runtime());
var OverflowMenuDropdownItem = (_a) => {
  var { children, isShared = false, itemId } = _a, additionalProps = __rest(_a, ["children", "isShared", "itemId"]);
  return (0, import_jsx_runtime207.jsx)(OverflowMenuContext.Consumer, { children: (value) => (!isShared || value.isBelowBreakpoint) && (0, import_jsx_runtime207.jsx)(DropdownItem, Object.assign({ component: "button", value: itemId }, additionalProps, { children })) });
};
OverflowMenuDropdownItem.displayName = "OverflowMenuDropdownItem";

// node_modules/@patternfly/react-core/dist/esm/components/Page/Page.js
var import_jsx_runtime211 = __toESM(require_jsx_runtime());
var import_react88 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageBreadcrumb.js
var import_jsx_runtime209 = __toESM(require_jsx_runtime());
var import_react86 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageBody.js
var import_jsx_runtime208 = __toESM(require_jsx_runtime());
var PageBody = (_a) => {
  var { className, children } = _a, props = __rest(_a, ["className", "children"]);
  return (0, import_jsx_runtime208.jsx)("div", Object.assign({}, props, { className: css(page_default.pageMainBody, className), children }));
};
PageBody.displayName = "PageBody";

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageBreadcrumb.js
var PageBreadcrumb = (_a) => {
  var { className = "", children, isWidthLimited, stickyOnBreakpoint, hasShadowTop = false, hasShadowBottom = false, hasOverflowScroll = false, "aria-label": ariaLabel, hasBodyWrapper = true } = _a, props = __rest(_a, ["className", "children", "isWidthLimited", "stickyOnBreakpoint", "hasShadowTop", "hasShadowBottom", "hasOverflowScroll", "aria-label", "hasBodyWrapper"]);
  const { height, getVerticalBreakpoint: getVerticalBreakpoint2 } = (0, import_react86.useContext)(PageContext);
  (0, import_react86.useEffect)(() => {
    if (hasOverflowScroll && !ariaLabel) {
      console.warn("PageBreadcrumb: An accessible aria-label is required when hasOverflowScroll is set to true.");
    }
  }, [hasOverflowScroll, ariaLabel]);
  return (0, import_jsx_runtime209.jsx)("section", Object.assign({ className: css(page_default.pageMainBreadcrumb, formatBreakpointMods(stickyOnBreakpoint, page_default, "sticky-", getVerticalBreakpoint2(height), true), isWidthLimited && page_default.modifiers.limitWidth, hasShadowTop && page_default.modifiers.shadowTop, hasShadowBottom && page_default.modifiers.shadowBottom, hasOverflowScroll && page_default.modifiers.overflowScroll, className) }, hasOverflowScroll && { tabIndex: 0 }, { "aria-label": ariaLabel }, props, { children: hasBodyWrapper ? (0, import_jsx_runtime209.jsx)(PageBody, { children }) : children }));
};
PageBreadcrumb.displayName = "PageBreadcrumb";

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageGroup.js
var import_jsx_runtime210 = __toESM(require_jsx_runtime());
var import_react87 = __toESM(require_react());
var PageGroup = (_a) => {
  var { className = "", children, stickyOnBreakpoint, isFilled, hasShadowTop = false, hasShadowBottom = false, hasOverflowScroll = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["className", "children", "stickyOnBreakpoint", "isFilled", "hasShadowTop", "hasShadowBottom", "hasOverflowScroll", "aria-label"]);
  const { height, getVerticalBreakpoint: getVerticalBreakpoint2 } = (0, import_react87.useContext)(PageContext);
  (0, import_react87.useEffect)(() => {
    if (hasOverflowScroll && !ariaLabel) {
      console.warn("PageGroup: An accessible aria-label is required when hasOverflowScroll is set to true.");
    }
  }, [hasOverflowScroll, ariaLabel]);
  return (0, import_jsx_runtime210.jsx)("div", Object.assign({}, props, { className: css(page_default.pageMainGroup, formatBreakpointMods(stickyOnBreakpoint, page_default, "sticky-", getVerticalBreakpoint2(height), true), isFilled === false && page_default.modifiers.noFill, isFilled === true && page_default.modifiers.fill, hasShadowTop && page_default.modifiers.shadowTop, hasShadowBottom && page_default.modifiers.shadowBottom, hasOverflowScroll && page_default.modifiers.overflowScroll, className) }, hasOverflowScroll && { tabIndex: 0, role: "region", "aria-label": ariaLabel }, { children }));
};
PageGroup.displayName = "PageGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Page/Page.js
var PageLayouts;
(function(PageLayouts2) {
  PageLayouts2["vertical"] = "vertical";
  PageLayouts2["horizontal"] = "horizontal";
})(PageLayouts || (PageLayouts = {}));
var Page = class extends import_react88.Component {
  constructor(props) {
    super(props);
    this.mainRef = (0, import_react88.createRef)();
    this.pageRef = (0, import_react88.createRef)();
    this.observer = () => {
    };
    this.getWindowWidth = () => {
      if (canUseDOM) {
        return this.pageRef.current ? this.pageRef.current.clientWidth : window.innerWidth;
      } else {
        return 1200;
      }
    };
    this.isMobile = () => (
      // eslint-disable-next-line radix
      this.getWindowWidth() < Number.parseInt(t_global_breakpoint_xl_default.value, 10) * 16
    );
    this.resize = (_event) => {
      var _a;
      const { onPageResize } = this.props;
      const mobileView = this.isMobile();
      if (onPageResize) {
        onPageResize(_event, { mobileView, windowSize: this.getWindowWidth() });
      }
      if (mobileView !== this.state.mobileView) {
        this.setState({ mobileView });
      }
      if ((_a = this.pageRef) === null || _a === void 0 ? void 0 : _a.current) {
        const currentWidth = this.pageRef.current.clientWidth;
        const currentHeight = this.pageRef.current.clientHeight;
        if (this.state.width !== currentWidth) {
          this.setState({ width: currentWidth });
        }
        if (this.state.height !== currentHeight) {
          this.setState({ height: currentHeight });
        }
      }
    };
    this.handleResize = debounce(this.resize, 250);
    this.handleMainClick = () => {
      if (this.isMobile() && this.state.mobileIsSidebarOpen && this.mainRef.current) {
        this.setState({ mobileIsSidebarOpen: false });
      }
    };
    this.onSidebarToggleMobile = () => {
      this.setState((prevState) => ({
        mobileIsSidebarOpen: !prevState.mobileIsSidebarOpen
      }));
    };
    this.onSidebarToggleDesktop = () => {
      this.setState((prevState) => ({
        desktopIsSidebarOpen: !prevState.desktopIsSidebarOpen
      }));
    };
    const { isManagedSidebar, defaultManagedSidebarIsOpen } = props;
    const managedSidebarOpen = !isManagedSidebar ? true : defaultManagedSidebarIsOpen;
    this.state = {
      desktopIsSidebarOpen: managedSidebarOpen,
      mobileIsSidebarOpen: false,
      mobileView: false,
      width: null,
      height: null
    };
  }
  componentDidMount() {
    const { isManagedSidebar, onPageResize } = this.props;
    if (isManagedSidebar || onPageResize) {
      this.observer = getResizeObserver(this.pageRef.current, this.handleResize);
      const currentRef = this.mainRef.current;
      if (currentRef) {
        currentRef.addEventListener("mousedown", this.handleMainClick);
        currentRef.addEventListener("touchstart", this.handleMainClick);
      }
      this.resize();
    }
  }
  componentWillUnmount() {
    const { isManagedSidebar, onPageResize } = this.props;
    if (isManagedSidebar || onPageResize) {
      this.observer();
      const currentRef = this.mainRef.current;
      if (currentRef) {
        currentRef.removeEventListener("mousedown", this.handleMainClick);
        currentRef.removeEventListener("touchstart", this.handleMainClick);
      }
    }
  }
  render() {
    const _a = this.props, {
      banner,
      breadcrumb,
      isBreadcrumbWidthLimited,
      className,
      children,
      masthead,
      sidebar,
      notificationDrawer,
      isNotificationDrawerExpanded,
      onNotificationDrawerExpand,
      drawerDefaultSize,
      drawerMinSize,
      drawerMaxSize,
      isHorizontalSubnavWidthLimited,
      skipToContent,
      role,
      mainContainerId,
      isManagedSidebar,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      defaultManagedSidebarIsOpen,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onPageResize,
      getBreakpoint: getBreakpoint2,
      getVerticalBreakpoint: getVerticalBreakpoint2,
      mainAriaLabel,
      mainTabIndex,
      mainComponent,
      horizontalSubnav,
      isHorizontalSubnavGrouped,
      isBreadcrumbGrouped,
      additionalGroupedContent,
      groupProps,
      breadcrumbProps,
      isContentFilled
    } = _a, rest = __rest(_a, ["banner", "breadcrumb", "isBreadcrumbWidthLimited", "className", "children", "masthead", "sidebar", "notificationDrawer", "isNotificationDrawerExpanded", "onNotificationDrawerExpand", "drawerDefaultSize", "drawerMinSize", "drawerMaxSize", "isHorizontalSubnavWidthLimited", "skipToContent", "role", "mainContainerId", "isManagedSidebar", "defaultManagedSidebarIsOpen", "onPageResize", "getBreakpoint", "getVerticalBreakpoint", "mainAriaLabel", "mainTabIndex", "mainComponent", "horizontalSubnav", "isHorizontalSubnavGrouped", "isBreadcrumbGrouped", "additionalGroupedContent", "groupProps", "breadcrumbProps", "isContentFilled"]);
    const { mobileView, mobileIsSidebarOpen, desktopIsSidebarOpen, width, height } = this.state;
    const context = {
      isManagedSidebar,
      onSidebarToggle: mobileView ? this.onSidebarToggleMobile : this.onSidebarToggleDesktop,
      isSidebarOpen: mobileView ? mobileIsSidebarOpen : desktopIsSidebarOpen,
      width,
      height,
      getBreakpoint: getBreakpoint2,
      getVerticalBreakpoint: getVerticalBreakpoint2
    };
    let nav = null;
    if (horizontalSubnav) {
      nav = (0, import_jsx_runtime211.jsx)("div", { className: css(page_default.pageMainSubnav, isHorizontalSubnavWidthLimited && page_default.modifiers.limitWidth), children: (0, import_jsx_runtime211.jsx)(PageBody, { children: horizontalSubnav }) });
    }
    const crumb = breadcrumb ? (0, import_jsx_runtime211.jsx)(PageBreadcrumb, { stickyOnBreakpoint: breadcrumbProps === null || breadcrumbProps === void 0 ? void 0 : breadcrumbProps.stickyOnBreakpoint, isWidthLimited: isBreadcrumbWidthLimited, children: (0, import_jsx_runtime211.jsx)(PageBody, { children: breadcrumb }) }) : null;
    const isGrouped = isHorizontalSubnavGrouped || isBreadcrumbGrouped || additionalGroupedContent;
    const group = isGrouped ? (0, import_jsx_runtime211.jsxs)(PageGroup, Object.assign({}, groupProps, { children: [isHorizontalSubnavGrouped && nav, banner, isBreadcrumbGrouped && crumb, additionalGroupedContent] })) : null;
    const Component32 = mainComponent;
    const main = (0, import_jsx_runtime211.jsx)("div", { className: css(page_default.pageMainContainer, isContentFilled && page_default.modifiers.fill), children: (0, import_jsx_runtime211.jsxs)(Component32, { ref: this.mainRef, role, id: mainContainerId, className: css(page_default.pageMain), tabIndex: mainTabIndex, "aria-label": mainAriaLabel, children: [group, !isHorizontalSubnavGrouped && nav, banner, !isBreadcrumbGrouped && crumb, children] }) });
    const panelContent = (0, import_jsx_runtime211.jsx)(DrawerPanelContent, { defaultSize: drawerDefaultSize, minSize: drawerMinSize, maxSize: drawerMaxSize, children: notificationDrawer });
    return (0, import_jsx_runtime211.jsx)(PageContextProvider, { value: context, children: (0, import_jsx_runtime211.jsxs)("div", Object.assign({ ref: this.pageRef }, rest, { className: css(page_default.page, width !== null && height !== null && "pf-m-resize-observer", width !== null && `pf-m-breakpoint-${getBreakpoint2(width)}`, height !== null && `pf-m-height-breakpoint-${getVerticalBreakpoint2(height)}`, sidebar === null && page_default.modifiers.noSidebar, className), children: [skipToContent, masthead, sidebar, notificationDrawer && (0, import_jsx_runtime211.jsx)("div", { className: css(page_default.pageDrawer), children: (0, import_jsx_runtime211.jsx)(Drawer, { isExpanded: isNotificationDrawerExpanded, onExpand: (event) => onNotificationDrawerExpand(event), children: (0, import_jsx_runtime211.jsx)(DrawerContent, { panelContent, children: main }) }) }), !notificationDrawer && main] })) });
  }
};
Page.displayName = "Page";
Page.defaultProps = {
  isManagedSidebar: false,
  isBreadcrumbWidthLimited: false,
  defaultManagedSidebarIsOpen: true,
  mainTabIndex: -1,
  isNotificationDrawerExpanded: false,
  onNotificationDrawerExpand: () => null,
  mainComponent: "main",
  getBreakpoint,
  getVerticalBreakpoint
};

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageSidebarBody.js
var import_jsx_runtime212 = __toESM(require_jsx_runtime());
var PageSidebarBody = (_a) => {
  var { children, className, usePageInsets, isFilled, isContextSelector } = _a, props = __rest(_a, ["children", "className", "usePageInsets", "isFilled", "isContextSelector"]);
  return (0, import_jsx_runtime212.jsx)("div", Object.assign({ className: css(page_default.pageSidebarBody, usePageInsets && page_default.modifiers.pageInsets, isFilled === false && page_default.modifiers.noFill, isFilled === true && page_default.modifiers.fill, isContextSelector === true && page_default.modifiers.contextSelector, className) }, props, { children }));
};
PageSidebarBody.displayName = "PageSidebarBody";

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageSection.js
var import_jsx_runtime213 = __toESM(require_jsx_runtime());
var import_react89 = __toESM(require_react());
var PageSectionVariants;
(function(PageSectionVariants2) {
  PageSectionVariants2["default"] = "default";
  PageSectionVariants2["secondary"] = "secondary";
})(PageSectionVariants || (PageSectionVariants = {}));
var PageSectionTypes;
(function(PageSectionTypes2) {
  PageSectionTypes2["default"] = "default";
  PageSectionTypes2["subNav"] = "subnav";
  PageSectionTypes2["breadcrumb"] = "breadcrumb";
  PageSectionTypes2["tabs"] = "tabs";
  PageSectionTypes2["wizard"] = "wizard";
})(PageSectionTypes || (PageSectionTypes = {}));
var variantType = {
  [PageSectionTypes.default]: page_default.pageMainSection,
  [PageSectionTypes.subNav]: page_default.pageMainSubnav,
  [PageSectionTypes.breadcrumb]: page_default.pageMainBreadcrumb,
  [PageSectionTypes.tabs]: page_default.pageMainTabs,
  [PageSectionTypes.wizard]: page_default.pageMainWizard
};
var variantStyle = {
  [PageSectionVariants.default]: "",
  [PageSectionVariants.secondary]: page_default.modifiers.secondary
};
var PageSection = (_a) => {
  var { className = "", children, variant = "default", type = "default", padding, isFilled, isWidthLimited = false, isCenterAligned = false, stickyOnBreakpoint, hasShadowTop = false, hasShadowBottom = false, hasOverflowScroll = false, "aria-label": ariaLabel, component = "section", hasBodyWrapper = true } = _a, props = __rest(_a, ["className", "children", "variant", "type", "padding", "isFilled", "isWidthLimited", "isCenterAligned", "stickyOnBreakpoint", "hasShadowTop", "hasShadowBottom", "hasOverflowScroll", "aria-label", "component", "hasBodyWrapper"]);
  const { height, getVerticalBreakpoint: getVerticalBreakpoint2 } = (0, import_react89.useContext)(PageContext);
  (0, import_react89.useEffect)(() => {
    if (hasOverflowScroll && !ariaLabel) {
      console.warn("PageSection: An accessible aria-label is required when hasOverflowScroll is set to true.");
    }
  }, [hasOverflowScroll, ariaLabel]);
  const Component32 = component;
  return (0, import_jsx_runtime213.jsx)(Component32, Object.assign({}, props, { className: css(variantType[type], formatBreakpointMods(padding, page_default), formatBreakpointMods(stickyOnBreakpoint, page_default, "sticky-", getVerticalBreakpoint2(height), true), type === PageSectionTypes.default && variantStyle[variant], isFilled === false && page_default.modifiers.noFill, isFilled === true && page_default.modifiers.fill, isWidthLimited && page_default.modifiers.limitWidth, isWidthLimited && isCenterAligned && type !== PageSectionTypes.subNav && page_default.modifiers.alignCenter, hasShadowTop && page_default.modifiers.shadowTop, hasShadowBottom && page_default.modifiers.shadowBottom, hasOverflowScroll && page_default.modifiers.overflowScroll, className) }, hasOverflowScroll && { tabIndex: 0 }, { "aria-label": ariaLabel, children: hasBodyWrapper ? (0, import_jsx_runtime213.jsx)(PageBody, { children }) : children }));
};
PageSection.displayName = "PageSection";

// node_modules/@patternfly/react-core/dist/esm/components/Page/PageToggleButton.js
var import_jsx_runtime214 = __toESM(require_jsx_runtime());
var PageToggleButton = (_a) => {
  var { children, isSidebarOpen = true, onSidebarToggle = () => void 0, id = "nav-toggle", "aria-label": ariaLabel = "Side navigation toggle", isHamburgerButton, hamburgerVariant } = _a, props = __rest(_a, ["children", "isSidebarOpen", "onSidebarToggle", "id", "aria-label", "isHamburgerButton", "hamburgerVariant"]);
  return (0, import_jsx_runtime214.jsx)(PageContextConsumer, { children: ({ isManagedSidebar, onSidebarToggle: managedOnSidebarToggle, isSidebarOpen: managedIsSidebarOpen }) => {
    const sidebarToggle = isManagedSidebar ? managedOnSidebarToggle : onSidebarToggle;
    const sidebarOpen = isManagedSidebar ? managedIsSidebarOpen : isSidebarOpen;
    return (0, import_jsx_runtime214.jsx)(Button, Object.assign({ id, onClick: sidebarToggle, "aria-label": ariaLabel, "aria-expanded": sidebarOpen ? "true" : "false", variant: ButtonVariant.plain, isHamburger: isHamburgerButton, hamburgerVariant }, isHamburgerButton && {
      isExpanded: sidebarOpen
    }, props, { children: !isHamburgerButton && children }));
  } });
};
PageToggleButton.displayName = "PageToggleButton";

// node_modules/@patternfly/react-core/dist/esm/components/Pagination/Pagination.js
var import_jsx_runtime218 = __toESM(require_jsx_runtime());
var import_react93 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Pagination/ToggleTemplate.js
var import_jsx_runtime215 = __toESM(require_jsx_runtime());
var import_react90 = __toESM(require_react());
var ToggleTemplate = ({ firstIndex = 0, lastIndex = 0, itemCount = 0, itemsTitle = "items", ofWord = "of" }) => (0, import_jsx_runtime215.jsxs)(import_react90.Fragment, { children: [(0, import_jsx_runtime215.jsxs)("b", { children: [firstIndex, " - ", lastIndex] }), " ", ofWord, " ", (0, import_jsx_runtime215.jsx)("b", { children: itemCount }), " ", itemsTitle] });
ToggleTemplate.displayName = "ToggleTemplate";

// node_modules/@patternfly/react-styles/css/components/Pagination/pagination.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Pagination/pagination.css";
var pagination_default = {
  "dirRtl": "pf-v6-m-dir-rtl",
  "formControl": "pf-v6-c-form-control",
  "modifiers": {
    "bottom": "pf-m-bottom",
    "first": "pf-m-first",
    "last": "pf-m-last",
    "static": "pf-m-static",
    "sticky": "pf-m-sticky",
    "pageInsets": "pf-m-page-insets",
    "displaySummary": "pf-m-display-summary",
    "displayFull": "pf-m-display-full",
    "insetNone": "pf-m-inset-none",
    "insetSm": "pf-m-inset-sm",
    "insetMd": "pf-m-inset-md",
    "insetLg": "pf-m-inset-lg",
    "insetXl": "pf-m-inset-xl",
    "inset_2xl": "pf-m-inset-2xl",
    "displaySummaryOnSm": "pf-m-display-summary-on-sm",
    "displayFullOnSm": "pf-m-display-full-on-sm",
    "insetNoneOnSm": "pf-m-inset-none-on-sm",
    "insetSmOnSm": "pf-m-inset-sm-on-sm",
    "insetMdOnSm": "pf-m-inset-md-on-sm",
    "insetLgOnSm": "pf-m-inset-lg-on-sm",
    "insetXlOnSm": "pf-m-inset-xl-on-sm",
    "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
    "displaySummaryOnMd": "pf-m-display-summary-on-md",
    "displayFullOnMd": "pf-m-display-full-on-md",
    "insetNoneOnMd": "pf-m-inset-none-on-md",
    "insetSmOnMd": "pf-m-inset-sm-on-md",
    "insetMdOnMd": "pf-m-inset-md-on-md",
    "insetLgOnMd": "pf-m-inset-lg-on-md",
    "insetXlOnMd": "pf-m-inset-xl-on-md",
    "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
    "displaySummaryOnLg": "pf-m-display-summary-on-lg",
    "displayFullOnLg": "pf-m-display-full-on-lg",
    "insetNoneOnLg": "pf-m-inset-none-on-lg",
    "insetSmOnLg": "pf-m-inset-sm-on-lg",
    "insetMdOnLg": "pf-m-inset-md-on-lg",
    "insetLgOnLg": "pf-m-inset-lg-on-lg",
    "insetXlOnLg": "pf-m-inset-xl-on-lg",
    "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
    "displaySummaryOnXl": "pf-m-display-summary-on-xl",
    "displayFullOnXl": "pf-m-display-full-on-xl",
    "insetNoneOnXl": "pf-m-inset-none-on-xl",
    "insetSmOnXl": "pf-m-inset-sm-on-xl",
    "insetMdOnXl": "pf-m-inset-md-on-xl",
    "insetLgOnXl": "pf-m-inset-lg-on-xl",
    "insetXlOnXl": "pf-m-inset-xl-on-xl",
    "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
    "displaySummaryOn_2xl": "pf-m-display-summary-on-2xl",
    "displayFullOn_2xl": "pf-m-display-full-on-2xl",
    "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
    "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
    "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
    "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
    "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
    "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl"
  },
  "pagination": "pf-v6-c-pagination",
  "paginationNav": "pf-v6-c-pagination__nav",
  "paginationNavControl": "pf-v6-c-pagination__nav-control",
  "paginationNavPageSelect": "pf-v6-c-pagination__nav-page-select",
  "paginationPageMenu": "pf-v6-c-pagination__page-menu",
  "paginationTotalItems": "pf-v6-c-pagination__total-items"
};

// node_modules/@patternfly/react-core/dist/esm/components/Pagination/PaginationNavigation.js
var import_jsx_runtime216 = __toESM(require_jsx_runtime());
var import_react91 = __toESM(require_react());
var PaginationNavigation = class _PaginationNavigation extends import_react91.Component {
  constructor(props) {
    super(props);
    this.handleNewPage = (_evt, newPage) => {
      const { perPage, onSetPage } = this.props;
      const startIdx = (newPage - 1) * perPage;
      const endIdx = newPage * perPage;
      return onSetPage(_evt, newPage, perPage, startIdx, endIdx);
    };
    this.state = { userInputPage: this.props.page };
  }
  static parseInteger(input, lastPage) {
    let inputPage = Number.parseInt(input, 10);
    if (!Number.isNaN(inputPage)) {
      inputPage = inputPage > lastPage ? lastPage : inputPage;
      inputPage = inputPage < 1 ? 1 : inputPage;
    }
    return inputPage;
  }
  onChange(event, lastPage) {
    const inputPage = _PaginationNavigation.parseInteger(event.currentTarget.value, lastPage);
    this.setState({ userInputPage: Number.isNaN(inputPage) ? event.currentTarget.value : inputPage });
  }
  onKeyDown(event, page, lastPage, onPageInput) {
    const allowedKeys = [
      "Tab",
      "Backspace",
      "Delete",
      "ArrowLeft",
      "ArrowRight",
      "Home",
      "End",
      "ArrowUp",
      "ArrowDown"
    ];
    if (event.key === KeyTypes.Enter) {
      const inputPage = _PaginationNavigation.parseInteger(this.state.userInputPage, lastPage);
      onPageInput(event, Number.isNaN(inputPage) ? page : inputPage);
      this.handleNewPage(event, Number.isNaN(inputPage) ? page : inputPage);
    } else if (!/^\d*$/.test(event.key) && !allowedKeys.includes(event.key)) {
      event.preventDefault();
    }
  }
  componentDidUpdate(lastState) {
    if (this.props.page !== lastState.page && this.props.page <= this.props.lastPage && this.state.userInputPage !== this.props.page) {
      this.setState({ userInputPage: this.props.page });
    }
  }
  render() {
    const _a = this.props, {
      page,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      perPage,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      onSetPage,
      isDisabled,
      itemCount,
      lastPage,
      firstPage,
      pagesTitle,
      pagesTitlePlural,
      toLastPageAriaLabel,
      toNextPageAriaLabel,
      toFirstPageAriaLabel,
      toPreviousPageAriaLabel,
      currPageAriaLabel,
      paginationAriaLabel,
      ofWord,
      onNextClick,
      onPreviousClick,
      onFirstClick,
      onLastClick,
      onPageInput,
      className,
      isCompact
    } = _a, props = __rest(_a, ["page", "perPage", "onSetPage", "isDisabled", "itemCount", "lastPage", "firstPage", "pagesTitle", "pagesTitlePlural", "toLastPageAriaLabel", "toNextPageAriaLabel", "toFirstPageAriaLabel", "toPreviousPageAriaLabel", "currPageAriaLabel", "paginationAriaLabel", "ofWord", "onNextClick", "onPreviousClick", "onFirstClick", "onLastClick", "onPageInput", "className", "isCompact"]);
    const { userInputPage } = this.state;
    return (0, import_jsx_runtime216.jsxs)("nav", Object.assign({ className: css(pagination_default.paginationNav, className), "aria-label": paginationAriaLabel }, props, { children: [!isCompact && (0, import_jsx_runtime216.jsx)("div", { className: css(pagination_default.paginationNavControl, pagination_default.modifiers.first), children: (0, import_jsx_runtime216.jsx)(Button, { variant: ButtonVariant.plain, isDisabled: isDisabled || page === firstPage || page === 0, "aria-label": toFirstPageAriaLabel, "data-action": "first", onClick: (event) => {
      onFirstClick(event, 1);
      this.handleNewPage(event, 1);
      this.setState({ userInputPage: 1 });
    }, icon: (0, import_jsx_runtime216.jsx)(angle_double_left_icon_default, {}) }) }), (0, import_jsx_runtime216.jsx)("div", { className: pagination_default.paginationNavControl, children: (0, import_jsx_runtime216.jsx)(Button, { variant: ButtonVariant.plain, isDisabled: isDisabled || page === firstPage || page === 0, "data-action": "previous", onClick: (event) => {
      const newPage = page - 1 >= 1 ? page - 1 : 1;
      onPreviousClick(event, newPage);
      this.handleNewPage(event, newPage);
      this.setState({ userInputPage: newPage });
    }, "aria-label": toPreviousPageAriaLabel, icon: (0, import_jsx_runtime216.jsx)(angle_left_icon_default, {}) }) }), !isCompact && (0, import_jsx_runtime216.jsxs)("div", { className: pagination_default.paginationNavPageSelect, children: [(0, import_jsx_runtime216.jsx)(TextInput, { "aria-label": currPageAriaLabel, type: "number", isDisabled: isDisabled || itemCount && page === firstPage && page === lastPage && itemCount >= 0 || page === 0, min: lastPage <= 0 && firstPage <= 0 ? 0 : 1, max: lastPage, value: userInputPage, onKeyDown: (event) => this.onKeyDown(event, page, lastPage, onPageInput), onChange: (event) => this.onChange(event, lastPage) }), (itemCount || itemCount === 0) && (0, import_jsx_runtime216.jsxs)("span", { "aria-hidden": "true", children: [ofWord, " ", pagesTitle ? pluralize(lastPage, pagesTitle, pagesTitlePlural) : lastPage] })] }), (0, import_jsx_runtime216.jsx)("div", { className: pagination_default.paginationNavControl, children: (0, import_jsx_runtime216.jsx)(Button, { variant: ButtonVariant.plain, isDisabled: isDisabled || page === lastPage, "aria-label": toNextPageAriaLabel, "data-action": "next", onClick: (event) => {
      const newPage = page + 1 <= lastPage ? page + 1 : lastPage;
      onNextClick(event, newPage);
      this.handleNewPage(event, newPage);
      this.setState({ userInputPage: newPage });
    }, icon: (0, import_jsx_runtime216.jsx)(angle_right_icon_default, {}) }) }), !isCompact && (0, import_jsx_runtime216.jsx)("div", { className: css(pagination_default.paginationNavControl, pagination_default.modifiers.last), children: (0, import_jsx_runtime216.jsx)(Button, { variant: ButtonVariant.plain, isDisabled: isDisabled || page === lastPage, "aria-label": toLastPageAriaLabel, "data-action": "last", onClick: (event) => {
      onLastClick(event, lastPage);
      this.handleNewPage(event, lastPage);
      this.setState({ userInputPage: lastPage });
    }, icon: (0, import_jsx_runtime216.jsx)(angle_double_right_icon_default, {}) }) })] }));
  }
};
PaginationNavigation.displayName = "PaginationNavigation";
PaginationNavigation.defaultProps = {
  className: "",
  isDisabled: false,
  isCompact: false,
  lastPage: 0,
  firstPage: 0,
  pagesTitle: "",
  pagesTitlePlural: "",
  toLastPageAriaLabel: "Go to last page",
  toNextPageAriaLabel: "Go to next page",
  toFirstPageAriaLabel: "Go to first page",
  toPreviousPageAriaLabel: "Go to previous page",
  currPageAriaLabel: "Current page",
  paginationAriaLabel: "Pagination",
  ofWord: "of",
  onNextClick: () => void 0,
  onPreviousClick: () => void 0,
  onFirstClick: () => void 0,
  onLastClick: () => void 0,
  onPageInput: () => void 0
};

// node_modules/@patternfly/react-core/dist/esm/components/Pagination/PaginationOptionsMenu.js
var import_jsx_runtime217 = __toESM(require_jsx_runtime());
var import_react92 = __toESM(require_react());
var PaginationOptionsMenu = ({
  className,
  widgetId,
  page: pageProp,
  itemCount,
  isDisabled = false,
  minWidth,
  dropDirection = "down",
  perPageOptions = [],
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  itemsPerPageTitle = "Items per page",
  perPageSuffix = "per page",
  optionsToggleAriaLabel,
  ofWord = "of",
  perPage = 0,
  firstIndex = 0,
  lastIndex = 0,
  isLastFullPageShown = false,
  itemsTitle = "",
  toggleTemplate,
  onPerPageSelect = () => null,
  containerRef,
  appendTo,
  shouldPreventScrollOnItemFocus = true,
  focusTimeoutDelay = 0
}) => {
  const [isOpen, setIsOpen] = (0, import_react92.useState)(false);
  const toggleRef = (0, import_react92.useRef)(null);
  const menuRef = (0, import_react92.useRef)(null);
  const onToggle = () => {
    setIsOpen((prevState) => !prevState);
  };
  const onSelect = () => {
    var _a;
    setIsOpen((prevState) => !prevState);
    (_a = toggleRef.current) === null || _a === void 0 ? void 0 : _a.focus();
  };
  const handleNewPerPage = (_evt, newPerPage) => {
    let newPage = pageProp;
    while (Math.ceil(itemCount / newPerPage) < newPage) {
      newPage--;
    }
    if (isLastFullPageShown) {
      if (itemCount / newPerPage !== newPage) {
        while (newPage > 1 && itemCount - newPerPage * newPage < 0) {
          newPage--;
        }
      }
    }
    const startIdx = (newPage - 1) * newPerPage;
    const endIdx = newPage * newPerPage;
    return onPerPageSelect(_evt, newPerPage, newPage, startIdx, endIdx);
  };
  (0, import_react92.useEffect)(() => {
    const handleMenuKeys = (event) => {
      var _a, _b, _c;
      if (isOpen && ((_a = menuRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target)) || ((_b = toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target))) {
        if (event.key === "Escape" || event.key === "Tab") {
          setIsOpen(false);
          (_c = toggleRef.current) === null || _c === void 0 ? void 0 : _c.focus();
        }
      }
    };
    const handleClick = (event) => {
      var _a, _b, _c;
      if (isOpen && ((_a = toggleRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {
        setTimeout(() => {
          var _a2;
          const firstElement = (_a2 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.querySelector("li button:not(:disabled)");
          firstElement && firstElement.focus({ preventScroll: shouldPreventScrollOnItemFocus });
        }, focusTimeoutDelay);
      }
      if (isOpen && !((_b = toggleRef === null || toggleRef === void 0 ? void 0 : toggleRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)) && !((_c = menuRef.current) === null || _c === void 0 ? void 0 : _c.contains(event.target))) {
        setIsOpen(false);
      }
    };
    window.addEventListener("keydown", handleMenuKeys);
    window.addEventListener("click", handleClick);
    return () => {
      window.removeEventListener("keydown", handleMenuKeys);
      window.removeEventListener("click", handleClick);
    };
  }, [focusTimeoutDelay, isOpen, menuRef, shouldPreventScrollOnItemFocus]);
  const renderItems = () => perPageOptions.map(({ value, title }) => (0, import_jsx_runtime217.jsxs)(MenuItem, { "data-action": `per-page-${value}`, isSelected: perPage === value, onClick: (event) => handleNewPerPage(event, value), children: [title, ` ${perPageSuffix}`] }, value));
  const toggle = (0, import_jsx_runtime217.jsx)("div", { className: css(pagination_default.paginationPageMenu), children: (0, import_jsx_runtime217.jsxs)(MenuToggle, Object.assign({ ref: toggleRef, onClick: onToggle }, optionsToggleAriaLabel && { "aria-label": optionsToggleAriaLabel }, { isDisabled: isDisabled || itemCount && itemCount <= 0, isExpanded: isOpen }, widgetId && { id: `${widgetId}-toggle` }, { variant: "plainText", "aria-haspopup": "listbox", children: [toggleTemplate && typeof toggleTemplate === "string" && fillTemplate(toggleTemplate, { firstIndex, lastIndex, ofWord, itemCount, itemsTitle }), toggleTemplate && typeof toggleTemplate !== "string" && toggleTemplate({
    firstIndex,
    lastIndex,
    ofWord,
    itemCount,
    itemsTitle
  }), !toggleTemplate && (0, import_jsx_runtime217.jsx)(ToggleTemplate, { firstIndex, lastIndex, ofWord, itemCount, itemsTitle })] })) });
  const menu = (0, import_jsx_runtime217.jsx)(Menu, { className: css(className), onSelect, ref: menuRef, children: (0, import_jsx_runtime217.jsx)(MenuContent, { children: (0, import_jsx_runtime217.jsx)(MenuList, { children: renderItems() }) }) });
  const containerToAppendTo = appendTo !== null && appendTo !== void 0 ? appendTo : (containerRef === null || containerRef === void 0 ? void 0 : containerRef.current) || void 0;
  return (0, import_jsx_runtime217.jsx)(Popper, { trigger: toggle, triggerRef: toggleRef, popper: menu, popperRef: menuRef, isVisible: isOpen, direction: dropDirection, appendTo: containerToAppendTo, minWidth: minWidth !== void 0 ? minWidth : "revert" });
};
PaginationOptionsMenu.displayName = "PaginationOptionsMenu";

// node_modules/@patternfly/react-tokens/dist/esm/c_pagination__nav_page_select_c_form_control_width_chars.js
var c_pagination__nav_page_select_c_form_control_width_chars = {
  "name": "--pf-v6-c-pagination__nav-page-select--c-form-control--width-chars",
  "value": "2",
  "var": "var(--pf-v6-c-pagination__nav-page-select--c-form-control--width-chars)"
};
var c_pagination_nav_page_select_c_form_control_width_chars_default = c_pagination__nav_page_select_c_form_control_width_chars;

// node_modules/@patternfly/react-core/dist/esm/components/Pagination/Pagination.js
var PaginationVariant;
(function(PaginationVariant2) {
  PaginationVariant2["bottom"] = "bottom";
  PaginationVariant2["top"] = "top";
})(PaginationVariant || (PaginationVariant = {}));
var defaultPerPageOptions = [
  {
    title: "10",
    value: 10
  },
  {
    title: "20",
    value: 20
  },
  {
    title: "50",
    value: 50
  },
  {
    title: "100",
    value: 100
  }
];
var handleInputWidth = (lastPage, node) => {
  if (!node) {
    return;
  }
  const len = String(lastPage).length;
  if (len >= 3) {
    node.style.setProperty(c_pagination_nav_page_select_c_form_control_width_chars_default.name, `${len}`);
  } else {
    node.style.setProperty(c_pagination_nav_page_select_c_form_control_width_chars_default.name, "2");
  }
};
var Pagination = (_a) => {
  var { children, className = "", variant = PaginationVariant.top, isDisabled = false, isCompact = false, isSticky = false, isStatic = false, dropDirection: dropDirectionProp, toggleTemplate, perPage = defaultPerPageOptions[0].value, titles = {
    items: "",
    page: "",
    pages: "",
    itemsPerPage: "Items per page",
    perPageSuffix: "per page",
    toFirstPageAriaLabel: "Go to first page",
    toPreviousPageAriaLabel: "Go to previous page",
    toLastPageAriaLabel: "Go to last page",
    toNextPageAriaLabel: "Go to next page",
    optionsToggleAriaLabel: "",
    currPageAriaLabel: "Current page",
    paginationAriaLabel: "Pagination",
    ofWord: "of"
  }, firstPage = 1, page: pageProp = 1, offset = null, isLastFullPageShown = false, itemsStart = null, itemsEnd = null, itemCount, perPageOptions = defaultPerPageOptions, widgetId = "options-menu", onSetPage = () => void 0, onPerPageSelect = () => void 0, onFirstClick = () => void 0, onPreviousClick = () => void 0, onNextClick = () => void 0, onPageInput = () => void 0, onLastClick = () => void 0, ouiaId, ouiaSafe = true, usePageInsets, inset, menuAppendTo } = _a, props = __rest(_a, ["children", "className", "variant", "isDisabled", "isCompact", "isSticky", "isStatic", "dropDirection", "toggleTemplate", "perPage", "titles", "firstPage", "page", "offset", "isLastFullPageShown", "itemsStart", "itemsEnd", "itemCount", "perPageOptions", "widgetId", "onSetPage", "onPerPageSelect", "onFirstClick", "onPreviousClick", "onNextClick", "onPageInput", "onLastClick", "ouiaId", "ouiaSafe", "usePageInsets", "inset", "menuAppendTo"]);
  const paginationRef = (0, import_react93.useRef)(null);
  const containerRef = (0, import_react93.useRef)(null);
  const getLastPage = () => (
    // when itemCount is not known let's set lastPage as page+1 as we don't know the total count
    itemCount || itemCount === 0 ? Math.ceil(itemCount / perPage) || 0 : page + 1
  );
  (0, import_react93.useEffect)(() => {
    const node = paginationRef.current;
    handleInputWidth(getLastPage(), node);
  }, [perPage, itemCount]);
  const dropDirection = dropDirectionProp || (variant === "bottom" && !isStatic ? "up" : "down");
  let page = pageProp;
  if (offset !== null) {
    itemsStart = offset + 1;
    page = Math.max(Math.ceil(itemsStart / perPage), 1);
    itemsEnd = offset + perPage;
  }
  const lastPage = getLastPage();
  let firstIndex = (page - 1) * perPage + 1;
  let lastIndex = page * perPage;
  if (itemCount || itemCount === 0) {
    firstIndex = itemCount <= 0 ? 0 : (page - 1) * perPage + 1;
    if (page < firstPage && itemCount > 0) {
      page = firstPage;
    } else if (page > lastPage) {
      page = lastPage;
    }
    if (itemCount >= 0) {
      lastIndex = page === lastPage || itemCount === 0 ? itemCount : page * perPage;
    }
  }
  const PaginationToggleTemplateProps = {
    firstIndex,
    lastIndex,
    itemCount,
    itemsTitle: titles.items,
    ofWord: titles.ofWord
  };
  return (0, import_jsx_runtime218.jsxs)("div", Object.assign({ ref: paginationRef, className: css(pagination_default.pagination, variant === PaginationVariant.bottom && pagination_default.modifiers.bottom, usePageInsets && pagination_default.modifiers.pageInsets, formatBreakpointMods(inset, pagination_default), isStatic && pagination_default.modifiers.static, isSticky && pagination_default.modifiers.sticky, className) }, widgetId && { id: `${widgetId}-${variant}-pagination` }, useOUIAProps(Pagination.displayName, ouiaId, ouiaSafe, variant), props, { children: [variant === PaginationVariant.top && (0, import_jsx_runtime218.jsxs)("div", { className: css(pagination_default.paginationTotalItems), children: [toggleTemplate && typeof toggleTemplate === "string" && fillTemplate(toggleTemplate, PaginationToggleTemplateProps), toggleTemplate && typeof toggleTemplate !== "string" && toggleTemplate(PaginationToggleTemplateProps), !toggleTemplate && (0, import_jsx_runtime218.jsx)(ToggleTemplate, { firstIndex, lastIndex, itemCount, itemsTitle: titles.items, ofWord: titles.ofWord })] }), perPageOptions && perPageOptions.length > 0 && (0, import_jsx_runtime218.jsx)(PaginationOptionsMenu, { itemsPerPageTitle: titles.itemsPerPage, perPageSuffix: titles.perPageSuffix, itemsTitle: isCompact ? "" : titles.items, optionsToggleAriaLabel: titles.optionsToggleAriaLabel, perPageOptions, firstIndex: itemsStart !== null ? itemsStart : firstIndex, lastIndex: itemsEnd !== null ? itemsEnd : lastIndex, ofWord: titles.ofWord, isLastFullPageShown, itemCount, page, perPage, lastPage, onPerPageSelect, dropDirection, widgetId: `${widgetId}-${variant}`, toggleTemplate, isDisabled, containerRef, appendTo: menuAppendTo }), (0, import_jsx_runtime218.jsx)(PaginationNavigation, { pagesTitle: titles.page, pagesTitlePlural: titles.pages, toLastPageAriaLabel: titles.toLastPageAriaLabel, toPreviousPageAriaLabel: titles.toPreviousPageAriaLabel, toNextPageAriaLabel: titles.toNextPageAriaLabel, toFirstPageAriaLabel: titles.toFirstPageAriaLabel, currPageAriaLabel: titles.currPageAriaLabel, paginationAriaLabel: titles.paginationAriaLabel, ofWord: titles.ofWord, page: itemCount && itemCount <= 0 ? 0 : page, perPage, itemCount, firstPage: itemsStart !== null ? itemsStart : 1, lastPage, onSetPage, onFirstClick, onPreviousClick, onNextClick, onLastClick, onPageInput, isDisabled, isCompact }), children] }));
};
Pagination.displayName = "Pagination";

// node_modules/@patternfly/react-core/dist/esm/components/ProgressStepper/ProgressStepper.js
var import_jsx_runtime219 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/ProgressStepper/progress-stepper.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/ProgressStepper/progress-stepper.css";
var progress_stepper_default = {
  "faExclamationTriangle": "fa-exclamation-triangle",
  "modifiers": {
    "center": "pf-m-center",
    "compact": "pf-m-compact",
    "current": "pf-m-current",
    "pending": "pf-m-pending",
    "success": "pf-m-success",
    "danger": "pf-m-danger",
    "warning": "pf-m-warning",
    "info": "pf-m-info",
    "custom": "pf-m-custom",
    "helpText": "pf-m-help-text",
    "horizontal": "pf-m-horizontal",
    "vertical": "pf-m-vertical",
    "horizontalOnSm": "pf-m-horizontal-on-sm",
    "verticalOnSm": "pf-m-vertical-on-sm",
    "horizontalOnMd": "pf-m-horizontal-on-md",
    "verticalOnMd": "pf-m-vertical-on-md",
    "horizontalOnLg": "pf-m-horizontal-on-lg",
    "verticalOnLg": "pf-m-vertical-on-lg",
    "horizontalOnXl": "pf-m-horizontal-on-xl",
    "verticalOnXl": "pf-m-vertical-on-xl",
    "horizontalOn_2xl": "pf-m-horizontal-on-2xl",
    "verticalOn_2xl": "pf-m-vertical-on-2xl"
  },
  "pficon": "pf-v6-pficon",
  "progressStepper": "pf-v6-c-progress-stepper",
  "progressStepperStep": "pf-v6-c-progress-stepper__step",
  "progressStepperStepConnector": "pf-v6-c-progress-stepper__step-connector",
  "progressStepperStepDescription": "pf-v6-c-progress-stepper__step-description",
  "progressStepperStepIcon": "pf-v6-c-progress-stepper__step-icon",
  "progressStepperStepMain": "pf-v6-c-progress-stepper__step-main",
  "progressStepperStepTitle": "pf-v6-c-progress-stepper__step-title"
};

// node_modules/@patternfly/react-core/dist/esm/components/ProgressStepper/ProgressStepper.js
var ProgressStepper = (_a) => {
  var { children, className, isCenterAligned, isVertical, isCompact, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "isCenterAligned", "isVertical", "isCompact", "aria-label"]);
  return (0, import_jsx_runtime219.jsx)("ol", Object.assign({ className: css(progress_stepper_default.progressStepper, isCenterAligned && progress_stepper_default.modifiers.center, isVertical && progress_stepper_default.modifiers.vertical, isCompact && progress_stepper_default.modifiers.compact, className), role: "list", "aria-label": ariaLabel }, props, { children }));
};
ProgressStepper.displayName = "ProgressStepper";

// node_modules/@patternfly/react-core/dist/esm/components/ProgressStepper/ProgressStep.js
var import_jsx_runtime220 = __toESM(require_jsx_runtime());
var import_react94 = __toESM(require_react());
var ProgressStepVariant;
(function(ProgressStepVariant2) {
  ProgressStepVariant2["default"] = "default";
  ProgressStepVariant2["pending"] = "pending";
  ProgressStepVariant2["success"] = "success";
  ProgressStepVariant2["info"] = "info";
  ProgressStepVariant2["danger"] = "danger";
  ProgressStepVariant2["warning"] = "warning";
})(ProgressStepVariant || (ProgressStepVariant = {}));
var variantIcons3 = {
  default: void 0,
  pending: void 0,
  success: (0, import_jsx_runtime220.jsx)(check_circle_icon_default, {}),
  info: (0, import_jsx_runtime220.jsx)(resources_full_icon_default, {}),
  warning: (0, import_jsx_runtime220.jsx)(exclamation_triangle_icon_default, {}),
  danger: (0, import_jsx_runtime220.jsx)(exclamation_circle_icon_default, {})
};
var variantStyle2 = {
  default: "",
  info: progress_stepper_default.modifiers.info,
  success: progress_stepper_default.modifiers.success,
  pending: progress_stepper_default.modifiers.pending,
  warning: progress_stepper_default.modifiers.warning,
  danger: progress_stepper_default.modifiers.danger
};
var ProgressStep = (_a) => {
  var { children, className, variant, isCurrent, description, icon, titleId, "aria-label": ariaLabel, popoverRender } = _a, props = __rest(_a, ["children", "className", "variant", "isCurrent", "description", "icon", "titleId", "aria-label", "popoverRender"]);
  const _icon = icon !== void 0 ? icon : variantIcons3[variant];
  const Component32 = popoverRender !== void 0 ? "button" : "div";
  const stepRef = (0, import_react94.useRef)(void 0);
  if (props.id === void 0 || titleId === void 0) {
    console.warn("ProgressStep: The titleId and id properties are required to make this component accessible, and one or both of these properties are missing.");
  }
  return (0, import_jsx_runtime220.jsxs)("li", Object.assign({
    className: css(progress_stepper_default.progressStepperStep, variantStyle2[variant], isCurrent && progress_stepper_default.modifiers.current, className),
    "aria-label": ariaLabel,
    // CSS style `display: contents` gives this li a generic role, we need to override that
    role: "listitem"
  }, isCurrent && { "aria-current": "step" }, props, { children: [(0, import_jsx_runtime220.jsx)("div", { className: css(progress_stepper_default.progressStepperStepConnector), children: (0, import_jsx_runtime220.jsx)("span", { className: css(progress_stepper_default.progressStepperStepIcon), children: _icon && _icon }) }), (0, import_jsx_runtime220.jsxs)("div", { className: css(progress_stepper_default.progressStepperStepMain), children: [(0, import_jsx_runtime220.jsxs)(Component32, Object.assign({ className: css(progress_stepper_default.progressStepperStepTitle, popoverRender && progress_stepper_default.modifiers.helpText), id: titleId, ref: stepRef }, popoverRender && { type: "button" }, props.id !== void 0 && titleId !== void 0 && popoverRender && { "aria-labelledby": `${props.id} ${titleId}` }, { children: [children, popoverRender && popoverRender(stepRef)] })), description && (0, import_jsx_runtime220.jsx)("div", { className: css(progress_stepper_default.progressStepperStepDescription), children: description })] })] }));
};
ProgressStep.displayName = "ProgressStep";

// node_modules/@patternfly/react-core/dist/esm/components/Sidebar/Sidebar.js
var import_jsx_runtime221 = __toESM(require_jsx_runtime());
var SidebarBackgroundVariant;
(function(SidebarBackgroundVariant2) {
  SidebarBackgroundVariant2["default"] = "default";
  SidebarBackgroundVariant2["secondary"] = "secondary";
})(SidebarBackgroundVariant || (SidebarBackgroundVariant = {}));
var Sidebar = (_a) => {
  var { className, children, orientation, isPanelRight = false, hasGutter, hasNoBackground, hasBorder } = _a, props = __rest(_a, ["className", "children", "orientation", "isPanelRight", "hasGutter", "hasNoBackground", "hasBorder"]);
  return (0, import_jsx_runtime221.jsx)("div", Object.assign({ className: css(sidebar_default.sidebar, hasGutter && sidebar_default.modifiers.gutter, hasNoBackground && sidebar_default.modifiers.noBackground, isPanelRight && sidebar_default.modifiers.panelRight, sidebar_default.modifiers[orientation], className) }, props, { children: (0, import_jsx_runtime221.jsx)("div", { className: css(sidebar_default.sidebarMain, hasBorder && sidebar_default.modifiers.border), children }) }));
};
Sidebar.displayName = "Sidebar";

// node_modules/@patternfly/react-core/dist/esm/components/Sidebar/SidebarContent.js
var import_jsx_runtime222 = __toESM(require_jsx_runtime());
var SidebarContent = (_a) => {
  var { className, children, hasNoBackground, hasPadding, backgroundVariant = "default" } = _a, props = __rest(_a, ["className", "children", "hasNoBackground", "hasPadding", "backgroundVariant"]);
  return (0, import_jsx_runtime222.jsx)("div", Object.assign({ className: css(sidebar_default.sidebarContent, hasNoBackground && sidebar_default.modifiers.noBackground, hasPadding && sidebar_default.modifiers.padding, backgroundVariant !== "default" && sidebar_default.modifiers[backgroundVariant], className) }, props, { children }));
};
SidebarContent.displayName = "SidebarContent";

// node_modules/@patternfly/react-core/dist/esm/components/Sidebar/SidebarPanel.js
var import_jsx_runtime223 = __toESM(require_jsx_runtime());
var SidebarPanelWidthType;
(function(SidebarPanelWidthType2) {
  SidebarPanelWidthType2["default"] = "default";
  SidebarPanelWidthType2["width25"] = "width_25";
  SidebarPanelWidthType2["width33"] = "width_33";
  SidebarPanelWidthType2["width50"] = "width_50";
  SidebarPanelWidthType2["width66"] = "width_66";
  SidebarPanelWidthType2["width75"] = "width_75";
  SidebarPanelWidthType2["width100"] = "width_100";
})(SidebarPanelWidthType || (SidebarPanelWidthType = {}));
var SidebarPanel = (_a) => {
  var { className, children, variant = "default", hasNoBackground, hasPadding, width, backgroundVariant = "default" } = _a, props = __rest(_a, ["className", "children", "variant", "hasNoBackground", "hasPadding", "width", "backgroundVariant"]);
  return (0, import_jsx_runtime223.jsx)("div", Object.assign({ className: css(sidebar_default.sidebarPanel, variant !== "default" && sidebar_default.modifiers[variant], hasNoBackground && sidebar_default.modifiers.noBackground, hasPadding && sidebar_default.modifiers.padding, formatBreakpointMods(width, sidebar_default), backgroundVariant !== "default" && sidebar_default.modifiers[backgroundVariant], className) }, props, { children }));
};
SidebarPanel.displayName = "SidebarPanel";

// node_modules/@patternfly/react-core/dist/esm/components/SimpleList/SimpleList.js
var import_jsx_runtime225 = __toESM(require_jsx_runtime());
var import_react95 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/SimpleList/simple-list.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/SimpleList/simple-list.css";
var simple_list_default = {
  "modifiers": {
    "link": "pf-m-link",
    "current": "pf-m-current"
  },
  "simpleList": "pf-v6-c-simple-list",
  "simpleListItemLink": "pf-v6-c-simple-list__item-link",
  "simpleListSection": "pf-v6-c-simple-list__section",
  "simpleListTitle": "pf-v6-c-simple-list__title"
};

// node_modules/@patternfly/react-core/dist/esm/components/SimpleList/SimpleListGroup.js
var import_jsx_runtime224 = __toESM(require_jsx_runtime());
var SimpleListGroup = (_a) => {
  var { children = null, className = "", title = "", titleClassName = "", id = "" } = _a, props = __rest(_a, ["children", "className", "title", "titleClassName", "id"]);
  return (0, import_jsx_runtime224.jsxs)("section", Object.assign({ className: css(simple_list_default.simpleListSection) }, props, { children: [(0, import_jsx_runtime224.jsx)("h2", { id, className: css(simple_list_default.simpleListTitle, titleClassName), "aria-hidden": "true", children: title }), (0, import_jsx_runtime224.jsx)("ul", { className: css("pf-v6-c-simple-list__list", className), role: "list", "aria-labelledby": id, children })] }));
};
SimpleListGroup.displayName = "SimpleListGroup";

// node_modules/@patternfly/react-core/dist/esm/components/SimpleList/SimpleList.js
var SimpleListContext = (0, import_react95.createContext)({});
var SimpleList = class extends import_react95.Component {
  constructor() {
    super(...arguments);
    this.state = {
      currentRef: null
    };
    this.handleCurrentUpdate = (newCurrentRef, itemProps) => {
      this.setState({ currentRef: newCurrentRef });
      const { onSelect } = this.props;
      onSelect && onSelect(newCurrentRef, itemProps);
    };
  }
  render() {
    const _a = this.props, { children, className, onSelect, isControlled, "aria-label": ariaLabel } = _a, props = __rest(_a, ["children", "className", "onSelect", "isControlled", "aria-label"]);
    let isGrouped = false;
    if (children) {
      isGrouped = import_react95.Children.toArray(children)[0].type === SimpleListGroup;
    }
    return (0, import_jsx_runtime225.jsx)(SimpleListContext.Provider, { value: {
      currentRef: this.state.currentRef,
      updateCurrentRef: this.handleCurrentUpdate,
      isControlled
    }, children: (0, import_jsx_runtime225.jsxs)("div", Object.assign({ className: css(simple_list_default.simpleList, className) }, props, { children: [isGrouped && children, !isGrouped && (0, import_jsx_runtime225.jsx)("ul", { className: css("pf-v6-c-simple-list__list"), role: "list", "aria-label": ariaLabel, children })] })) });
  }
};
SimpleList.displayName = "SimpleList";
SimpleList.defaultProps = {
  children: null,
  className: "",
  isControlled: true
};

// node_modules/@patternfly/react-core/dist/esm/components/SimpleList/SimpleListItem.js
var import_jsx_runtime226 = __toESM(require_jsx_runtime());
var import_react96 = __toESM(require_react());
var SimpleListItem = class extends import_react96.Component {
  constructor() {
    super(...arguments);
    this.ref = (0, import_react96.createRef)();
  }
  render() {
    const _a = this.props, {
      children,
      isActive,
      className,
      component: Component32,
      componentClassName,
      componentProps,
      onClick,
      type,
      href,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      itemId
    } = _a, props = __rest(_a, ["children", "isActive", "className", "component", "componentClassName", "componentProps", "onClick", "type", "href", "itemId"]);
    return (0, import_jsx_runtime226.jsx)(SimpleListContext.Consumer, { children: ({ currentRef, updateCurrentRef, isControlled }) => {
      const isButton = Component32 === "button";
      const isCurrentItem = this.ref && currentRef && isControlled ? currentRef.current === this.ref.current : isActive;
      const additionalComponentProps = isButton ? {
        type
      } : {
        tabIndex: 0,
        href
      };
      return (0, import_jsx_runtime226.jsx)("li", Object.assign({ className: css("pf-v6-c-simple-list__item", className) }, props, { children: (0, import_jsx_runtime226.jsx)(Component32, Object.assign({ className: css(simple_list_default.simpleListItemLink, isCurrentItem && simple_list_default.modifiers.current, !isButton && simple_list_default.modifiers.link, componentClassName), onClick: (evt) => {
        onClick(evt);
        updateCurrentRef(this.ref, this.props);
      }, ref: this.ref }, componentProps, additionalComponentProps, { children })) }));
    } });
  }
};
SimpleListItem.displayName = "SimpleListItem";
SimpleListItem.defaultProps = {
  children: null,
  className: "",
  isActive: false,
  component: "button",
  componentClassName: "",
  type: "button",
  href: "",
  onClick: () => {
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/Skeleton/Skeleton.js
var import_jsx_runtime227 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/Skeleton/skeleton.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Skeleton/skeleton.css";
var skeleton_default = {
  "dirRtl": "pf-v6-m-dir-rtl",
  "modifiers": {
    "circle": "pf-m-circle",
    "square": "pf-m-square",
    "widthSm": "pf-m-width-sm",
    "widthMd": "pf-m-width-md",
    "widthLg": "pf-m-width-lg",
    "width_25": "pf-m-width-25",
    "width_33": "pf-m-width-33",
    "width_50": "pf-m-width-50",
    "width_66": "pf-m-width-66",
    "width_75": "pf-m-width-75",
    "heightSm": "pf-m-height-sm",
    "heightMd": "pf-m-height-md",
    "heightLg": "pf-m-height-lg",
    "height_25": "pf-m-height-25",
    "height_33": "pf-m-height-33",
    "height_50": "pf-m-height-50",
    "height_66": "pf-m-height-66",
    "height_75": "pf-m-height-75",
    "height_100": "pf-m-height-100",
    "text_4xl": "pf-m-text-4xl",
    "text_3xl": "pf-m-text-3xl",
    "text_2xl": "pf-m-text-2xl",
    "textXl": "pf-m-text-xl",
    "textLg": "pf-m-text-lg",
    "textMd": "pf-m-text-md",
    "textSm": "pf-m-text-sm"
  },
  "skeleton": "pf-v6-c-skeleton"
};

// node_modules/@patternfly/react-tokens/dist/esm/c_skeleton_Height.js
var c_skeleton_Height = {
  "name": "--pf-v6-c-skeleton--Height",
  "value": "calc(0.875rem * 1.5)",
  "var": "var(--pf-v6-c-skeleton--Height)"
};
var c_skeleton_Height_default = c_skeleton_Height;

// node_modules/@patternfly/react-tokens/dist/esm/c_skeleton_Width.js
var c_skeleton_Width = {
  "name": "--pf-v6-c-skeleton--Width",
  "value": "75%",
  "var": "var(--pf-v6-c-skeleton--Width)"
};
var c_skeleton_Width_default = c_skeleton_Width;

// node_modules/@patternfly/react-core/dist/esm/components/Skeleton/Skeleton.js
var Skeleton = (_a) => {
  var { className, width, height, fontSize, shape, screenreaderText } = _a, props = __rest(_a, ["className", "width", "height", "fontSize", "shape", "screenreaderText"]);
  const fontHeightClassName = fontSize ? Object.values(skeleton_default.modifiers).find((key) => key === `pf-m-text-${fontSize}`) : void 0;
  return (0, import_jsx_runtime227.jsx)("div", Object.assign({}, props, { className: css(skeleton_default.skeleton, fontSize && fontHeightClassName, shape === "circle" && skeleton_default.modifiers.circle, shape === "square" && skeleton_default.modifiers.square, className) }, (width || height) && {
    style: Object.assign({ [c_skeleton_Width_default.name]: width ? width : void 0, [c_skeleton_Height_default.name]: height ? height : void 0 }, props.style)
  }, { children: (0, import_jsx_runtime227.jsx)("span", { className: "pf-v6-screen-reader", children: screenreaderText }) }));
};
Skeleton.displayName = "Skeleton";

// node_modules/@patternfly/react-core/dist/esm/components/SkipToContent/SkipToContent.js
var import_jsx_runtime228 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/SkipToContent/skip-to-content.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/SkipToContent/skip-to-content.css";
var skip_to_content_default = {
  "skipToContent": "pf-v6-c-skip-to-content"
};

// node_modules/@patternfly/react-core/dist/esm/components/SkipToContent/SkipToContent.js
var SkipToContent = (_a) => {
  var { children = null, className = "", href } = _a, props = __rest(_a, ["children", "className", "href"]);
  return (0, import_jsx_runtime228.jsx)("div", Object.assign({ className: css(skip_to_content_default.skipToContent, className) }, props, { children: (0, import_jsx_runtime228.jsx)(Button, { variant: ButtonVariant.primary, component: "a", href, children }) }));
};
SkipToContent.displayName = "SkipToContent";

// node_modules/@patternfly/react-core/dist/esm/components/Slider/Slider.js
var import_jsx_runtime230 = __toESM(require_jsx_runtime());
var import_react97 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Slider/slider.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Slider/slider.css";
var slider_default = {
  "dirRtl": "pf-v6-m-dir-rtl",
  "formControl": "pf-v6-c-form-control",
  "modifiers": {
    "disabled": "pf-m-disabled",
    "active": "pf-m-active",
    "floating": "pf-m-floating"
  },
  "slider": "pf-v6-c-slider",
  "sliderActions": "pf-v6-c-slider__actions",
  "sliderMain": "pf-v6-c-slider__main",
  "sliderRail": "pf-v6-c-slider__rail",
  "sliderRailTrack": "pf-v6-c-slider__rail-track",
  "sliderStep": "pf-v6-c-slider__step",
  "sliderStepLabel": "pf-v6-c-slider__step-label",
  "sliderStepTick": "pf-v6-c-slider__step-tick",
  "sliderSteps": "pf-v6-c-slider__steps",
  "sliderThumb": "pf-v6-c-slider__thumb",
  "sliderValue": "pf-v6-c-slider__value"
};

// node_modules/@patternfly/react-core/dist/esm/components/Slider/SliderStep.js
var import_jsx_runtime229 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-tokens/dist/esm/c_slider__step_InsetInlineStart.js
var c_slider__step_InsetInlineStart = {
  "name": "--pf-v6-c-slider__step--InsetInlineStart",
  "value": "0",
  "var": "var(--pf-v6-c-slider__step--InsetInlineStart)"
};
var c_slider_step_InsetInlineStart_default = c_slider__step_InsetInlineStart;

// node_modules/@patternfly/react-core/dist/esm/components/Slider/SliderStep.js
var SliderStep = (_a) => {
  var { className, label, value, isTickHidden = false, isLabelHidden = false, isActive = false } = _a, props = __rest(_a, ["className", "label", "value", "isTickHidden", "isLabelHidden", "isActive"]);
  const style = {
    [c_slider_step_InsetInlineStart_default.name]: `${value ? value : c_slider_step_InsetInlineStart_default.value}%`
  };
  return (0, import_jsx_runtime229.jsxs)("div", Object.assign({ className: css(slider_default.sliderStep, isActive && slider_default.modifiers.active, className), style }, props, { children: [!isTickHidden && (0, import_jsx_runtime229.jsx)("div", { className: css(slider_default.sliderStepTick) }), !isLabelHidden && label && (0, import_jsx_runtime229.jsx)("div", { className: css(slider_default.sliderStepLabel), children: label })] }));
};
SliderStep.displayName = "SliderStep";

// node_modules/@patternfly/react-tokens/dist/esm/c_slider_value.js
var c_slider_value = {
  "name": "--pf-v6-c-slider--value",
  "value": "0",
  "var": "var(--pf-v6-c-slider--value)"
};
var c_slider_value_default = c_slider_value;

// node_modules/@patternfly/react-tokens/dist/esm/c_slider__value_c_form_control_width_chars.js
var c_slider__value_c_form_control_width_chars = {
  "name": "--pf-v6-c-slider__value--c-form-control--width-chars",
  "value": "3",
  "var": "var(--pf-v6-c-slider__value--c-form-control--width-chars)"
};
var c_slider_value_c_form_control_width_chars_default = c_slider__value_c_form_control_width_chars;

// node_modules/@patternfly/react-core/dist/esm/components/Slider/Slider.js
var getPercentage = (current, max) => 100 * current / max;
var Slider = (_a) => {
  var { className, value = 0, customSteps, areCustomStepsContinuous = false, isDisabled = false, isInputVisible = false, inputValue = 0, inputLabel, inputAriaLabel = "Slider value input", thumbAriaLabel = "Value", hasTooltipOverThumb = false, inputPosition = "end", onChange, leftActions, startActions, rightActions, endActions, step = 1, min = 0, max = 100, showTicks = false, showBoundaries = true, "aria-describedby": ariaDescribedby, "aria-labelledby": ariaLabelledby } = _a, props = __rest(_a, ["className", "value", "customSteps", "areCustomStepsContinuous", "isDisabled", "isInputVisible", "inputValue", "inputLabel", "inputAriaLabel", "thumbAriaLabel", "hasTooltipOverThumb", "inputPosition", "onChange", "leftActions", "startActions", "rightActions", "endActions", "step", "min", "max", "showTicks", "showBoundaries", "aria-describedby", "aria-labelledby"]);
  const sliderRailRef = (0, import_react97.useRef)(void 0);
  const thumbRef = (0, import_react97.useRef)(void 0);
  const [localValue, setValue] = (0, import_react97.useState)(value);
  const [localInputValue, setLocalInputValue] = (0, import_react97.useState)(inputValue);
  let isRTL;
  (0, import_react97.useEffect)(() => {
    isRTL = getLanguageDirection(sliderRailRef.current) === "rtl";
  });
  (0, import_react97.useEffect)(() => {
    setValue(value);
  }, [value]);
  (0, import_react97.useEffect)(() => {
    setLocalInputValue(inputValue);
  }, [inputValue]);
  let diff = 0;
  let snapValue;
  const stylePercent = (localValue - min) * 100 / (max - min);
  const style = { [c_slider_value_default.name]: `${stylePercent}%` };
  const widthChars = (0, import_react97.useMemo)(() => localInputValue.toString().length, [localInputValue]);
  const inputStyle = { [c_slider_value_c_form_control_width_chars_default.name]: widthChars };
  const onChangeHandler = (_event, value2) => {
    setLocalInputValue(Number(value2));
  };
  const handleKeyPressOnInput = (event) => {
    if (event.key === "Enter") {
      event.preventDefault();
      if (onChange) {
        onChange(event, localValue, localInputValue, setLocalInputValue);
      }
    }
  };
  const onInputFocus = (e) => {
    e.stopPropagation();
  };
  const onThumbClick = () => {
    thumbRef.current.focus();
  };
  const onBlur = (event) => {
    if (onChange) {
      onChange(event, localValue, localInputValue, setLocalInputValue);
    }
  };
  const findAriaTextValue = () => {
    if (!areCustomStepsContinuous && customSteps) {
      const matchingStep = customSteps.find((stepObj) => stepObj.value === localValue);
      if (matchingStep) {
        return matchingStep.label;
      }
    }
    return Number(Number(localValue).toFixed(2)).toString();
  };
  const handleThumbDragEnd = () => {
    document.removeEventListener("mousemove", callbackThumbMove);
    document.removeEventListener("mouseup", callbackThumbUp);
    document.removeEventListener("touchmove", callbackThumbMove);
    document.removeEventListener("touchend", callbackThumbUp);
    document.removeEventListener("touchcancel", callbackThumbUp);
  };
  const handleMouseDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    if (isRTL) {
      diff = thumbRef.current.getBoundingClientRect().right - e.clientX;
    } else {
      diff = e.clientX - thumbRef.current.getBoundingClientRect().left;
    }
    document.addEventListener("mousemove", callbackThumbMove);
    document.addEventListener("mouseup", callbackThumbUp);
  };
  const handleTouchStart = (e) => {
    e.stopPropagation();
    if (isRTL) {
      diff = thumbRef.current.getBoundingClientRect().right - e.touches[0].clientX;
    } else {
      diff = e.touches[0].clientX - thumbRef.current.getBoundingClientRect().left;
    }
    document.addEventListener("touchmove", callbackThumbMove, { passive: false });
    document.addEventListener("touchend", callbackThumbUp);
    document.addEventListener("touchcancel", callbackThumbUp);
  };
  const onSliderRailClick = (e) => {
    handleThumbMove(e);
    if (snapValue && !areCustomStepsContinuous) {
      thumbRef.current.style.setProperty(c_slider_value_default.name, `${snapValue}%`);
      setValue(snapValue);
      if (onChange) {
        onChange(e, snapValue);
      }
    }
  };
  const handleThumbMove = (e) => {
    if (e.type === "touchmove") {
      e.preventDefault();
      e.stopImmediatePropagation();
    }
    const clientPosition = e.touches && e.touches.length ? e.touches[0].clientX : e.clientX;
    let newPosition;
    if (isRTL) {
      newPosition = sliderRailRef.current.getBoundingClientRect().right - clientPosition - diff;
    } else {
      newPosition = clientPosition - diff - sliderRailRef.current.getBoundingClientRect().left;
    }
    const end = sliderRailRef.current.offsetWidth - thumbRef.current.offsetWidth;
    const start = 0;
    if (newPosition < start) {
      newPosition = 0;
    }
    if (newPosition > end) {
      newPosition = end;
    }
    const newPercentage = getPercentage(newPosition, end);
    thumbRef.current.style.setProperty(c_slider_value_default.name, `${newPercentage}%`);
    const newValue = Math.round((newPercentage * (max - min) / 100 + min) * 100) / 100;
    setValue(newValue);
    if (!customSteps) {
      snapValue = Math.round((Math.round((newValue - min) / step) * step + min) * 100) / 100;
      thumbRef.current.style.setProperty(c_slider_value_default.name, `${snapValue}%`);
      setValue(snapValue);
    }
    if (!areCustomStepsContinuous && customSteps) {
      let percentage = newPercentage;
      if (customSteps[customSteps.length - 1].value !== 100) {
        percentage = newPercentage * (max - min) / 100 + min;
      }
      const stepIndex = customSteps.findIndex((stepObj) => stepObj.value >= percentage);
      if (customSteps[stepIndex].value === percentage) {
        snapValue = customSteps[stepIndex].value;
      } else {
        const midpoint = (customSteps[stepIndex].value + customSteps[stepIndex - 1].value) / 2;
        if (midpoint > percentage) {
          snapValue = customSteps[stepIndex - 1].value;
        } else {
          snapValue = customSteps[stepIndex].value;
        }
      }
      setValue(snapValue);
    }
    if (onChange) {
      if (snapValue !== void 0) {
        onChange(e, snapValue);
      } else {
        onChange(e, newValue);
      }
    }
  };
  const callbackThumbMove = (0, import_react97.useCallback)(handleThumbMove, [min, max, customSteps, onChange]);
  const callbackThumbUp = (0, import_react97.useCallback)(handleThumbDragEnd, [min, max, customSteps, onChange]);
  const handleThumbKeys = (e) => {
    const key = e.key;
    if (key !== "ArrowLeft" && key !== "ArrowRight") {
      return;
    }
    e.preventDefault();
    let newValue = localValue;
    if (!areCustomStepsContinuous && customSteps) {
      const stepIndex = customSteps.findIndex((stepObj) => stepObj.value === localValue);
      if (key === "ArrowRight") {
        if (isRTL) {
          if (stepIndex - 1 >= 0) {
            newValue = customSteps[stepIndex - 1].value;
          }
        } else {
          if (stepIndex + 1 < customSteps.length) {
            {
              newValue = customSteps[stepIndex + 1].value;
            }
          }
        }
      } else if (key === "ArrowLeft") {
        if (isRTL) {
          if (stepIndex + 1 < customSteps.length) {
            {
              newValue = customSteps[stepIndex + 1].value;
            }
          }
        } else {
          if (stepIndex - 1 >= 0) {
            newValue = customSteps[stepIndex - 1].value;
          }
        }
      }
    } else {
      if (key === "ArrowRight") {
        if (isRTL) {
          newValue = localValue - step >= min ? localValue - step : min;
        } else {
          newValue = localValue + step <= max ? localValue + step : max;
        }
      } else if (key === "ArrowLeft") {
        if (isRTL) {
          newValue = localValue + step <= max ? localValue + step : max;
        } else {
          newValue = localValue - step >= min ? localValue - step : min;
        }
      }
    }
    if (newValue !== localValue) {
      thumbRef.current.style.setProperty(c_slider_value_default.name, `${newValue}%`);
      setValue(newValue);
      if (onChange) {
        onChange(e, newValue);
      }
    }
  };
  const displayInput = () => {
    const textInput = (0, import_jsx_runtime230.jsx)(TextInput, { isDisabled, type: "number", value: localInputValue, "aria-label": inputAriaLabel, onKeyDown: handleKeyPressOnInput, onChange: onChangeHandler, onClick: onInputFocus, onFocus: onInputFocus, onBlur });
    if (inputLabel) {
      return (0, import_jsx_runtime230.jsxs)(InputGroup, { children: [(0, import_jsx_runtime230.jsx)(InputGroupItem, { isFill: true, children: textInput }), (0, import_jsx_runtime230.jsx)(InputGroupText, { isDisabled, children: inputLabel })] });
    } else {
      return textInput;
    }
  };
  const getStepValue = (val, min2, max2) => (val - min2) * 100 / (max2 - min2);
  const buildSteps2 = () => {
    const builtSteps = [];
    for (let i = min; i <= max; i = i + step) {
      const stepValue = getStepValue(i, min, max);
      if (!showTicks && showBoundaries && i !== min && i !== max) {
        continue;
      }
      builtSteps.push((0, import_jsx_runtime230.jsx)(SliderStep, { value: stepValue, label: i.toString(), isTickHidden: !showTicks, isLabelHidden: (i === min || i === max) && showBoundaries ? false : true, isActive: i <= localValue }, i));
    }
    return builtSteps;
  };
  const thumbComponent = (0, import_jsx_runtime230.jsx)("div", { className: css(slider_default.sliderThumb), ref: thumbRef, tabIndex: isDisabled ? -1 : 0, role: "slider", "aria-valuemin": customSteps ? customSteps[0].value : min, "aria-valuemax": customSteps ? customSteps[customSteps.length - 1].value : max, "aria-valuenow": localValue, "aria-valuetext": findAriaTextValue(), "aria-label": thumbAriaLabel, "aria-disabled": isDisabled, "aria-describedby": ariaDescribedby, "aria-labelledby": ariaLabelledby, onMouseDown: !isDisabled ? handleMouseDown : null, onTouchStart: !isDisabled ? handleTouchStart : null, onKeyDown: !isDisabled ? handleThumbKeys : null, onClick: !isDisabled ? onThumbClick : null });
  return (0, import_jsx_runtime230.jsxs)("div", Object.assign({ className: css(slider_default.slider, className, isDisabled && slider_default.modifiers.disabled), style: Object.assign(Object.assign({}, style), inputStyle) }, props, { children: [(leftActions || startActions) && (0, import_jsx_runtime230.jsx)("div", { className: css(slider_default.sliderActions), children: leftActions || startActions }), (0, import_jsx_runtime230.jsxs)("div", { className: css(slider_default.sliderMain), children: [(0, import_jsx_runtime230.jsx)("div", { className: css(slider_default.sliderRail), ref: sliderRailRef, onClick: !isDisabled ? onSliderRailClick : null, children: (0, import_jsx_runtime230.jsx)("div", { className: css(slider_default.sliderRailTrack) }) }), customSteps && (0, import_jsx_runtime230.jsx)("div", { className: css(slider_default.sliderSteps), "aria-hidden": "true", children: customSteps.map((stepObj) => {
    const minValue = customSteps[0].value;
    const maxValue = customSteps[customSteps.length - 1].value;
    const stepValue = getStepValue(stepObj.value, minValue, maxValue);
    return (0, import_jsx_runtime230.jsx)(SliderStep, { value: stepValue, label: stepObj.label, isLabelHidden: stepObj.isLabelHidden, isActive: stepObj.value <= localValue }, stepObj.value);
  }) }), !customSteps && (showTicks || showBoundaries) && (0, import_jsx_runtime230.jsx)("div", { className: css(slider_default.sliderSteps), "aria-hidden": "true", children: buildSteps2() }), hasTooltipOverThumb ? (0, import_jsx_runtime230.jsx)(Tooltip, { className: css("pf-v6-m-tabular-nums"), triggerRef: thumbRef, entryDelay: 0, content: findAriaTextValue(), children: thumbComponent }) : thumbComponent, isInputVisible && inputPosition === "aboveThumb" && (0, import_jsx_runtime230.jsx)("div", { className: css(slider_default.sliderValue, slider_default.modifiers.floating), children: displayInput() })] }), isInputVisible && (inputPosition === "right" || inputPosition === "end") && (0, import_jsx_runtime230.jsx)("div", { className: css(slider_default.sliderValue), children: displayInput() }), (rightActions || endActions) && (0, import_jsx_runtime230.jsx)("div", { className: css(slider_default.sliderActions), children: rightActions || endActions })] }));
};
Slider.displayName = "Slider";

// node_modules/@patternfly/react-core/dist/esm/components/Switch/Switch.js
var import_jsx_runtime231 = __toESM(require_jsx_runtime());
var import_react98 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Switch/switch.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Switch/switch.css";
var switch_default = {
  "dirRtl": "pf-v6-m-dir-rtl",
  "modifiers": {
    "reverse": "pf-m-reverse"
  },
  "switch": "pf-v6-c-switch",
  "switchInput": "pf-v6-c-switch__input",
  "switchLabel": "pf-v6-c-switch__label",
  "switchToggle": "pf-v6-c-switch__toggle",
  "switchToggleIcon": "pf-v6-c-switch__toggle-icon"
};

// node_modules/@patternfly/react-core/dist/esm/components/Switch/Switch.js
var Switch = class _Switch extends import_react98.Component {
  constructor(props) {
    super(props);
    if (!props.label && !props["aria-label"] && !props["aria-labelledby"]) {
      console.error("Switch: Switch requires at least one of label, aria-labelledby, or aria-label props to be specified");
    }
    this.id = props.id || getUniqueId();
    this.state = {
      ouiaStateId: getDefaultOUIAId(_Switch.displayName)
    };
  }
  render() {
    const _a = this.props, {
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      id,
      className,
      label,
      isChecked,
      defaultChecked,
      hasCheckIcon,
      isDisabled,
      onChange,
      isReversed,
      ouiaId,
      ouiaSafe,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy
    } = _a, props = __rest(_a, ["id", "className", "label", "isChecked", "defaultChecked", "hasCheckIcon", "isDisabled", "onChange", "isReversed", "ouiaId", "ouiaSafe", "aria-label", "aria-labelledby"]);
    const hasAccessibleName = label || ariaLabel || ariaLabelledBy;
    const isAriaLabelledBy = hasAccessibleName && (!ariaLabel || ariaLabelledBy);
    const useDefaultAriaLabelledBy = !ariaLabelledBy && !ariaLabel;
    const ariaLabelledByIds = ariaLabelledBy !== null && ariaLabelledBy !== void 0 ? ariaLabelledBy : `${this.id}-label`;
    return (0, import_jsx_runtime231.jsxs)("label", Object.assign({ className: css(switch_default.switch, isReversed && switch_default.modifiers.reverse, className), htmlFor: this.id }, getOUIAProps(_Switch.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), { children: [(0, import_jsx_runtime231.jsx)("input", Object.assign({ id: this.id, className: css(switch_default.switchInput), type: "checkbox", role: "switch", onChange: (event) => onChange(event, event.target.checked) }, defaultChecked !== void 0 ? { defaultChecked } : { checked: isChecked }, { disabled: isDisabled, "aria-labelledby": isAriaLabelledBy ? ariaLabelledByIds : null, "aria-label": ariaLabel }, props)), label !== void 0 ? (0, import_jsx_runtime231.jsxs)(import_react98.Fragment, { children: [(0, import_jsx_runtime231.jsx)("span", { className: css(switch_default.switchToggle), children: hasCheckIcon && (0, import_jsx_runtime231.jsx)("span", { className: css(switch_default.switchToggleIcon), children: (0, import_jsx_runtime231.jsx)(check_icon_default, {}) }) }), (0, import_jsx_runtime231.jsx)("span", { className: css(switch_default.switchLabel), id: isAriaLabelledBy && useDefaultAriaLabelledBy ? `${this.id}-label` : null, "aria-hidden": "true", children: label })] }) : (0, import_jsx_runtime231.jsx)("span", { className: css(switch_default.switchToggle), children: (0, import_jsx_runtime231.jsx)("div", { className: css(switch_default.switchToggleIcon), children: (0, import_jsx_runtime231.jsx)(check_icon_default, {}) }) })] }));
  }
};
Switch.displayName = "Switch";
Switch.defaultProps = {
  isChecked: true,
  isDisabled: false,
  isReversed: false,
  "aria-label": void 0,
  "aria-labelledby": void 0,
  onChange: () => void 0
};

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/Tab.js
var import_jsx_runtime234 = __toESM(require_jsx_runtime());
var import_react101 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Tabs/tabs.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Tabs/tabs.css";
var tabs_default = {
  "button": "pf-v6-c-button",
  "dirRtl": "pf-v6-m-dir-rtl",
  "modifiers": {
    "fill": "pf-m-fill",
    "scrollable": "pf-m-scrollable",
    "noBorderBottom": "pf-m-no-border-bottom",
    "box": "pf-m-box",
    "vertical": "pf-m-vertical",
    "current": "pf-m-current",
    "secondary": "pf-m-secondary",
    "expandable": "pf-m-expandable",
    "nonExpandable": "pf-m-non-expandable",
    "expandableOnSm": "pf-m-expandable-on-sm",
    "nonExpandableOnSm": "pf-m-non-expandable-on-sm",
    "expandableOnMd": "pf-m-expandable-on-md",
    "nonExpandableOnMd": "pf-m-non-expandable-on-md",
    "expandableOnLg": "pf-m-expandable-on-lg",
    "nonExpandableOnLg": "pf-m-non-expandable-on-lg",
    "expandableOnXl": "pf-m-expandable-on-xl",
    "nonExpandableOnXl": "pf-m-non-expandable-on-xl",
    "expandableOn_2xl": "pf-m-expandable-on-2xl",
    "nonExpandableOn_2xl": "pf-m-non-expandable-on-2xl",
    "expanded": "pf-m-expanded",
    "subtab": "pf-m-subtab",
    "pageInsets": "pf-m-page-insets",
    "overflow": "pf-m-overflow",
    "action": "pf-m-action",
    "disabled": "pf-m-disabled",
    "ariaDisabled": "pf-m-aria-disabled",
    "insetNone": "pf-m-inset-none",
    "insetSm": "pf-m-inset-sm",
    "insetMd": "pf-m-inset-md",
    "insetLg": "pf-m-inset-lg",
    "insetXl": "pf-m-inset-xl",
    "inset_2xl": "pf-m-inset-2xl",
    "insetNoneOnSm": "pf-m-inset-none-on-sm",
    "insetSmOnSm": "pf-m-inset-sm-on-sm",
    "insetMdOnSm": "pf-m-inset-md-on-sm",
    "insetLgOnSm": "pf-m-inset-lg-on-sm",
    "insetXlOnSm": "pf-m-inset-xl-on-sm",
    "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
    "insetNoneOnMd": "pf-m-inset-none-on-md",
    "insetSmOnMd": "pf-m-inset-sm-on-md",
    "insetMdOnMd": "pf-m-inset-md-on-md",
    "insetLgOnMd": "pf-m-inset-lg-on-md",
    "insetXlOnMd": "pf-m-inset-xl-on-md",
    "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
    "insetNoneOnLg": "pf-m-inset-none-on-lg",
    "insetSmOnLg": "pf-m-inset-sm-on-lg",
    "insetMdOnLg": "pf-m-inset-md-on-lg",
    "insetLgOnLg": "pf-m-inset-lg-on-lg",
    "insetXlOnLg": "pf-m-inset-xl-on-lg",
    "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
    "insetNoneOnXl": "pf-m-inset-none-on-xl",
    "insetSmOnXl": "pf-m-inset-sm-on-xl",
    "insetMdOnXl": "pf-m-inset-md-on-xl",
    "insetLgOnXl": "pf-m-inset-lg-on-xl",
    "insetXlOnXl": "pf-m-inset-xl-on-xl",
    "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
    "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
    "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
    "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
    "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
    "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
    "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl",
    "animateCurrent": "pf-m-animate-current",
    "initializingAccent": "pf-m-initializing-accent"
  },
  "tabs": "pf-v6-c-tabs",
  "tabsAdd": "pf-v6-c-tabs__add",
  "tabsItem": "pf-v6-c-tabs__item",
  "tabsItemAction": "pf-v6-c-tabs__item-action",
  "tabsItemActionIcon": "pf-v6-c-tabs__item-action-icon",
  "tabsItemText": "pf-v6-c-tabs__item-text",
  "tabsLink": "pf-v6-c-tabs__link",
  "tabsLinkToggleIcon": "pf-v6-c-tabs__link-toggle-icon",
  "tabsList": "pf-v6-c-tabs__list",
  "tabsScrollButton": "pf-v6-c-tabs__scroll-button",
  "tabsToggle": "pf-v6-c-tabs__toggle",
  "tabsToggleButton": "pf-v6-c-tabs__toggle-button",
  "tabsToggleIcon": "pf-v6-c-tabs__toggle-icon"
};

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabButton.js
var import_jsx_runtime232 = __toESM(require_jsx_runtime());
var TabButton = (_a) => {
  var {
    children,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    tabContentRef,
    ouiaId,
    parentInnerRef,
    ouiaSafe
  } = _a, props = __rest(_a, ["children", "tabContentRef", "ouiaId", "parentInnerRef", "ouiaSafe"]);
  const Component32 = props.href ? "a" : "button";
  return (0, import_jsx_runtime232.jsx)(Component32, Object.assign({}, !props.href && { type: "button" }, { ref: parentInnerRef }, getOUIAProps(TabButton.displayName, ouiaId, ouiaSafe), props, { children }));
};
TabButton.displayName = "TabButton";

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabsContext.js
var import_react99 = __toESM(require_react());
var TabsContext = (0, import_react99.createContext)({
  variant: "default",
  mountOnEnter: false,
  unmountOnExit: false,
  localActiveKey: "",
  uniqueId: "",
  setAccentStyles: () => null,
  handleTabClick: () => null,
  handleTabClose: void 0
});
var TabsContextProvider = TabsContext.Provider;
var TabsContextConsumer = TabsContext.Consumer;

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabAction.js
var import_jsx_runtime233 = __toESM(require_jsx_runtime());
var import_react100 = __toESM(require_react());
var TabActionBase = (_a) => {
  var { children, className, onClick, isDisabled, "aria-label": ariaLabel = "Tab action", innerRef, ouiaId, ouiaSafe } = _a, props = __rest(_a, ["children", "className", "onClick", "isDisabled", "aria-label", "innerRef", "ouiaId", "ouiaSafe"]);
  return (0, import_jsx_runtime233.jsx)("span", { className: css(tabs_default.tabsItemAction, className), children: (0, import_jsx_runtime233.jsx)(Button, Object.assign({ ref: innerRef, type: "button", variant: "plain", "aria-label": ariaLabel, onClick, isDisabled, icon: (0, import_jsx_runtime233.jsx)("span", { className: css(tabs_default.tabsItemActionIcon), children }) }, getOUIAProps(TabAction.displayName, ouiaId, ouiaSafe), props)) });
};
var TabAction = (0, import_react100.forwardRef)((props, ref) => (0, import_jsx_runtime233.jsx)(TabActionBase, Object.assign({}, props, { innerRef: ref })));
TabAction.displayName = "TabAction";

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/Tab.js
var TabBase = (_a) => {
  var { title, eventKey, tabContentRef, id: childId, tabContentId, className: childClassName = "", ouiaId: childOuiaId, isDisabled, isAriaDisabled, inoperableEvents = ["onClick", "onKeyPress"], href, innerRef, tooltip, closeButtonAriaLabel, isCloseDisabled = false, actions } = _a, props = __rest(_a, ["title", "eventKey", "tabContentRef", "id", "tabContentId", "className", "ouiaId", "isDisabled", "isAriaDisabled", "inoperableEvents", "href", "innerRef", "tooltip", "closeButtonAriaLabel", "isCloseDisabled", "actions"]);
  const preventedEvents2 = inoperableEvents.reduce((handlers, eventToPrevent) => Object.assign(Object.assign({}, handlers), { [eventToPrevent]: (event) => {
    event.preventDefault();
  } }), {});
  const { mountOnEnter, localActiveKey, unmountOnExit, uniqueId, setAccentStyles, handleTabClick, handleTabClose } = (0, import_react101.useContext)(TabsContext);
  let ariaControls = tabContentId ? `${tabContentId}` : `pf-tab-section-${eventKey}-${childId || uniqueId}`;
  if ((mountOnEnter || unmountOnExit) && eventKey !== localActiveKey) {
    ariaControls = void 0;
  }
  const isButtonElement = Boolean(!href);
  const getDefaultTabIdx = () => {
    if (isDisabled) {
      return isButtonElement ? null : -1;
    } else if (isAriaDisabled) {
      return null;
    }
  };
  const tabButton = (0, import_jsx_runtime234.jsx)(TabButton, Object.assign({ parentInnerRef: innerRef, className: css(tabs_default.tabsLink, isDisabled && href && tabs_default.modifiers.disabled, isAriaDisabled && tabs_default.modifiers.ariaDisabled), disabled: isButtonElement ? isDisabled : null, "aria-disabled": isDisabled || isAriaDisabled, tabIndex: getDefaultTabIdx(), onClick: (event) => handleTabClick(event, eventKey, tabContentRef) }, isAriaDisabled ? preventedEvents2 : null, { id: `pf-tab-${eventKey}-${childId || uniqueId}`, "aria-controls": ariaControls, tabContentRef, ouiaId: childOuiaId, href, role: "tab", "aria-selected": eventKey === localActiveKey }, props, { children: title }));
  (0, import_react101.useEffect)(() => {
    setAccentStyles(true);
  }, [title, actions]);
  return (0, import_jsx_runtime234.jsxs)("li", { className: css(tabs_default.tabsItem, eventKey === localActiveKey && tabs_default.modifiers.current, (handleTabClose || actions) && tabs_default.modifiers.action, (isDisabled || isAriaDisabled) && tabs_default.modifiers.disabled, childClassName), role: "presentation", children: [tooltip ? (0, import_jsx_runtime234.jsx)(Tooltip, Object.assign({}, tooltip.props, { children: tabButton })) : tabButton, actions && actions, handleTabClose !== void 0 && (0, import_jsx_runtime234.jsx)(TabAction, { "aria-label": closeButtonAriaLabel || "Close tab", onClick: (event) => handleTabClose(event, eventKey, tabContentRef), isDisabled: isCloseDisabled, children: (0, import_jsx_runtime234.jsx)(times_icon_default, {}) })] });
};
var Tab = (0, import_react101.forwardRef)((props, ref) => (0, import_jsx_runtime234.jsx)(TabBase, Object.assign({ innerRef: ref }, props)));
Tab.displayName = "Tab";

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/Tabs.js
var import_jsx_runtime238 = __toESM(require_jsx_runtime());
var import_react104 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabContent.js
var import_jsx_runtime235 = __toESM(require_jsx_runtime());
var import_react102 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/TabContent/tab-content.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/TabContent/tab-content.css";
var tab_content_default = {
  "modifiers": {
    "secondary": "pf-m-secondary",
    "padding": "pf-m-padding"
  },
  "tabContent": "pf-v6-c-tab-content",
  "tabContentBody": "pf-v6-c-tab-content__body"
};

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabContent.js
var variantStyle3 = {
  default: "",
  secondary: tab_content_default.modifiers.secondary
};
var TabContentBase = (_a) => {
  var {
    id,
    activeKey,
    "aria-label": ariaLabel,
    child,
    children,
    className,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    eventKey,
    innerRef,
    ouiaId,
    ouiaSafe
  } = _a, props = __rest(_a, ["id", "activeKey", "aria-label", "child", "children", "className", "eventKey", "innerRef", "ouiaId", "ouiaSafe"]);
  if (children || child) {
    let labelledBy;
    if (ariaLabel) {
      labelledBy = null;
    } else {
      labelledBy = children ? `${id}` : `pf-tab-${child.props.eventKey}-${id}`;
    }
    return (0, import_jsx_runtime235.jsx)(TabsContextConsumer, { children: ({ variant }) => {
      const variantClass = variantStyle3[variant];
      return (0, import_jsx_runtime235.jsx)("section", Object.assign({ ref: innerRef, hidden: children ? null : child.props.eventKey !== activeKey, className: children ? css(tab_content_default.tabContent, className, variantClass) : css(tab_content_default.tabContent, child.props.className, variantClass), id: children ? id : `pf-tab-section-${child.props.eventKey}-${id}`, "aria-label": ariaLabel, "aria-labelledby": labelledBy, role: "tabpanel", tabIndex: 0 }, getOUIAProps("TabContent", ouiaId, ouiaSafe), props, { children: children || child.props.children }));
    } });
  }
  return null;
};
var TabContent = (0, import_react102.forwardRef)((props, ref) => (0, import_jsx_runtime235.jsx)(TabContentBase, Object.assign({}, props, { innerRef: ref })));

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/OverflowTab.js
var import_jsx_runtime237 = __toESM(require_jsx_runtime());
var import_react103 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabTitleText.js
var import_jsx_runtime236 = __toESM(require_jsx_runtime());
var TabTitleText = (_a) => {
  var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime236.jsx)("span", Object.assign({ className: css(tabs_default.tabsItemText, className) }, props, { children }));
};
TabTitleText.displayName = "TabTitleText";

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/OverflowTab.js
var OverflowTab = (_a) => {
  var { className, overflowingTabs = [], showTabCount, defaultTitleText = "More", toggleAriaLabel, zIndex = 9999, shouldPreventScrollOnItemFocus = true, focusTimeoutDelay = 0, popperProps } = _a, props = __rest(_a, ["className", "overflowingTabs", "showTabCount", "defaultTitleText", "toggleAriaLabel", "zIndex", "shouldPreventScrollOnItemFocus", "focusTimeoutDelay", "popperProps"]);
  const menuRef = (0, import_react103.useRef)(void 0);
  const overflowTabRef = (0, import_react103.useRef)(void 0);
  const overflowLIRef = (0, import_react103.useRef)(void 0);
  const [isExpanded, setIsExpanded] = (0, import_react103.useState)(false);
  const { localActiveKey, handleTabClick } = (0, import_react103.useContext)(TabsContext);
  const closeMenu = () => {
    setIsExpanded(false);
    overflowTabRef.current.focus();
  };
  const handleMenuKeys = (ev) => {
    var _a2;
    const menuContainsEventTarget = (_a2 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(ev.target);
    if (isExpanded && menuContainsEventTarget && ev.key === "Escape") {
      closeMenu();
    }
  };
  const handleClick = (ev) => {
    var _a2, _b;
    const clickIsOutsideMenu = !((_a2 = menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) === null || _a2 === void 0 ? void 0 : _a2.contains(ev.target));
    const clickIsOutsideOverflowTab = !((_b = overflowTabRef === null || overflowTabRef === void 0 ? void 0 : overflowTabRef.current) === null || _b === void 0 ? void 0 : _b.contains(ev.target));
    if (isExpanded && clickIsOutsideMenu && clickIsOutsideOverflowTab) {
      closeMenu();
    }
  };
  (0, import_react103.useEffect)(() => {
    window.addEventListener("click", handleClick);
    window.addEventListener("keydown", handleMenuKeys);
    return () => {
      window.removeEventListener("click", handleClick);
      window.removeEventListener("keydown", handleMenuKeys);
    };
  }, [isExpanded, menuRef, overflowTabRef]);
  const selectedTab = overflowingTabs.find((tab) => tab.eventKey === localActiveKey);
  const tabTitle = (selectedTab === null || selectedTab === void 0 ? void 0 : selectedTab.title) ? selectedTab.title : defaultTitleText;
  const toggleMenu = () => {
    setIsExpanded((prevIsExpanded) => !prevIsExpanded);
    setTimeout(() => {
      if (menuRef === null || menuRef === void 0 ? void 0 : menuRef.current) {
        const firstElement = menuRef.current.querySelector("li > button,input:not(:disabled)");
        firstElement && firstElement.focus({ preventScroll: shouldPreventScrollOnItemFocus });
      }
    }, focusTimeoutDelay);
  };
  const overflowTab = (0, import_jsx_runtime237.jsx)("li", Object.assign({ className: css(tabs_default.tabsItem, tabs_default.modifiers.overflow, selectedTab && tabs_default.modifiers.current, className), role: "presentation", ref: overflowLIRef }, props, { children: (0, import_jsx_runtime237.jsxs)("button", { type: "button", className: css(tabs_default.tabsLink, isExpanded && tabs_default.modifiers.expanded), onClick: () => toggleMenu(), "aria-label": toggleAriaLabel, "aria-haspopup": "menu", "aria-expanded": isExpanded, role: "tab", ref: overflowTabRef, children: [(0, import_jsx_runtime237.jsxs)(TabTitleText, { children: [tabTitle, showTabCount && tabTitle === defaultTitleText && ` (${overflowingTabs.length})`] }), (0, import_jsx_runtime237.jsx)("span", { className: tabs_default.tabsLinkToggleIcon, children: (0, import_jsx_runtime237.jsx)(angle_right_icon_default, {}) })] }) }));
  const tabs = overflowingTabs.map((tab) => (0, import_jsx_runtime237.jsx)(MenuItem, { itemId: tab.eventKey, isSelected: localActiveKey === tab.eventKey, children: tab.title }, tab.eventKey));
  const onTabSelect = (event, key) => {
    closeMenu();
    const selectedTabRef = overflowingTabs.find((tab) => tab.eventKey === key).tabContentRef;
    handleTabClick(event, key, selectedTabRef);
  };
  const overflowMenu = (0, import_jsx_runtime237.jsx)(Menu, { ref: menuRef, onSelect: (ev, itemId) => onTabSelect(ev, itemId), children: (0, import_jsx_runtime237.jsx)(MenuContent, { children: (0, import_jsx_runtime237.jsx)(MenuList, { children: tabs }) }) });
  return (0, import_jsx_runtime237.jsxs)(import_react103.Fragment, { children: [overflowTab, (0, import_jsx_runtime237.jsx)(Popper, Object.assign({ triggerRef: overflowTabRef, popper: overflowMenu, popperRef: menuRef, isVisible: isExpanded, minWidth: "revert", appendTo: overflowLIRef.current, zIndex }, popperProps))] });
};
OverflowTab.displayName = "OverflowTab";

// node_modules/@patternfly/react-tokens/dist/esm/c_tabs_link_accent_length.js
var c_tabs_link_accent_length = {
  "name": "--pf-v6-c-tabs--link-accent--length",
  "value": "0",
  "var": "var(--pf-v6-c-tabs--link-accent--length)"
};
var c_tabs_link_accent_length_default = c_tabs_link_accent_length;

// node_modules/@patternfly/react-tokens/dist/esm/c_tabs_link_accent_start.js
var c_tabs_link_accent_start = {
  "name": "--pf-v6-c-tabs--link-accent--start",
  "value": "0",
  "var": "var(--pf-v6-c-tabs--link-accent--start)"
};
var c_tabs_link_accent_start_default = c_tabs_link_accent_start;

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/Tabs.js
var TabsComponent;
(function(TabsComponent2) {
  TabsComponent2["div"] = "div";
  TabsComponent2["nav"] = "nav";
})(TabsComponent || (TabsComponent = {}));
var variantStyle4 = {
  default: "",
  secondary: tabs_default.modifiers.secondary
};
var Tabs = class _Tabs extends import_react104.Component {
  constructor(props) {
    super(props);
    this.tabList = (0, import_react104.createRef)();
    this.leftScrollButtonRef = (0, import_react104.createRef)();
    this.direction = "ltr";
    this.scrollTimeout = null;
    this.countOverflowingElements = (container) => {
      const elements = Array.from(container.children);
      return elements.filter((element) => !isElementInView(container, element, false)).length;
    };
    this.handleScrollButtons = () => {
      const { isOverflowHorizontal } = this.props;
      clearTimeout(this.scrollTimeout);
      this.scrollTimeout = setTimeout(() => {
        const container = this.tabList.current;
        let disableBackScrollButton = true;
        let disableForwardScrollButton = true;
        let enableScrollButtons = false;
        let overflowingTabCount = 0;
        if (container && !this.props.isVertical && !isOverflowHorizontal) {
          const overflowOnLeft = !isElementInView(container, container.firstChild, false);
          const overflowOnRight = !isElementInView(container, container.lastChild, false);
          enableScrollButtons = overflowOnLeft || overflowOnRight;
          disableBackScrollButton = !overflowOnLeft;
          disableForwardScrollButton = !overflowOnRight;
        }
        if (isOverflowHorizontal) {
          overflowingTabCount = this.countOverflowingElements(container);
        }
        this.setState({
          enableScrollButtons,
          disableBackScrollButton,
          disableForwardScrollButton,
          overflowingTabCount
        });
      }, 100);
    };
    this.scrollBack = () => {
      if (this.tabList.current) {
        const container = this.tabList.current;
        const childrenArr = Array.from(container.children);
        let firstElementInView;
        let lastElementOutOfView;
        let i;
        for (i = 0; i < childrenArr.length && !firstElementInView; i++) {
          if (isElementInView(container, childrenArr[i], false)) {
            firstElementInView = childrenArr[i];
            lastElementOutOfView = childrenArr[i - 1];
          }
        }
        if (lastElementOutOfView) {
          if (this.direction === "ltr") {
            container.scrollLeft -= lastElementOutOfView.scrollWidth;
          } else {
            container.scrollLeft += lastElementOutOfView.scrollWidth;
          }
        }
      }
    };
    this.scrollForward = () => {
      if (this.tabList.current) {
        const container = this.tabList.current;
        const childrenArr = Array.from(container.children);
        let lastElementInView;
        let firstElementOutOfView;
        for (let i = childrenArr.length - 1; i >= 0 && !lastElementInView; i--) {
          if (isElementInView(container, childrenArr[i], false)) {
            lastElementInView = childrenArr[i];
            firstElementOutOfView = childrenArr[i + 1];
          }
        }
        if (firstElementOutOfView) {
          if (this.direction === "ltr") {
            container.scrollLeft += firstElementOutOfView.scrollWidth;
          } else {
            container.scrollLeft -= firstElementOutOfView.scrollWidth;
          }
        }
      }
    };
    this.hideScrollButtons = () => {
      const { enableScrollButtons, renderScrollButtons, showScrollButtons } = this.state;
      if (!enableScrollButtons && !showScrollButtons && renderScrollButtons) {
        this.setState({ renderScrollButtons: false });
      }
    };
    this.setAccentStyles = (shouldInitializeStyle) => {
      const currentItem = this.tabList.current.querySelector("li.pf-m-current");
      if (!currentItem) {
        return;
      }
      const { isVertical } = this.props;
      const { offsetWidth, offsetHeight, offsetTop } = currentItem;
      const lengthValue = isVertical ? offsetHeight : offsetWidth;
      const startValue = isVertical ? offsetTop : getInlineStartProperty(currentItem, this.tabList.current);
      this.setState(Object.assign({ currentLinkAccentLength: `${lengthValue}px`, currentLinkAccentStart: `${startValue}px` }, shouldInitializeStyle && { isInitializingAccent: true }));
      setTimeout(() => {
        this.setState({ isInitializingAccent: false });
      }, 0);
    };
    this.handleResize = () => {
      this.handleScrollButtons();
      this.setAccentStyles();
    };
    this.state = {
      enableScrollButtons: false,
      showScrollButtons: false,
      renderScrollButtons: false,
      disableBackScrollButton: true,
      disableForwardScrollButton: true,
      shownKeys: this.props.defaultActiveKey !== void 0 ? [this.props.defaultActiveKey] : [this.props.activeKey],
      // only for mountOnEnter case
      uncontrolledActiveKey: this.props.defaultActiveKey,
      uncontrolledIsExpandedLocal: this.props.defaultIsExpanded,
      ouiaStateId: getDefaultOUIAId(_Tabs.displayName),
      overflowingTabCount: 0,
      isInitializingAccent: true,
      currentLinkAccentLength: c_tabs_link_accent_length_default.value,
      currentLinkAccentStart: c_tabs_link_accent_start_default.value
    };
    if (this.props.isVertical && this.props.expandable !== void 0) {
      if (!this.props.toggleAriaLabel && !this.props.toggleText) {
        console.error("Tabs:", "toggleAriaLabel or the toggleText prop is required to make the toggle button accessible");
      }
    }
  }
  handleTabClick(event, eventKey, tabContentRef) {
    const { shownKeys } = this.state;
    const { onSelect, defaultActiveKey } = this.props;
    if (defaultActiveKey !== void 0) {
      this.setState({
        uncontrolledActiveKey: eventKey
      });
    } else {
      onSelect(event, eventKey);
    }
    if (tabContentRef) {
      import_react104.Children.toArray(this.props.children).filter((child) => (0, import_react104.isValidElement)(child)).filter(({ props }) => props.tabContentRef && props.tabContentRef.current).forEach((child) => child.props.tabContentRef.current.hidden = true);
      if (tabContentRef.current) {
        tabContentRef.current.hidden = false;
      }
    }
    if (this.props.mountOnEnter) {
      this.setState({
        shownKeys: shownKeys.concat(eventKey)
      });
    }
  }
  componentDidMount() {
    if (!this.props.isVertical) {
      if (canUseDOM) {
        window.addEventListener("resize", this.handleResize, false);
      }
      this.direction = getLanguageDirection(this.tabList.current);
      this.handleScrollButtons();
    }
    this.setAccentStyles(true);
  }
  componentWillUnmount() {
    var _a;
    if (!this.props.isVertical) {
      if (canUseDOM) {
        window.removeEventListener("resize", this.handleResize, false);
      }
    }
    clearTimeout(this.scrollTimeout);
    (_a = this.leftScrollButtonRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener("transitionend", this.hideScrollButtons);
  }
  componentDidUpdate(prevProps, prevState) {
    this.direction = getLanguageDirection(this.tabList.current);
    const { activeKey, mountOnEnter, isOverflowHorizontal, children, defaultActiveKey } = this.props;
    const { shownKeys, overflowingTabCount, enableScrollButtons, uncontrolledActiveKey } = this.state;
    const isOnCloseUpdate = !!prevProps.onClose !== !!this.props.onClose;
    if (defaultActiveKey !== void 0 && prevState.uncontrolledActiveKey !== uncontrolledActiveKey || defaultActiveKey === void 0 && prevProps.activeKey !== activeKey || isOnCloseUpdate) {
      this.setAccentStyles(isOnCloseUpdate);
    }
    if (prevProps.activeKey !== activeKey && mountOnEnter && shownKeys.indexOf(activeKey) < 0) {
      this.setState({
        shownKeys: shownKeys.concat(activeKey)
      });
    }
    if (prevProps.children && children && import_react104.Children.toArray(prevProps.children).length !== import_react104.Children.toArray(children).length) {
      this.handleScrollButtons();
      this.setAccentStyles(true);
    }
    const currentOverflowingTabCount = this.countOverflowingElements(this.tabList.current);
    if (isOverflowHorizontal && currentOverflowingTabCount) {
      this.setState({ overflowingTabCount: currentOverflowingTabCount + overflowingTabCount });
    }
    if (!prevState.enableScrollButtons && enableScrollButtons) {
      this.setState({ renderScrollButtons: true });
      setTimeout(() => {
        var _a, _b;
        (_a = this.leftScrollButtonRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener("transitionend", this.hideScrollButtons);
        (_b = this.leftScrollButtonRef.current) === null || _b === void 0 ? void 0 : _b.addEventListener("transitionend", this.hideScrollButtons);
        this.setState({ showScrollButtons: true });
      }, 100);
    } else if (prevState.enableScrollButtons && !enableScrollButtons) {
      this.setState({ showScrollButtons: false });
    }
  }
  static getDerivedStateFromProps(nextProps, prevState) {
    if (prevState.uncontrolledActiveKey === void 0) {
      return null;
    }
    const childrenHasTabWithActiveEventKey = import_react104.Children.toArray(nextProps.children).filter((child) => (0, import_react104.isValidElement)(child)).some(({ props }) => props.eventKey === prevState.uncontrolledActiveKey);
    if (childrenHasTabWithActiveEventKey) {
      return null;
    }
    return {
      uncontrolledActiveKey: nextProps.defaultActiveKey,
      shownKeys: nextProps.defaultActiveKey !== void 0 ? [nextProps.defaultActiveKey] : [nextProps.activeKey]
      // only for mountOnEnter case
    };
  }
  render() {
    const _a = this.props, { className, children, activeKey, defaultActiveKey, id, isAddButtonDisabled, isFilled, isSubtab, isVertical, isBox, hasNoBorderBottom, leftScrollAriaLabel, rightScrollAriaLabel, backScrollAriaLabel, forwardScrollAriaLabel, "aria-label": ariaLabel, component, ouiaId, ouiaSafe, mountOnEnter, unmountOnExit, usePageInsets, inset, variant, expandable, isExpanded, defaultIsExpanded, toggleText, toggleAriaLabel, addButtonAriaLabel, onToggle, onClose, onAdd, isOverflowHorizontal } = _a, props = __rest(_a, ["className", "children", "activeKey", "defaultActiveKey", "id", "isAddButtonDisabled", "isFilled", "isSubtab", "isVertical", "isBox", "hasNoBorderBottom", "leftScrollAriaLabel", "rightScrollAriaLabel", "backScrollAriaLabel", "forwardScrollAriaLabel", "aria-label", "component", "ouiaId", "ouiaSafe", "mountOnEnter", "unmountOnExit", "usePageInsets", "inset", "variant", "expandable", "isExpanded", "defaultIsExpanded", "toggleText", "toggleAriaLabel", "addButtonAriaLabel", "onToggle", "onClose", "onAdd", "isOverflowHorizontal"]);
    const { showScrollButtons, renderScrollButtons, disableBackScrollButton, disableForwardScrollButton, shownKeys, uncontrolledActiveKey, uncontrolledIsExpandedLocal, overflowingTabCount, isInitializingAccent, currentLinkAccentLength, currentLinkAccentStart } = this.state;
    const filteredChildren = import_react104.Children.toArray(children).filter((child) => (0, import_react104.isValidElement)(child)).filter(({ props: props2 }) => !props2.isHidden);
    const filteredChildrenWithoutOverflow = filteredChildren.slice(0, filteredChildren.length - overflowingTabCount);
    const filteredChildrenOverflowing = filteredChildren.slice(filteredChildren.length - overflowingTabCount);
    const overflowingTabProps = filteredChildrenOverflowing.map((child) => child.props);
    const uniqueId = id || getUniqueId();
    const Component32 = component === TabsComponent.nav ? "nav" : "div";
    const localActiveKey = defaultActiveKey !== void 0 ? uncontrolledActiveKey : activeKey;
    const isExpandedLocal = defaultIsExpanded !== void 0 ? uncontrolledIsExpandedLocal : isExpanded;
    const toggleTabs = (event, newValue) => {
      if (isExpanded === void 0) {
        this.setState({ uncontrolledIsExpandedLocal: newValue });
      } else {
        onToggle(event, newValue);
      }
    };
    const hasOverflowTab = isOverflowHorizontal && overflowingTabCount > 0;
    const overflowObjectProps = typeof isOverflowHorizontal === "object" ? Object.assign({}, isOverflowHorizontal) : {};
    return (0, import_jsx_runtime238.jsxs)(TabsContextProvider, { value: {
      variant,
      mountOnEnter,
      unmountOnExit,
      localActiveKey,
      uniqueId,
      setAccentStyles: this.setAccentStyles,
      handleTabClick: (...args) => this.handleTabClick(...args),
      handleTabClose: onClose
    }, children: [(0, import_jsx_runtime238.jsxs)(Component32, Object.assign({ "aria-label": ariaLabel, className: css(tabs_default.tabs, tabs_default.modifiers.animateCurrent, isFilled && tabs_default.modifiers.fill, isSubtab && tabs_default.modifiers.subtab, isVertical && tabs_default.modifiers.vertical, isVertical && expandable && formatBreakpointMods(expandable, tabs_default), isVertical && expandable && isExpandedLocal && tabs_default.modifiers.expanded, isBox && tabs_default.modifiers.box, showScrollButtons && tabs_default.modifiers.scrollable, usePageInsets && tabs_default.modifiers.pageInsets, hasNoBorderBottom && tabs_default.modifiers.noBorderBottom, formatBreakpointMods(inset, tabs_default), variantStyle4[variant], hasOverflowTab && tabs_default.modifiers.overflow, isInitializingAccent && tabs_default.modifiers.initializingAccent, className) }, getOUIAProps(_Tabs.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId, ouiaSafe), { id: id && id, style: { [c_tabs_link_accent_length_default.name]: currentLinkAccentLength, [c_tabs_link_accent_start_default.name]: currentLinkAccentStart } }, props, { children: [expandable && isVertical && (0, import_jsx_runtime238.jsx)(GenerateId, { children: (randomId) => (0, import_jsx_runtime238.jsx)("div", { className: css(tabs_default.tabsToggle), children: (0, import_jsx_runtime238.jsx)("div", { className: css(tabs_default.tabsToggleButton), children: (0, import_jsx_runtime238.jsx)(Button, { onClick: (event) => toggleTabs(event, !isExpandedLocal), variant: "plain", "aria-label": toggleAriaLabel, "aria-expanded": isExpandedLocal, id: `${randomId}-button`, "aria-labelledby": `${randomId}-text ${randomId}-button`, icon: (0, import_jsx_runtime238.jsx)("span", { className: css(tabs_default.tabsToggleIcon), children: (0, import_jsx_runtime238.jsx)(angle_right_icon_default, {}) }), children: toggleText && (0, import_jsx_runtime238.jsx)("span", { id: `${randomId}-text`, children: toggleText }) }) }) }) }), renderScrollButtons && (0, import_jsx_runtime238.jsx)("div", { className: css(tabs_default.tabsScrollButton), children: (0, import_jsx_runtime238.jsx)(Button, { "aria-label": backScrollAriaLabel || leftScrollAriaLabel, onClick: this.scrollBack, isDisabled: disableBackScrollButton, "aria-hidden": disableBackScrollButton, ref: this.leftScrollButtonRef, variant: "plain", icon: (0, import_jsx_runtime238.jsx)(angle_left_icon_default, {}) }) }), (0, import_jsx_runtime238.jsxs)("ul", { className: css(tabs_default.tabsList), ref: this.tabList, onScroll: this.handleScrollButtons, role: "tablist", children: [isOverflowHorizontal ? filteredChildrenWithoutOverflow : filteredChildren, hasOverflowTab && (0, import_jsx_runtime238.jsx)(OverflowTab, Object.assign({ overflowingTabs: overflowingTabProps }, overflowObjectProps))] }), renderScrollButtons && (0, import_jsx_runtime238.jsx)("div", { className: css(tabs_default.tabsScrollButton), children: (0, import_jsx_runtime238.jsx)(Button, { "aria-label": forwardScrollAriaLabel || rightScrollAriaLabel, onClick: this.scrollForward, isDisabled: disableForwardScrollButton, "aria-hidden": disableForwardScrollButton, variant: "plain", icon: (0, import_jsx_runtime238.jsx)(angle_right_icon_default, {}) }) }), onAdd !== void 0 && (0, import_jsx_runtime238.jsx)("span", { className: css(tabs_default.tabsAdd), children: (0, import_jsx_runtime238.jsx)(Button, { variant: "plain", "aria-label": addButtonAriaLabel || "Add tab", onClick: onAdd, icon: (0, import_jsx_runtime238.jsx)(plus_icon_default, {}), isDisabled: isAddButtonDisabled }) })] })), filteredChildren.filter((child) => child.props.children && !(unmountOnExit && child.props.eventKey !== localActiveKey) && !(mountOnEnter && shownKeys.indexOf(child.props.eventKey) === -1)).map((child) => (0, import_jsx_runtime238.jsx)(TabContent, { activeKey: localActiveKey, child, id: child.props.id || uniqueId, ouiaId: child.props.ouiaId }, child.props.eventKey))] });
  }
};
Tabs.displayName = "Tabs";
Tabs.defaultProps = {
  activeKey: 0,
  onSelect: () => void 0,
  isFilled: false,
  isSubtab: false,
  isVertical: false,
  isBox: false,
  hasNoBorderBottom: false,
  leftScrollAriaLabel: "Scroll left",
  backScrollAriaLabel: "Scroll back",
  rightScrollAriaLabel: "Scroll right",
  forwardScrollAriaLabel: "Scroll forward",
  component: TabsComponent.div,
  mountOnEnter: false,
  unmountOnExit: false,
  ouiaSafe: true,
  variant: "default",
  onToggle: (_event, _isExpanded) => void 0
};

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabContentBody.js
var import_jsx_runtime239 = __toESM(require_jsx_runtime());
var TabContentBody = (_a) => {
  var { children, className, hasPadding } = _a, props = __rest(_a, ["children", "className", "hasPadding"]);
  return (0, import_jsx_runtime239.jsx)("div", Object.assign({ className: css(tab_content_default.tabContentBody, hasPadding && tab_content_default.modifiers.padding, className) }, props, { children }));
};
TabContentBody.displayName = "TabContentBody";

// node_modules/@patternfly/react-core/dist/esm/components/Tabs/TabTitleIcon.js
var import_jsx_runtime240 = __toESM(require_jsx_runtime());
var TabTitleIcon = (_a) => {
  var { children, className = "" } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime240.jsx)("span", Object.assign({ className: css(`${tabs_default.tabs}__item-icon`, className) }, props, { children }));
};
TabTitleIcon.displayName = "TabTitleIcon";

// node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePicker.js
var import_jsx_runtime241 = __toESM(require_jsx_runtime());
var import_react105 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePickerUtils.js
var amSuffix = " AM";
var pmSuffix = " PM";
var makeTimeOptions = (stepMinutes, hour12, delimiter, minTime, maxTime, includeSeconds) => {
  const res = [];
  const iter = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
  const iterDay = iter.getDay();
  while (iter.getDay() === iterDay) {
    let hour = iter.getHours();
    let suffix = amSuffix;
    if (hour12) {
      if (hour === 0) {
        hour = 12;
      } else if (hour >= 12) {
        suffix = pmSuffix;
      }
      if (hour > 12) {
        hour %= 12;
      }
    }
    hour = hour12 ? hour.toString() : hour.toString().padStart(2, "0");
    const minutes = iter.getMinutes().toString().padStart(2, "0");
    const timeOption = `${hour}${delimiter}${minutes}${hour12 ? suffix : ""}`;
    if (isWithinMinMax(minTime, maxTime, timeOption, delimiter, includeSeconds)) {
      res.push(timeOption);
    }
    iter.setMinutes(iter.getMinutes() + stepMinutes);
  }
  return res;
};
var parseTime = (time, timeRegex, delimiter, is12Hour, includeSeconds) => {
  const date = new Date(time);
  if (!isNaN(date.getDate()) && (time instanceof Date || time.includes("T"))) {
    const hours = is12Hour ? `${date.getHours() > 12 ? date.getHours() - 12 : date.getHours()}` : `${date.getHours()}`.padStart(2, "0");
    const minutes = `${date.getMinutes()}`.padStart(2, "0");
    const seconds = includeSeconds ? `${date.getSeconds()}`.padStart(2, "0") : "";
    const secondsWithDelimiter = seconds ? `${delimiter}${seconds}` : "";
    let ampm = "";
    if (is12Hour && date.getHours() > 11) {
      ampm = pmSuffix;
    } else if (is12Hour) {
      ampm = amSuffix;
    }
    return `${hours}${delimiter}${minutes}${secondsWithDelimiter}${ampm}`;
  } else if (typeof time === "string") {
    time = time.trim();
    if (time !== "" && validateTime(time, timeRegex, delimiter, is12Hour)) {
      const [, hours, minutes, seconds, suffix = ""] = timeRegex.exec(time);
      const secondsWithDelimiter = includeSeconds ? `${delimiter}${seconds !== null && seconds !== void 0 ? seconds : "00"}` : "";
      let ampm = "";
      if (is12Hour) {
        const uppercaseSuffix = suffix.toUpperCase();
        if (uppercaseSuffix === amSuffix.toUpperCase().trim()) {
          ampm = amSuffix;
        } else if (uppercaseSuffix === pmSuffix.toUpperCase().trim()) {
          ampm = pmSuffix;
        } else {
          ampm = (/* @__PURE__ */ new Date()).getHours() > 11 ? pmSuffix : amSuffix;
        }
      }
      return `${hours}${delimiter}${minutes}${secondsWithDelimiter}${ampm}`;
    }
  }
  return time.toString();
};
var validateTime = (time, timeRegex, delimiter, is12Hour) => {
  const date = new Date(time);
  if (!isNaN(date.getDate()) && time.includes("T")) {
    return true;
  }
  const hours = parseInt(time.split(delimiter)[0]);
  const validHours = hours >= (is12Hour ? 1 : 0) && hours <= (is12Hour ? 12 : 23);
  return time === "" || timeRegex.test(time) && validHours;
};
var getHours = (time, timeRegex) => {
  const parts = time.match(timeRegex);
  if (parts && parts.length) {
    if (/pm/i.test(parts[4])) {
      return parseInt(parts[1]) === 12 ? parseInt(parts[1]) : parseInt(parts[1]) + 12;
    }
    if (/am/i.test(parts[4])) {
      return parseInt(parts[1]) === 12 ? 0 : parseInt(parts[1]);
    }
    return parseInt(parts[1]);
  }
  return null;
};
var getMinutes = (time, timeRegex) => {
  const parts = time.match(timeRegex);
  return parts && parts.length ? parseInt(parts[2]) : null;
};
var getSeconds = (time, timeRegex) => {
  var _a;
  const seconds = (_a = time.match(timeRegex)) === null || _a === void 0 ? void 0 : _a[3];
  return seconds ? parseInt(seconds) : null;
};
var isWithinMinMax = (minTime, maxTime, time, delimiter, includeSeconds) => {
  if (time.trim() === "") {
    return true;
  }
  const min24HourTime = convertTo24Hour(minTime, delimiter, includeSeconds);
  const selected24HourTime = convertTo24Hour(time, delimiter, includeSeconds);
  const max24HourTime = convertTo24Hour(maxTime, delimiter, includeSeconds);
  return min24HourTime <= selected24HourTime && selected24HourTime <= max24HourTime;
};
var convertTo24Hour = (time, delimiter, includeSeconds) => {
  const timeReg = new RegExp(`^\\s*(\\d\\d?)${delimiter}([0-5]\\d)${delimiter}?([0-5]\\d)?\\s*([AaPp][Mm])?\\s*$`);
  const regMatches = timeReg.exec(time);
  if (!regMatches || !regMatches.length) {
    return;
  }
  let hours = regMatches[1].padStart(2, "0");
  const minutes = regMatches[2];
  let seconds = regMatches[3] ? `${delimiter}${regMatches[3]}` : "";
  if (!seconds && includeSeconds) {
    seconds = `${delimiter}00`;
  }
  const suffix = regMatches[4] || "";
  if (suffix.toUpperCase() === "PM" && hours !== "12") {
    hours = `${parseInt(hours) + 12}`;
  } else if (suffix.toUpperCase() === "AM" && hours === "12") {
    hours = "00";
  }
  return `${hours}${delimiter}${minutes}${seconds}`;
};

// node_modules/@patternfly/react-tokens/dist/esm/c_date_picker__input_c_form_control_Width.js
var c_date_picker__input_c_form_control_Width = {
  "name": "--pf-v6-c-date-picker__input--c-form-control--Width",
  "value": "calc(11 * 1ch + calc(2rem + 0.5rem))",
  "var": "var(--pf-v6-c-date-picker__input--c-form-control--Width)"
};
var c_date_picker_input_c_form_control_Width_default = c_date_picker__input_c_form_control_Width;

// node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePicker.js
var TimePicker = class extends import_react105.Component {
  constructor(props) {
    super(props);
    this.baseComponentRef = (0, import_react105.createRef)();
    this.toggleRef = (0, import_react105.createRef)();
    this.inputRef = (0, import_react105.createRef)();
    this.menuRef = (0, import_react105.createRef)();
    this.onDocClick = (event) => {
      var _a, _b, _c, _d;
      const clickedOnToggle = (_b = (_a = this.toggleRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(event.target);
      const clickedWithinMenu = (_d = (_c = this.menuRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.contains(event.target);
      if (this.state.isTimeOptionsOpen && !(clickedOnToggle || clickedWithinMenu)) {
        this.onToggle(false);
      }
    };
    this.handleGlobalKeys = (event) => {
      var _a, _b, _c, _d;
      const { isTimeOptionsOpen, focusedIndex, scrollIndex } = this.state;
      if ((_b = (_a = this.inputRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)) {
        if (!isTimeOptionsOpen && event.key !== KeyTypes.Tab && event.key !== KeyTypes.Escape) {
          this.onToggle(true);
        } else if (isTimeOptionsOpen) {
          if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {
            this.onToggle(false);
          } else if (event.key === KeyTypes.Enter) {
            if (focusedIndex !== null) {
              this.focusSelection(focusedIndex);
              event.stopPropagation();
            } else {
              this.onToggle(false);
            }
          } else if (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) {
            this.focusSelection(scrollIndex);
            this.updateFocusedIndex(0);
            event.preventDefault();
          }
        }
      } else if ((_d = (_c = this.menuRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.contains(event.target)) {
        if (event.key === KeyTypes.ArrowDown) {
          this.updateFocusedIndex(1);
          event.preventDefault();
        } else if (event.key === KeyTypes.ArrowUp) {
          this.updateFocusedIndex(-1);
          event.preventDefault();
        } else if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {
          this.inputRef.current.focus();
          this.onToggle(false);
        }
      }
    };
    this.updateFocusedIndex = (increment) => {
      this.setState((prevState) => {
        const maxIndex = this.getOptions().length - 1;
        let nextIndex = prevState.focusedIndex !== null ? prevState.focusedIndex + increment : prevState.scrollIndex + increment;
        if (nextIndex < 0) {
          nextIndex = maxIndex;
        } else if (nextIndex > maxIndex) {
          nextIndex = 0;
        }
        this.scrollToIndex(nextIndex);
        return {
          focusedIndex: nextIndex
        };
      });
    };
    this.getIndexToScroll = (index) => {
      if (this.props.menuAppendTo === "inline") {
        return index > 0 ? index - 1 : 0;
      }
      return index;
    };
    this.scrollToIndex = (index) => {
      this.getOptions()[index].closest(`.${menu_default.menuContent}`).scrollTop = this.getOptions()[this.getIndexToScroll(index)].offsetTop;
    };
    this.focusSelection = (index) => {
      var _a;
      const indexToFocus = index !== -1 ? index : 0;
      if ((_a = this.menuRef) === null || _a === void 0 ? void 0 : _a.current) {
        this.getOptions()[indexToFocus].querySelector(`.${menu_default.menuItem}`).focus();
      }
    };
    this.scrollToSelection = (time2) => {
      const { delimiter: delimiter2, is24Hour: is24Hour2 } = this.props;
      let splitTime = time2.split(this.props.delimiter);
      let focusedIndex = null;
      if (splitTime.length < 2) {
        time2 = `${time2}${delimiter2}00`;
        splitTime = time2.split(delimiter2);
      } else if (splitTime.length > 2) {
        time2 = parseTime(time2, this.state.timeRegex, delimiter2, !is24Hour2, false);
        splitTime = time2.split(delimiter2);
      }
      if (!is24Hour2 && splitTime.length > 1 && splitTime[1].length < 2) {
        const minutes = splitTime[1].length === 0 ? "00" : splitTime[1] + "0";
        time2 = `${splitTime[0]}${delimiter2}${minutes}${(/* @__PURE__ */ new Date()).getHours() > 11 ? pmSuffix : amSuffix}`;
      } else if (!is24Hour2 && splitTime.length > 1 && splitTime[1].length === 2 && !time2.toUpperCase().includes(amSuffix.toUpperCase().trim()) && !time2.toUpperCase().includes(pmSuffix.toUpperCase().trim())) {
        time2 = `${time2}${(/* @__PURE__ */ new Date()).getHours() > 11 ? pmSuffix : amSuffix}`;
      }
      let scrollIndex = this.getOptions().findIndex((option) => option.textContent === time2);
      if (scrollIndex !== -1) {
        this.scrollToIndex(scrollIndex);
        focusedIndex = scrollIndex;
      } else if (splitTime.length === 2) {
        let amPm = "";
        if (!is24Hour2) {
          if (splitTime[1].toUpperCase().includes("P")) {
            amPm = pmSuffix;
          } else if (splitTime[1].toUpperCase().includes("A")) {
            amPm = amSuffix;
          }
        }
        time2 = `${splitTime[0]}${delimiter2}00${amPm}`;
        scrollIndex = this.getOptions().findIndex((option) => option.textContent === time2);
        if (scrollIndex !== -1) {
          this.scrollToIndex(scrollIndex);
        }
      }
      this.setState({
        focusedIndex,
        scrollIndex
      });
    };
    this.getRegExp = (includeSeconds2 = true) => {
      const { is24Hour: is24Hour2, delimiter: delimiter2 } = this.props;
      let baseRegex = `\\s*(\\d\\d?)${delimiter2}([0-5]\\d)`;
      if (includeSeconds2) {
        baseRegex += `${delimiter2}?([0-5]\\d)?`;
      }
      return new RegExp(`^${baseRegex}${is24Hour2 ? "" : "\\s*([AaPp][Mm])?"}\\s*$`);
    };
    this.getOptions = () => {
      var _a;
      return ((_a = this.menuRef) === null || _a === void 0 ? void 0 : _a.current) ? Array.from(this.menuRef.current.querySelectorAll(`.${menu_default.menuListItem}`)) : [];
    };
    this.isValidFormat = (time2) => {
      if (this.props.validateTime) {
        return this.props.validateTime(time2);
      }
      const { delimiter: delimiter2, is24Hour: is24Hour2, includeSeconds: includeSeconds2 } = this.props;
      return validateTime(time2, this.getRegExp(includeSeconds2), delimiter2, !is24Hour2);
    };
    this.isValidTime = (time2) => {
      const { delimiter: delimiter2, includeSeconds: includeSeconds2 } = this.props;
      const { minTimeState, maxTimeState } = this.state;
      return isWithinMinMax(minTimeState, maxTimeState, time2, delimiter2, includeSeconds2);
    };
    this.isValid = (time2) => this.isValidFormat(time2) && this.isValidTime(time2);
    this.onToggle = (isOpen2) => {
      this.setState((prevState) => {
        const { timeRegex: timeRegex2, isInvalid, timeState } = prevState;
        const { delimiter: delimiter2, is24Hour: is24Hour2, includeSeconds: includeSeconds2, onChange } = this.props;
        const time2 = parseTime(timeState, timeRegex2, delimiter2, !is24Hour2, includeSeconds2);
        if (onChange && !isOpen2 && time2 !== timeState) {
          onChange(null, time2, getHours(time2, timeRegex2), getMinutes(time2, timeRegex2), getSeconds(time2, timeRegex2), this.isValid(time2));
        }
        return {
          isTimeOptionsOpen: isOpen2,
          timeState: time2,
          isInvalid: isOpen2 ? isInvalid : !this.isValid(time2)
        };
      });
      this.props.setIsOpen(isOpen2);
      if (!isOpen2) {
        this.inputRef.current.focus();
      }
    };
    this.onSelect = (e) => {
      const { timeRegex: timeRegex2, timeState } = this.state;
      const { delimiter: delimiter2, is24Hour: is24Hour2, includeSeconds: includeSeconds2, setIsOpen } = this.props;
      const time2 = parseTime(e.target.textContent, timeRegex2, delimiter2, !is24Hour2, includeSeconds2);
      if (time2 !== timeState) {
        this.onInputChange(e, time2);
      }
      this.inputRef.current.focus();
      this.setState({
        isTimeOptionsOpen: false,
        isInvalid: false
      });
      setIsOpen(false);
    };
    this.onInputClick = (e) => {
      if (!this.state.isTimeOptionsOpen) {
        this.onToggle(true);
      }
      e.stopPropagation();
    };
    this.onInputChange = (event, newTime) => {
      const { onChange } = this.props;
      const { timeRegex: timeRegex2 } = this.state;
      if (onChange) {
        onChange(event, newTime, getHours(newTime, timeRegex2), getMinutes(newTime, timeRegex2), getSeconds(newTime, timeRegex2), this.isValid(newTime));
      }
      this.scrollToSelection(newTime);
      this.setState({
        timeState: newTime
      });
    };
    const { is24Hour, delimiter, time, includeSeconds, isOpen } = this.props;
    let { minTime, maxTime } = this.props;
    if (minTime === "") {
      const minSeconds = includeSeconds ? `${delimiter}00` : "";
      minTime = is24Hour ? `00${delimiter}00${minSeconds}` : `12${delimiter}00${minSeconds} AM`;
    }
    if (maxTime === "") {
      const maxSeconds = includeSeconds ? `${delimiter}59` : "";
      maxTime = is24Hour ? `23${delimiter}59${maxSeconds}` : `11${delimiter}59${maxSeconds} PM`;
    }
    const timeRegex = this.getRegExp();
    this.state = {
      isInvalid: false,
      isTimeOptionsOpen: isOpen,
      timeState: parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds),
      focusedIndex: null,
      scrollIndex: 0,
      timeRegex,
      minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds),
      maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)
    };
  }
  componentDidMount() {
    document.addEventListener("mousedown", this.onDocClick);
    document.addEventListener("touchstart", this.onDocClick);
    document.addEventListener("keydown", this.handleGlobalKeys);
    this.setState({ isInvalid: !this.isValid(this.state.timeState) });
  }
  componentWillUnmount() {
    document.removeEventListener("mousedown", this.onDocClick);
    document.removeEventListener("touchstart", this.onDocClick);
    document.removeEventListener("keydown", this.handleGlobalKeys);
  }
  componentDidUpdate(prevProps, prevState) {
    const { timeState, isTimeOptionsOpen, isInvalid, timeRegex } = this.state;
    const { time, is24Hour, delimiter, includeSeconds, isOpen, minTime, maxTime } = this.props;
    if (prevProps.isOpen !== isOpen) {
      this.onToggle(isOpen);
    }
    if (isTimeOptionsOpen && !prevState.isTimeOptionsOpen && timeState && !isInvalid) {
      this.scrollToSelection(timeState);
    }
    if (delimiter !== prevProps.delimiter) {
      this.setState({
        timeRegex: this.getRegExp()
      });
    }
    if (time !== "" && time !== prevProps.time) {
      const parsedTime = parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds);
      this.setState({
        timeState: parsedTime,
        isInvalid: !this.isValid(parsedTime)
      });
    }
    if (minTime !== "" && minTime !== prevProps.minTime) {
      this.setState({
        minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds)
      });
    }
    if (maxTime !== "" && maxTime !== prevProps.maxTime) {
      this.setState({
        maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)
      });
    }
  }
  render() {
    const _a = this.props, {
      "aria-label": ariaLabel,
      isDisabled,
      className,
      placeholder,
      id,
      menuAppendTo,
      is24Hour,
      invalidFormatErrorMessage,
      invalidMinMaxErrorMessage,
      stepMinutes,
      width,
      delimiter,
      inputProps,
      /* eslint-disable @typescript-eslint/no-unused-vars */
      onChange,
      /* eslint-disable @typescript-eslint/no-unused-vars */
      setIsOpen,
      /* eslint-disable @typescript-eslint/no-unused-vars */
      isOpen,
      time,
      validateTime: validateTime2,
      minTime,
      maxTime,
      includeSeconds,
      zIndex
    } = _a, props = __rest(_a, ["aria-label", "isDisabled", "className", "placeholder", "id", "menuAppendTo", "is24Hour", "invalidFormatErrorMessage", "invalidMinMaxErrorMessage", "stepMinutes", "width", "delimiter", "inputProps", "onChange", "setIsOpen", "isOpen", "time", "validateTime", "minTime", "maxTime", "includeSeconds", "zIndex"]);
    const { timeState, isTimeOptionsOpen, isInvalid, minTimeState, maxTimeState } = this.state;
    const style = { [c_date_picker_input_c_form_control_Width_default.name]: width };
    const options = makeTimeOptions(stepMinutes, !is24Hour, delimiter, minTimeState, maxTimeState, includeSeconds);
    const isValidFormat = this.isValidFormat(timeState);
    const randomId = id || getUniqueId("time-picker");
    const getParentElement = () => {
      if (this.baseComponentRef && this.baseComponentRef.current) {
        return this.baseComponentRef.current.parentElement;
      }
      return null;
    };
    const menuContainer = (0, import_jsx_runtime241.jsx)(Menu, { ref: this.menuRef, isScrollable: true, children: (0, import_jsx_runtime241.jsx)(MenuContent, { maxMenuHeight: "200px", children: (0, import_jsx_runtime241.jsx)(MenuList, { "aria-label": ariaLabel, children: options.map((option, index) => (0, import_jsx_runtime241.jsx)(MenuItem, { onClick: this.onSelect, id: `${randomId}-option-${index}`, children: option }, option)) }) }) });
    const textInput = (0, import_jsx_runtime241.jsx)(TextInput, Object.assign({ "aria-haspopup": "menu", id: `${randomId}-input`, "aria-label": ariaLabel, validated: isInvalid ? "error" : "default", placeholder, value: timeState || "", type: "text", customIcon: (0, import_jsx_runtime241.jsx)(outlined_clock_icon_default, {}), onClick: this.onInputClick, onChange: this.onInputChange, autoComplete: "off", isDisabled, isExpanded: isTimeOptionsOpen, ref: this.inputRef }, inputProps));
    let calculatedAppendTo;
    switch (menuAppendTo) {
      case "inline":
        calculatedAppendTo = () => this.toggleRef.current;
        break;
      case "parent":
        calculatedAppendTo = getParentElement;
        break;
      default:
        calculatedAppendTo = menuAppendTo;
    }
    return (0, import_jsx_runtime241.jsx)("div", { ref: this.baseComponentRef, className: css(date_picker_default.datePicker, className), children: (0, import_jsx_runtime241.jsxs)("div", Object.assign({ className: css(date_picker_default.datePickerInput), style }, props, { children: [(0, import_jsx_runtime241.jsx)(InputGroup, { children: (0, import_jsx_runtime241.jsx)(InputGroupItem, { children: (0, import_jsx_runtime241.jsx)("div", { id: randomId, children: (0, import_jsx_runtime241.jsx)("div", { ref: this.toggleRef, style: { paddingLeft: "0" }, children: (0, import_jsx_runtime241.jsx)(Popper, { appendTo: calculatedAppendTo, trigger: textInput, triggerRef: this.toggleRef, popper: menuContainer, popperRef: this.menuRef, isVisible: isTimeOptionsOpen, zIndex }) }) }) }) }), isInvalid && (0, import_jsx_runtime241.jsx)("div", { className: css(date_picker_default.datePickerHelperText), children: (0, import_jsx_runtime241.jsx)(HelperText, { children: (0, import_jsx_runtime241.jsx)(HelperTextItem, { variant: "error", children: !isValidFormat ? invalidFormatErrorMessage : invalidMinMaxErrorMessage }) }) })] })) });
  }
};
TimePicker.displayName = "TimePicker";
TimePicker.defaultProps = {
  className: "",
  isDisabled: false,
  time: "",
  is24Hour: false,
  invalidFormatErrorMessage: "Invalid time format",
  invalidMinMaxErrorMessage: "Invalid time entered",
  placeholder: "hh:mm",
  delimiter: ":",
  "aria-label": "Time picker",
  width: "150px",
  menuAppendTo: "inline",
  stepMinutes: 30,
  inputProps: {},
  minTime: "",
  maxTime: "",
  isOpen: false,
  setIsOpen: () => {
  },
  zIndex: 9999
};

// node_modules/@patternfly/react-core/dist/esm/components/Timestamp/Timestamp.js
var import_jsx_runtime242 = __toESM(require_jsx_runtime());
var import_react106 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Timestamp/timestamp.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Timestamp/timestamp.css";
var timestamp_default = {
  "modifiers": {
    "helpText": "pf-m-help-text"
  },
  "timestamp": "pf-v6-c-timestamp",
  "timestampText": "pf-v6-c-timestamp__text"
};

// node_modules/@patternfly/react-core/dist/esm/components/Timestamp/Timestamp.js
var TimestampFormat;
(function(TimestampFormat2) {
  TimestampFormat2["full"] = "full";
  TimestampFormat2["long"] = "long";
  TimestampFormat2["medium"] = "medium";
  TimestampFormat2["short"] = "short";
})(TimestampFormat || (TimestampFormat = {}));
var TimestampTooltipVariant;
(function(TimestampTooltipVariant2) {
  TimestampTooltipVariant2["default"] = "default";
  TimestampTooltipVariant2["custom"] = "custom";
})(TimestampTooltipVariant || (TimestampTooltipVariant = {}));
var Timestamp = (_a) => {
  var { children, className, customFormat, date: dateProp, dateFormat, displaySuffix = "", is12Hour, locale, shouldDisplayUTC, timeFormat, tooltip } = _a, props = __rest(_a, ["children", "className", "customFormat", "date", "dateFormat", "displaySuffix", "is12Hour", "locale", "shouldDisplayUTC", "timeFormat", "tooltip"]);
  const [date, setDate] = (0, import_react106.useState)(() => {
    const initDate = new Date(dateProp);
    if (isValidDate(initDate)) {
      return initDate;
    }
    return /* @__PURE__ */ new Date();
  });
  (0, import_react106.useEffect)(() => {
    const dateFromProp = new Date(dateProp);
    if (isValidDate(dateFromProp) && dateFromProp.toString() !== new Date(date).toString()) {
      setDate(dateFromProp);
    } else if (!dateProp) {
      setDate(/* @__PURE__ */ new Date());
    }
  }, [dateProp]);
  const hasTimeFormat = timeFormat && !customFormat;
  const formatOptions = Object.assign(Object.assign(Object.assign({}, dateFormat && !customFormat && { dateStyle: dateFormat }), customFormat && Object.assign({}, customFormat)), is12Hour !== void 0 && { hour12: is12Hour });
  const dateAsLocaleString = new Date(date).toLocaleString(locale, Object.assign(Object.assign({}, formatOptions), hasTimeFormat && { timeStyle: timeFormat }));
  const utcTimeFormat = timeFormat !== "short" ? "medium" : "short";
  const convertToUTCString = (date2) => new Date(date2).toUTCString().slice(0, -3);
  const utcDateString = new Date(convertToUTCString(date)).toLocaleString(locale, Object.assign(Object.assign({}, formatOptions), hasTimeFormat && { timeStyle: utcTimeFormat }));
  const defaultUTCSuffix = timeFormat === "full" ? "Coordinated Universal Time" : "UTC";
  const createUTCContent = (customSuffix) => `${utcDateString} ${customSuffix ? customSuffix : defaultUTCSuffix}`;
  const defaultDisplay = shouldDisplayUTC ? createUTCContent(displaySuffix) : `${dateAsLocaleString}${displaySuffix ? " " + displaySuffix : ""}`;
  const { dateTime } = props, propsWithoutDateTime = __rest(props, ["dateTime"]);
  const timestamp = (0, import_jsx_runtime242.jsx)("span", Object.assign({ className: css(timestamp_default.timestamp, tooltip && timestamp_default.modifiers.helpText, className) }, tooltip && { tabIndex: 0 }, propsWithoutDateTime, { children: (0, import_jsx_runtime242.jsx)("time", { className: `${timestamp_default.timestamp}__text`, dateTime: dateTime || new Date(date).toISOString(), children: !children ? defaultDisplay : children }) }));
  return tooltip ? (0, import_jsx_runtime242.jsx)(Tooltip, Object.assign({ content: tooltip.variant === TimestampTooltipVariant.default ? createUTCContent(tooltip.suffix) : tooltip.content }, tooltip.tooltipProps, { children: timestamp })) : timestamp;
};
Timestamp.displayName = "Timestamp";

// node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroup.js
var import_jsx_runtime245 = __toESM(require_jsx_runtime());
var import_react107 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/ToggleGroup/toggle-group.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/ToggleGroup/toggle-group.css";
var toggle_group_default = {
  "modifiers": {
    "compact": "pf-m-compact",
    "selected": "pf-m-selected",
    "disabled": "pf-m-disabled"
  },
  "toggleGroup": "pf-v6-c-toggle-group",
  "toggleGroupButton": "pf-v6-c-toggle-group__button",
  "toggleGroupIcon": "pf-v6-c-toggle-group__icon",
  "toggleGroupItem": "pf-v6-c-toggle-group__item",
  "toggleGroupText": "pf-v6-c-toggle-group__text"
};

// node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroupItem.js
var import_jsx_runtime244 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroupItemElement.js
var import_jsx_runtime243 = __toESM(require_jsx_runtime());
var ToggleGroupItemVariant;
(function(ToggleGroupItemVariant2) {
  ToggleGroupItemVariant2["icon"] = "icon";
  ToggleGroupItemVariant2["text"] = "text";
})(ToggleGroupItemVariant || (ToggleGroupItemVariant = {}));
var ToggleGroupItemElement = ({ variant, children }) => (0, import_jsx_runtime243.jsx)("span", { className: css(variant === "icon" && toggle_group_default.toggleGroupIcon, variant === "text" && toggle_group_default.toggleGroupText), children });
ToggleGroupItemElement.displayName = "ToggleGroupItemElement";

// node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroupItem.js
var ToggleGroupItem = (_a) => {
  var { text, icon, iconPosition = "start", className, isDisabled = false, isSelected = false, "aria-label": ariaLabel, onChange = () => {
  }, buttonId } = _a, props = __rest(_a, ["text", "icon", "iconPosition", "className", "isDisabled", "isSelected", "aria-label", "onChange", "buttonId"]);
  const handleChange = (event) => {
    onChange(event, !isSelected);
  };
  if (!ariaLabel && icon && !text) {
    console.warn("An accessible aria-label is required when using the toggle group item icon variant.");
  }
  const toggleGroupIcon = (0, import_jsx_runtime244.jsx)(ToggleGroupItemElement, { variant: ToggleGroupItemVariant.icon, children: icon });
  return (0, import_jsx_runtime244.jsx)("div", Object.assign({ className: css(toggle_group_default.toggleGroupItem, className) }, props, { children: (0, import_jsx_runtime244.jsxs)("button", { type: "button", className: css(toggle_group_default.toggleGroupButton, isSelected && toggle_group_default.modifiers.selected), "aria-pressed": isSelected, onClick: handleChange, "aria-label": ariaLabel, disabled: isDisabled, id: buttonId, children: [icon && iconPosition === "start" && toggleGroupIcon, text && (0, import_jsx_runtime244.jsx)(ToggleGroupItemElement, { variant: ToggleGroupItemVariant.text, children: text }), icon && iconPosition === "end" && toggleGroupIcon] }) }));
};
ToggleGroupItem.displayName = "ToggleGroupItem";

// node_modules/@patternfly/react-core/dist/esm/components/ToggleGroup/ToggleGroup.js
var ToggleGroup = (_a) => {
  var { className, children, isCompact = false, areAllGroupsDisabled = false, "aria-label": ariaLabel } = _a, props = __rest(_a, ["className", "children", "isCompact", "areAllGroupsDisabled", "aria-label"]);
  const toggleGroupItemList = import_react107.Children.map(children, (child) => !((0, import_react107.isValidElement)(child) && child.type === ToggleGroupItem) ? child : (0, import_react107.cloneElement)(child, areAllGroupsDisabled ? { isDisabled: true } : {}));
  return (0, import_jsx_runtime245.jsx)("div", Object.assign({ className: css(toggle_group_default.toggleGroup, isCompact && toggle_group_default.modifiers.compact, className), role: "group", "aria-label": ariaLabel }, props, { children: toggleGroupItemList }));
};
ToggleGroup.displayName = "ToggleGroup";

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/Toolbar.js
var import_jsx_runtime249 = __toESM(require_jsx_runtime());
var import_react111 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Toolbar/toolbar.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Toolbar/toolbar.css";
var toolbar_default = {
  "dirRtl": "pf-v6-m-dir-rtl",
  "modifiers": {
    "hidden": "pf-m-hidden",
    "hiddenOnSm": "pf-m-hidden-on-sm",
    "visibleOnSm": "pf-m-visible-on-sm",
    "hiddenOnMd": "pf-m-hidden-on-md",
    "visibleOnMd": "pf-m-visible-on-md",
    "hiddenOnLg": "pf-m-hidden-on-lg",
    "visibleOnLg": "pf-m-visible-on-lg",
    "hiddenOnXl": "pf-m-hidden-on-xl",
    "visibleOnXl": "pf-m-visible-on-xl",
    "hiddenOn_2xl": "pf-m-hidden-on-2xl",
    "visibleOn_2xl": "pf-m-visible-on-2xl",
    "sticky": "pf-m-sticky",
    "static": "pf-m-static",
    "fullHeight": "pf-m-full-height",
    "noPadding": "pf-m-no-padding",
    "primary": "pf-m-primary",
    "secondary": "pf-m-secondary",
    "noBackground": "pf-m-no-background",
    "expandAll": "pf-m-expand-all",
    "expanded": "pf-m-expanded",
    "label": "pf-m-label",
    "pagination": "pf-m-pagination",
    "overflowContainer": "pf-m-overflow-container",
    "filterGroup": "pf-m-filter-group",
    "labelGroup": "pf-m-label-group",
    "actionGroup": "pf-m-action-group",
    "actionGroupPlain": "pf-m-action-group-plain",
    "actionGroupInline": "pf-m-action-group-inline",
    "alignStart": "pf-m-align-start",
    "alignCenter": "pf-m-align-center",
    "alignEnd": "pf-m-align-end",
    "flexGrow": "pf-m-flex-grow",
    "alignSelfStretch": "pf-m-align-self-stretch",
    "alignSelfBaseline": "pf-m-align-self-baseline",
    "alignSelfStart": "pf-m-align-self-start",
    "alignSelfCenter": "pf-m-align-self-center",
    "alignSelfEnd": "pf-m-align-self-end",
    "insetNone": "pf-m-inset-none",
    "insetXs": "pf-m-inset-xs",
    "insetSm": "pf-m-inset-sm",
    "insetMd": "pf-m-inset-md",
    "insetLg": "pf-m-inset-lg",
    "insetXl": "pf-m-inset-xl",
    "inset_2xl": "pf-m-inset-2xl",
    "inset_3xl": "pf-m-inset-3xl",
    "inset_4xl": "pf-m-inset-4xl",
    "wrap": "pf-m-wrap",
    "nowrap": "pf-m-nowrap",
    "alignItemsStretch": "pf-m-align-items-stretch",
    "alignItemsBaseline": "pf-m-align-items-baseline",
    "alignItemsStart": "pf-m-align-items-start",
    "alignItemsCenter": "pf-m-align-items-center",
    "alignItemsEnd": "pf-m-align-items-end",
    "gapNone": "pf-m-gap-none",
    "gapXs": "pf-m-gap-xs",
    "gapSm": "pf-m-gap-sm",
    "gapMd": "pf-m-gap-md",
    "gapLg": "pf-m-gap-lg",
    "gapXl": "pf-m-gap-xl",
    "gap_2xl": "pf-m-gap-2xl",
    "gap_3xl": "pf-m-gap-3xl",
    "gap_4xl": "pf-m-gap-4xl",
    "columnGapNone": "pf-m-column-gap-none",
    "rowGapNone": "pf-m-row-gap-none",
    "columnGapXs": "pf-m-column-gap-xs",
    "rowGapXs": "pf-m-row-gap-xs",
    "columnGapSm": "pf-m-column-gap-sm",
    "rowGapSm": "pf-m-row-gap-sm",
    "columnGapMd": "pf-m-column-gap-md",
    "rowGapMd": "pf-m-row-gap-md",
    "columnGapLg": "pf-m-column-gap-lg",
    "rowGapLg": "pf-m-row-gap-lg",
    "columnGapXl": "pf-m-column-gap-xl",
    "rowGapXl": "pf-m-row-gap-xl",
    "columnGap_2xl": "pf-m-column-gap-2xl",
    "rowGap_2xl": "pf-m-row-gap-2xl",
    "columnGap_3xl": "pf-m-column-gap-3xl",
    "rowGap_3xl": "pf-m-row-gap-3xl",
    "columnGap_4xl": "pf-m-column-gap-4xl",
    "rowGap_4xl": "pf-m-row-gap-4xl",
    "toggleGroup": "pf-m-toggle-group",
    "show": "pf-m-show",
    "hide": "pf-m-hide",
    "alignStartOnSm": "pf-m-align-start-on-sm",
    "alignCenterOnSm": "pf-m-align-center-on-sm",
    "alignEndOnSm": "pf-m-align-end-on-sm",
    "flexGrowOnSm": "pf-m-flex-grow-on-sm",
    "alignSelfStretchOnSm": "pf-m-align-self-stretch-on-sm",
    "alignSelfBaselineOnSm": "pf-m-align-self-baseline-on-sm",
    "alignSelfStartOnSm": "pf-m-align-self-start-on-sm",
    "alignSelfCenterOnSm": "pf-m-align-self-center-on-sm",
    "alignSelfEndOnSm": "pf-m-align-self-end-on-sm",
    "insetNoneOnSm": "pf-m-inset-none-on-sm",
    "insetXsOnSm": "pf-m-inset-xs-on-sm",
    "insetSmOnSm": "pf-m-inset-sm-on-sm",
    "insetMdOnSm": "pf-m-inset-md-on-sm",
    "insetLgOnSm": "pf-m-inset-lg-on-sm",
    "insetXlOnSm": "pf-m-inset-xl-on-sm",
    "inset_2xlOnSm": "pf-m-inset-2xl-on-sm",
    "inset_3xlOnSm": "pf-m-inset-3xl-on-sm",
    "inset_4xlOnSm": "pf-m-inset-4xl-on-sm",
    "wrapOnSm": "pf-m-wrap-on-sm",
    "nowrapOnSm": "pf-m-nowrap-on-sm",
    "alignItemsStretchOnSm": "pf-m-align-items-stretch-on-sm",
    "alignItemsBaselineOnSm": "pf-m-align-items-baseline-on-sm",
    "alignItemsStartOnSm": "pf-m-align-items-start-on-sm",
    "alignItemsCenterOnSm": "pf-m-align-items-center-on-sm",
    "alignItemsEndOnSm": "pf-m-align-items-end-on-sm",
    "gapNoneOnSm": "pf-m-gap-none-on-sm",
    "gapXsOnSm": "pf-m-gap-xs-on-sm",
    "gapSmOnSm": "pf-m-gap-sm-on-sm",
    "gapMdOnSm": "pf-m-gap-md-on-sm",
    "gapLgOnSm": "pf-m-gap-lg-on-sm",
    "gapXlOnSm": "pf-m-gap-xl-on-sm",
    "gap_2xlOnSm": "pf-m-gap-2xl-on-sm",
    "gap_3xlOnSm": "pf-m-gap-3xl-on-sm",
    "gap_4xlOnSm": "pf-m-gap-4xl-on-sm",
    "columnGapNoneOnSm": "pf-m-column-gap-none-on-sm",
    "rowGapNoneOnSm": "pf-m-row-gap-none-on-sm",
    "columnGapXsOnSm": "pf-m-column-gap-xs-on-sm",
    "rowGapXsOnSm": "pf-m-row-gap-xs-on-sm",
    "columnGapSmOnSm": "pf-m-column-gap-sm-on-sm",
    "rowGapSmOnSm": "pf-m-row-gap-sm-on-sm",
    "columnGapMdOnSm": "pf-m-column-gap-md-on-sm",
    "rowGapMdOnSm": "pf-m-row-gap-md-on-sm",
    "columnGapLgOnSm": "pf-m-column-gap-lg-on-sm",
    "rowGapLgOnSm": "pf-m-row-gap-lg-on-sm",
    "columnGapXlOnSm": "pf-m-column-gap-xl-on-sm",
    "rowGapXlOnSm": "pf-m-row-gap-xl-on-sm",
    "columnGap_2xlOnSm": "pf-m-column-gap-2xl-on-sm",
    "rowGap_2xlOnSm": "pf-m-row-gap-2xl-on-sm",
    "columnGap_3xlOnSm": "pf-m-column-gap-3xl-on-sm",
    "rowGap_3xlOnSm": "pf-m-row-gap-3xl-on-sm",
    "columnGap_4xlOnSm": "pf-m-column-gap-4xl-on-sm",
    "rowGap_4xlOnSm": "pf-m-row-gap-4xl-on-sm",
    "showOnSm": "pf-m-show-on-sm",
    "hideOnSm": "pf-m-hide-on-sm",
    "alignStartOnMd": "pf-m-align-start-on-md",
    "alignCenterOnMd": "pf-m-align-center-on-md",
    "alignEndOnMd": "pf-m-align-end-on-md",
    "flexGrowOnMd": "pf-m-flex-grow-on-md",
    "alignSelfStretchOnMd": "pf-m-align-self-stretch-on-md",
    "alignSelfBaselineOnMd": "pf-m-align-self-baseline-on-md",
    "alignSelfStartOnMd": "pf-m-align-self-start-on-md",
    "alignSelfCenterOnMd": "pf-m-align-self-center-on-md",
    "alignSelfEndOnMd": "pf-m-align-self-end-on-md",
    "insetNoneOnMd": "pf-m-inset-none-on-md",
    "insetXsOnMd": "pf-m-inset-xs-on-md",
    "insetSmOnMd": "pf-m-inset-sm-on-md",
    "insetMdOnMd": "pf-m-inset-md-on-md",
    "insetLgOnMd": "pf-m-inset-lg-on-md",
    "insetXlOnMd": "pf-m-inset-xl-on-md",
    "inset_2xlOnMd": "pf-m-inset-2xl-on-md",
    "inset_3xlOnMd": "pf-m-inset-3xl-on-md",
    "inset_4xlOnMd": "pf-m-inset-4xl-on-md",
    "wrapOnMd": "pf-m-wrap-on-md",
    "nowrapOnMd": "pf-m-nowrap-on-md",
    "alignItemsStretchOnMd": "pf-m-align-items-stretch-on-md",
    "alignItemsBaselineOnMd": "pf-m-align-items-baseline-on-md",
    "alignItemsStartOnMd": "pf-m-align-items-start-on-md",
    "alignItemsCenterOnMd": "pf-m-align-items-center-on-md",
    "alignItemsEndOnMd": "pf-m-align-items-end-on-md",
    "gapNoneOnMd": "pf-m-gap-none-on-md",
    "gapXsOnMd": "pf-m-gap-xs-on-md",
    "gapSmOnMd": "pf-m-gap-sm-on-md",
    "gapMdOnMd": "pf-m-gap-md-on-md",
    "gapLgOnMd": "pf-m-gap-lg-on-md",
    "gapXlOnMd": "pf-m-gap-xl-on-md",
    "gap_2xlOnMd": "pf-m-gap-2xl-on-md",
    "gap_3xlOnMd": "pf-m-gap-3xl-on-md",
    "gap_4xlOnMd": "pf-m-gap-4xl-on-md",
    "columnGapNoneOnMd": "pf-m-column-gap-none-on-md",
    "rowGapNoneOnMd": "pf-m-row-gap-none-on-md",
    "columnGapXsOnMd": "pf-m-column-gap-xs-on-md",
    "rowGapXsOnMd": "pf-m-row-gap-xs-on-md",
    "columnGapSmOnMd": "pf-m-column-gap-sm-on-md",
    "rowGapSmOnMd": "pf-m-row-gap-sm-on-md",
    "columnGapMdOnMd": "pf-m-column-gap-md-on-md",
    "rowGapMdOnMd": "pf-m-row-gap-md-on-md",
    "columnGapLgOnMd": "pf-m-column-gap-lg-on-md",
    "rowGapLgOnMd": "pf-m-row-gap-lg-on-md",
    "columnGapXlOnMd": "pf-m-column-gap-xl-on-md",
    "rowGapXlOnMd": "pf-m-row-gap-xl-on-md",
    "columnGap_2xlOnMd": "pf-m-column-gap-2xl-on-md",
    "rowGap_2xlOnMd": "pf-m-row-gap-2xl-on-md",
    "columnGap_3xlOnMd": "pf-m-column-gap-3xl-on-md",
    "rowGap_3xlOnMd": "pf-m-row-gap-3xl-on-md",
    "columnGap_4xlOnMd": "pf-m-column-gap-4xl-on-md",
    "rowGap_4xlOnMd": "pf-m-row-gap-4xl-on-md",
    "showOnMd": "pf-m-show-on-md",
    "hideOnMd": "pf-m-hide-on-md",
    "alignStartOnLg": "pf-m-align-start-on-lg",
    "alignCenterOnLg": "pf-m-align-center-on-lg",
    "alignEndOnLg": "pf-m-align-end-on-lg",
    "flexGrowOnLg": "pf-m-flex-grow-on-lg",
    "alignSelfStretchOnLg": "pf-m-align-self-stretch-on-lg",
    "alignSelfBaselineOnLg": "pf-m-align-self-baseline-on-lg",
    "alignSelfStartOnLg": "pf-m-align-self-start-on-lg",
    "alignSelfCenterOnLg": "pf-m-align-self-center-on-lg",
    "alignSelfEndOnLg": "pf-m-align-self-end-on-lg",
    "insetNoneOnLg": "pf-m-inset-none-on-lg",
    "insetXsOnLg": "pf-m-inset-xs-on-lg",
    "insetSmOnLg": "pf-m-inset-sm-on-lg",
    "insetMdOnLg": "pf-m-inset-md-on-lg",
    "insetLgOnLg": "pf-m-inset-lg-on-lg",
    "insetXlOnLg": "pf-m-inset-xl-on-lg",
    "inset_2xlOnLg": "pf-m-inset-2xl-on-lg",
    "inset_3xlOnLg": "pf-m-inset-3xl-on-lg",
    "inset_4xlOnLg": "pf-m-inset-4xl-on-lg",
    "wrapOnLg": "pf-m-wrap-on-lg",
    "nowrapOnLg": "pf-m-nowrap-on-lg",
    "alignItemsStretchOnLg": "pf-m-align-items-stretch-on-lg",
    "alignItemsBaselineOnLg": "pf-m-align-items-baseline-on-lg",
    "alignItemsStartOnLg": "pf-m-align-items-start-on-lg",
    "alignItemsCenterOnLg": "pf-m-align-items-center-on-lg",
    "alignItemsEndOnLg": "pf-m-align-items-end-on-lg",
    "gapNoneOnLg": "pf-m-gap-none-on-lg",
    "gapXsOnLg": "pf-m-gap-xs-on-lg",
    "gapSmOnLg": "pf-m-gap-sm-on-lg",
    "gapMdOnLg": "pf-m-gap-md-on-lg",
    "gapLgOnLg": "pf-m-gap-lg-on-lg",
    "gapXlOnLg": "pf-m-gap-xl-on-lg",
    "gap_2xlOnLg": "pf-m-gap-2xl-on-lg",
    "gap_3xlOnLg": "pf-m-gap-3xl-on-lg",
    "gap_4xlOnLg": "pf-m-gap-4xl-on-lg",
    "columnGapNoneOnLg": "pf-m-column-gap-none-on-lg",
    "rowGapNoneOnLg": "pf-m-row-gap-none-on-lg",
    "columnGapXsOnLg": "pf-m-column-gap-xs-on-lg",
    "rowGapXsOnLg": "pf-m-row-gap-xs-on-lg",
    "columnGapSmOnLg": "pf-m-column-gap-sm-on-lg",
    "rowGapSmOnLg": "pf-m-row-gap-sm-on-lg",
    "columnGapMdOnLg": "pf-m-column-gap-md-on-lg",
    "rowGapMdOnLg": "pf-m-row-gap-md-on-lg",
    "columnGapLgOnLg": "pf-m-column-gap-lg-on-lg",
    "rowGapLgOnLg": "pf-m-row-gap-lg-on-lg",
    "columnGapXlOnLg": "pf-m-column-gap-xl-on-lg",
    "rowGapXlOnLg": "pf-m-row-gap-xl-on-lg",
    "columnGap_2xlOnLg": "pf-m-column-gap-2xl-on-lg",
    "rowGap_2xlOnLg": "pf-m-row-gap-2xl-on-lg",
    "columnGap_3xlOnLg": "pf-m-column-gap-3xl-on-lg",
    "rowGap_3xlOnLg": "pf-m-row-gap-3xl-on-lg",
    "columnGap_4xlOnLg": "pf-m-column-gap-4xl-on-lg",
    "rowGap_4xlOnLg": "pf-m-row-gap-4xl-on-lg",
    "showOnLg": "pf-m-show-on-lg",
    "hideOnLg": "pf-m-hide-on-lg",
    "alignStartOnXl": "pf-m-align-start-on-xl",
    "alignCenterOnXl": "pf-m-align-center-on-xl",
    "alignEndOnXl": "pf-m-align-end-on-xl",
    "flexGrowOnXl": "pf-m-flex-grow-on-xl",
    "alignSelfStretchOnXl": "pf-m-align-self-stretch-on-xl",
    "alignSelfBaselineOnXl": "pf-m-align-self-baseline-on-xl",
    "alignSelfStartOnXl": "pf-m-align-self-start-on-xl",
    "alignSelfCenterOnXl": "pf-m-align-self-center-on-xl",
    "alignSelfEndOnXl": "pf-m-align-self-end-on-xl",
    "insetNoneOnXl": "pf-m-inset-none-on-xl",
    "insetXsOnXl": "pf-m-inset-xs-on-xl",
    "insetSmOnXl": "pf-m-inset-sm-on-xl",
    "insetMdOnXl": "pf-m-inset-md-on-xl",
    "insetLgOnXl": "pf-m-inset-lg-on-xl",
    "insetXlOnXl": "pf-m-inset-xl-on-xl",
    "inset_2xlOnXl": "pf-m-inset-2xl-on-xl",
    "inset_3xlOnXl": "pf-m-inset-3xl-on-xl",
    "inset_4xlOnXl": "pf-m-inset-4xl-on-xl",
    "wrapOnXl": "pf-m-wrap-on-xl",
    "nowrapOnXl": "pf-m-nowrap-on-xl",
    "alignItemsStretchOnXl": "pf-m-align-items-stretch-on-xl",
    "alignItemsBaselineOnXl": "pf-m-align-items-baseline-on-xl",
    "alignItemsStartOnXl": "pf-m-align-items-start-on-xl",
    "alignItemsCenterOnXl": "pf-m-align-items-center-on-xl",
    "alignItemsEndOnXl": "pf-m-align-items-end-on-xl",
    "gapNoneOnXl": "pf-m-gap-none-on-xl",
    "gapXsOnXl": "pf-m-gap-xs-on-xl",
    "gapSmOnXl": "pf-m-gap-sm-on-xl",
    "gapMdOnXl": "pf-m-gap-md-on-xl",
    "gapLgOnXl": "pf-m-gap-lg-on-xl",
    "gapXlOnXl": "pf-m-gap-xl-on-xl",
    "gap_2xlOnXl": "pf-m-gap-2xl-on-xl",
    "gap_3xlOnXl": "pf-m-gap-3xl-on-xl",
    "gap_4xlOnXl": "pf-m-gap-4xl-on-xl",
    "columnGapNoneOnXl": "pf-m-column-gap-none-on-xl",
    "rowGapNoneOnXl": "pf-m-row-gap-none-on-xl",
    "columnGapXsOnXl": "pf-m-column-gap-xs-on-xl",
    "rowGapXsOnXl": "pf-m-row-gap-xs-on-xl",
    "columnGapSmOnXl": "pf-m-column-gap-sm-on-xl",
    "rowGapSmOnXl": "pf-m-row-gap-sm-on-xl",
    "columnGapMdOnXl": "pf-m-column-gap-md-on-xl",
    "rowGapMdOnXl": "pf-m-row-gap-md-on-xl",
    "columnGapLgOnXl": "pf-m-column-gap-lg-on-xl",
    "rowGapLgOnXl": "pf-m-row-gap-lg-on-xl",
    "columnGapXlOnXl": "pf-m-column-gap-xl-on-xl",
    "rowGapXlOnXl": "pf-m-row-gap-xl-on-xl",
    "columnGap_2xlOnXl": "pf-m-column-gap-2xl-on-xl",
    "rowGap_2xlOnXl": "pf-m-row-gap-2xl-on-xl",
    "columnGap_3xlOnXl": "pf-m-column-gap-3xl-on-xl",
    "rowGap_3xlOnXl": "pf-m-row-gap-3xl-on-xl",
    "columnGap_4xlOnXl": "pf-m-column-gap-4xl-on-xl",
    "rowGap_4xlOnXl": "pf-m-row-gap-4xl-on-xl",
    "showOnXl": "pf-m-show-on-xl",
    "hideOnXl": "pf-m-hide-on-xl",
    "alignStartOn_2xl": "pf-m-align-start-on-2xl",
    "alignCenterOn_2xl": "pf-m-align-center-on-2xl",
    "alignEndOn_2xl": "pf-m-align-end-on-2xl",
    "flexGrowOn_2xl": "pf-m-flex-grow-on-2xl",
    "alignSelfStretchOn_2xl": "pf-m-align-self-stretch-on-2xl",
    "alignSelfBaselineOn_2xl": "pf-m-align-self-baseline-on-2xl",
    "alignSelfStartOn_2xl": "pf-m-align-self-start-on-2xl",
    "alignSelfCenterOn_2xl": "pf-m-align-self-center-on-2xl",
    "alignSelfEndOn_2xl": "pf-m-align-self-end-on-2xl",
    "insetNoneOn_2xl": "pf-m-inset-none-on-2xl",
    "insetXsOn_2xl": "pf-m-inset-xs-on-2xl",
    "insetSmOn_2xl": "pf-m-inset-sm-on-2xl",
    "insetMdOn_2xl": "pf-m-inset-md-on-2xl",
    "insetLgOn_2xl": "pf-m-inset-lg-on-2xl",
    "insetXlOn_2xl": "pf-m-inset-xl-on-2xl",
    "inset_2xlOn_2xl": "pf-m-inset-2xl-on-2xl",
    "inset_3xlOn_2xl": "pf-m-inset-3xl-on-2xl",
    "inset_4xlOn_2xl": "pf-m-inset-4xl-on-2xl",
    "wrapOn_2xl": "pf-m-wrap-on-2xl",
    "nowrapOn_2xl": "pf-m-nowrap-on-2xl",
    "alignItemsStretchOn_2xl": "pf-m-align-items-stretch-on-2xl",
    "alignItemsBaselineOn_2xl": "pf-m-align-items-baseline-on-2xl",
    "alignItemsStartOn_2xl": "pf-m-align-items-start-on-2xl",
    "alignItemsCenterOn_2xl": "pf-m-align-items-center-on-2xl",
    "alignItemsEndOn_2xl": "pf-m-align-items-end-on-2xl",
    "gapNoneOn_2xl": "pf-m-gap-none-on-2xl",
    "gapXsOn_2xl": "pf-m-gap-xs-on-2xl",
    "gapSmOn_2xl": "pf-m-gap-sm-on-2xl",
    "gapMdOn_2xl": "pf-m-gap-md-on-2xl",
    "gapLgOn_2xl": "pf-m-gap-lg-on-2xl",
    "gapXlOn_2xl": "pf-m-gap-xl-on-2xl",
    "gap_2xlOn_2xl": "pf-m-gap-2xl-on-2xl",
    "gap_3xlOn_2xl": "pf-m-gap-3xl-on-2xl",
    "gap_4xlOn_2xl": "pf-m-gap-4xl-on-2xl",
    "columnGapNoneOn_2xl": "pf-m-column-gap-none-on-2xl",
    "rowGapNoneOn_2xl": "pf-m-row-gap-none-on-2xl",
    "columnGapXsOn_2xl": "pf-m-column-gap-xs-on-2xl",
    "rowGapXsOn_2xl": "pf-m-row-gap-xs-on-2xl",
    "columnGapSmOn_2xl": "pf-m-column-gap-sm-on-2xl",
    "rowGapSmOn_2xl": "pf-m-row-gap-sm-on-2xl",
    "columnGapMdOn_2xl": "pf-m-column-gap-md-on-2xl",
    "rowGapMdOn_2xl": "pf-m-row-gap-md-on-2xl",
    "columnGapLgOn_2xl": "pf-m-column-gap-lg-on-2xl",
    "rowGapLgOn_2xl": "pf-m-row-gap-lg-on-2xl",
    "columnGapXlOn_2xl": "pf-m-column-gap-xl-on-2xl",
    "rowGapXlOn_2xl": "pf-m-row-gap-xl-on-2xl",
    "columnGap_2xlOn_2xl": "pf-m-column-gap-2xl-on-2xl",
    "rowGap_2xlOn_2xl": "pf-m-row-gap-2xl-on-2xl",
    "columnGap_3xlOn_2xl": "pf-m-column-gap-3xl-on-2xl",
    "rowGap_3xlOn_2xl": "pf-m-row-gap-3xl-on-2xl",
    "columnGap_4xlOn_2xl": "pf-m-column-gap-4xl-on-2xl",
    "rowGap_4xlOn_2xl": "pf-m-row-gap-4xl-on-2xl",
    "showOn_2xl": "pf-m-show-on-2xl",
    "hideOn_2xl": "pf-m-hide-on-2xl"
  },
  "pagination": "pf-v6-c-pagination",
  "toolbar": "pf-v6-c-toolbar",
  "toolbarContent": "pf-v6-c-toolbar__content",
  "toolbarContentSection": "pf-v6-c-toolbar__content-section",
  "toolbarExpandAllIcon": "pf-v6-c-toolbar__expand-all-icon",
  "toolbarExpandableContent": "pf-v6-c-toolbar__expandable-content",
  "toolbarGroup": "pf-v6-c-toolbar__group",
  "toolbarItem": "pf-v6-c-toolbar__item",
  "toolbarToggle": "pf-v6-c-toolbar__toggle"
};

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarUtils.js
var import_react108 = __toESM(require_react());
var ToolbarContext = (0, import_react108.createContext)({
  isExpanded: false,
  toggleIsExpanded: () => {
  },
  labelGroupContentRef: null,
  updateNumberFilters: () => {
  },
  numberOfFilters: 0,
  clearAllFilters: () => {
  }
});
var ToolbarContentContext = (0, import_react108.createContext)({
  expandableContentRef: null,
  expandableContentId: "",
  labelContainerRef: null,
  clearAllFilters: () => {
  }
});
var globalBreakpoints = {
  md: parseInt(t_global_breakpoint_md_default.value) * 16,
  lg: parseInt(t_global_breakpoint_lg_default.value) * 16,
  xl: parseInt(t_global_breakpoint_xl_default.value) * 16,
  "2xl": parseInt(t_global_breakpoint_2xl_default.value) * 16
};

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarLabelGroupContent.js
var import_jsx_runtime248 = __toESM(require_jsx_runtime());
var import_react110 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarItem.js
var import_jsx_runtime246 = __toESM(require_jsx_runtime());
var ToolbarItemVariant;
(function(ToolbarItemVariant2) {
  ToolbarItemVariant2["separator"] = "separator";
  ToolbarItemVariant2["pagination"] = "pagination";
  ToolbarItemVariant2["label"] = "label";
  ToolbarItemVariant2["label-group"] = "label-group";
  ToolbarItemVariant2["expand-all"] = "expand-all";
})(ToolbarItemVariant || (ToolbarItemVariant = {}));
var ToolbarItem = (_a) => {
  var { className, variant, visibility, gap, columnGap, rowGap, rowWrap, align, alignSelf, alignItems, id, children, isAllExpanded, isOverflowContainer, role } = _a, props = __rest(_a, ["className", "variant", "visibility", "gap", "columnGap", "rowGap", "rowWrap", "align", "alignSelf", "alignItems", "id", "children", "isAllExpanded", "isOverflowContainer", "role"]);
  if (variant === ToolbarItemVariant.separator) {
    const isDividerRoleValid = role === "separator" || role === "presentation";
    return (0, import_jsx_runtime246.jsx)(Divider, Object.assign({ className: css(className), orientation: { default: "vertical" } }, props, isDividerRoleValid && { role }));
  }
  return (0, import_jsx_runtime246.jsx)(PageContext.Consumer, { children: ({ width, getBreakpoint: getBreakpoint2 }) => (0, import_jsx_runtime246.jsx)("div", Object.assign({ className: css(toolbar_default.toolbarItem, variant && toolbar_default.modifiers[toCamel(variant)], variant === ToolbarItemVariant["label-group"] && toolbar_default.modifiers.labelGroup, isAllExpanded && toolbar_default.modifiers.expanded, isOverflowContainer && toolbar_default.modifiers.overflowContainer, formatBreakpointMods(visibility, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(align, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(gap, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(columnGap, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(rowGap, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(rowWrap, toolbar_default, "", getBreakpoint2(width)), alignItems === "start" && toolbar_default.modifiers.alignItemsStart, alignItems === "center" && toolbar_default.modifiers.alignItemsCenter, alignItems === "baseline" && toolbar_default.modifiers.alignItemsBaseline, alignSelf === "start" && toolbar_default.modifiers.alignSelfStart, alignSelf === "center" && toolbar_default.modifiers.alignSelfCenter, alignSelf === "baseline" && toolbar_default.modifiers.alignSelfBaseline, className) }, variant === "label" && { "aria-hidden": true }, { id, role }, props, { children })) });
};
ToolbarItem.displayName = "ToolbarItem";

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarGroup.js
var import_jsx_runtime247 = __toESM(require_jsx_runtime());
var import_react109 = __toESM(require_react());
var ToolbarGroupVariant;
(function(ToolbarGroupVariant2) {
  ToolbarGroupVariant2["filter-group"] = "filter-group";
  ToolbarGroupVariant2["action-group"] = "action-group";
  ToolbarGroupVariant2["action-group-inline"] = "action-group-inline";
  ToolbarGroupVariant2["action-group-plain"] = "action-group-plain";
  ToolbarGroupVariant2["label-group"] = "label-group";
})(ToolbarGroupVariant || (ToolbarGroupVariant = {}));
var ToolbarGroupWithRef = class extends import_react109.Component {
  render() {
    const _a = this.props, { visibility, align, alignItems, alignSelf, gap, columnGap, rowGap, rowWrap, className, variant, children, isOverflowContainer, innerRef } = _a, props = __rest(_a, ["visibility", "align", "alignItems", "alignSelf", "gap", "columnGap", "rowGap", "rowWrap", "className", "variant", "children", "isOverflowContainer", "innerRef"]);
    return (0, import_jsx_runtime247.jsx)(PageContext.Consumer, { children: ({ width, getBreakpoint: getBreakpoint2 }) => (0, import_jsx_runtime247.jsx)("div", Object.assign({ className: css(toolbar_default.toolbarGroup, variant && toolbar_default.modifiers[toCamel(variant)], formatBreakpointMods(visibility, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(align, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(gap, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(columnGap, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(rowGap, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(rowWrap, toolbar_default, "", getBreakpoint2(width)), alignItems === "start" && toolbar_default.modifiers.alignItemsStart, alignItems === "center" && toolbar_default.modifiers.alignItemsCenter, alignItems === "baseline" && toolbar_default.modifiers.alignItemsBaseline, alignSelf === "start" && toolbar_default.modifiers.alignSelfStart, alignSelf === "center" && toolbar_default.modifiers.alignSelfCenter, alignSelf === "baseline" && toolbar_default.modifiers.alignSelfBaseline, isOverflowContainer && toolbar_default.modifiers.overflowContainer, className) }, props, { ref: innerRef, children })) });
  }
};
var ToolbarGroup = (0, import_react109.forwardRef)((props, ref) => (0, import_jsx_runtime247.jsx)(ToolbarGroupWithRef, Object.assign({}, props, { innerRef: ref })));

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarLabelGroupContent.js
var ToolbarLabelGroupContent = class extends import_react110.Component {
  render() {
    const _a = this.props, { className, isExpanded, labelGroupContentRef, clearAllFilters, showClearFiltersButton, clearFiltersButtonText, collapseListedFiltersBreakpoint, numberOfFilters, numberOfFiltersText, customLabelGroupContent } = _a, props = __rest(_a, ["className", "isExpanded", "labelGroupContentRef", "clearAllFilters", "showClearFiltersButton", "clearFiltersButtonText", "collapseListedFiltersBreakpoint", "numberOfFilters", "numberOfFiltersText", "customLabelGroupContent"]);
    const clearLabelGroups = () => {
      clearAllFilters();
    };
    let collapseListedFilters = false;
    if (collapseListedFiltersBreakpoint === "all") {
      collapseListedFilters = true;
    } else if (canUseDOM) {
      collapseListedFilters = (canUseDOM ? window.innerWidth : 1200) < globalBreakpoints[collapseListedFiltersBreakpoint];
    }
    const isHidden = numberOfFilters === 0 || isExpanded;
    const showNumberOfFilters = collapseListedFilters && numberOfFilters > 0 && !isExpanded;
    const showDefaultClearFilter = showClearFiltersButton && !isExpanded && !customLabelGroupContent;
    return (0, import_jsx_runtime248.jsxs)("div", Object.assign({ className: css(toolbar_default.toolbarContent, isHidden && toolbar_default.modifiers.hidden, className) }, (numberOfFilters === 0 || isExpanded) && { hidden: true }, { ref: labelGroupContentRef }, props, { children: [(0, import_jsx_runtime248.jsx)(ToolbarGroup, Object.assign({ className: css(collapseListedFilters && toolbar_default.modifiers.hidden) }, collapseListedFilters && { hidden: true }, collapseListedFilters && { "aria-hidden": true })), (showNumberOfFilters || showDefaultClearFilter || customLabelGroupContent) && (0, import_jsx_runtime248.jsxs)(ToolbarGroup, { variant: "action-group-inline", children: [showNumberOfFilters && (0, import_jsx_runtime248.jsx)(ToolbarItem, { children: numberOfFiltersText(numberOfFilters) }), showDefaultClearFilter && (0, import_jsx_runtime248.jsx)(ToolbarItem, { children: (0, import_jsx_runtime248.jsx)(Button, { variant: "link", onClick: clearLabelGroups, isInline: true, children: clearFiltersButtonText }) }), customLabelGroupContent && customLabelGroupContent] })] }));
  }
};
ToolbarLabelGroupContent.displayName = "ToolbarLabelGroupContent";
ToolbarLabelGroupContent.defaultProps = {
  clearFiltersButtonText: "Clear all filters",
  collapseListedFiltersBreakpoint: "lg",
  numberOfFiltersText: (numberOfFilters) => `${numberOfFilters} filters applied`
};

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/Toolbar.js
var ToolbarColorVariant;
(function(ToolbarColorVariant2) {
  ToolbarColorVariant2["default"] = "default";
  ToolbarColorVariant2["primary"] = "primary";
  ToolbarColorVariant2["secondary"] = "secondary";
  ToolbarColorVariant2["noBackground"] = "no-background";
})(ToolbarColorVariant || (ToolbarColorVariant = {}));
var Toolbar = class _Toolbar extends import_react111.Component {
  constructor() {
    super(...arguments);
    this.labelGroupContentRef = (0, import_react111.createRef)();
    this.staticFilterInfo = {};
    this.hasNoPadding = false;
    this.state = {
      isManagedToggleExpanded: false,
      filterInfo: {},
      windowWidth: canUseDOM ? window.innerWidth : 1200,
      ouiaStateId: getDefaultOUIAId(_Toolbar.displayName)
    };
    this.isToggleManaged = () => !(this.props.isExpanded || !!this.props.toggleIsExpanded);
    this.toggleIsExpanded = () => {
      this.setState((prevState) => ({
        isManagedToggleExpanded: !prevState.isManagedToggleExpanded
      }));
    };
    this.closeExpandableContent = (e) => {
      if (e.target.innerWidth !== this.state.windowWidth) {
        this.setState(() => ({
          isManagedToggleExpanded: false,
          windowWidth: e.target.innerWidth
        }));
      }
    };
    this.updateNumberFilters = (categoryName, numberOfFilters) => {
      const filterInfoToUpdate = Object.assign({}, this.staticFilterInfo);
      if (!filterInfoToUpdate.hasOwnProperty(categoryName) || filterInfoToUpdate[categoryName] !== numberOfFilters) {
        filterInfoToUpdate[categoryName] = numberOfFilters;
        this.staticFilterInfo = filterInfoToUpdate;
        this.setState({ filterInfo: filterInfoToUpdate });
      }
    };
    this.getNumberOfFilters = () => Object.values(this.state.filterInfo).reduce((acc, cur) => acc + cur, 0);
    this.renderToolbar = (randomId) => {
      const _a = this.props, { hasNoPadding, clearAllFilters, clearFiltersButtonText, collapseListedFiltersBreakpoint, isExpanded: isExpandedProp, toggleIsExpanded, className, children, isFullHeight, isStatic, inset, isSticky, ouiaId, numberOfFiltersText, customLabelGroupContent, colorVariant = ToolbarColorVariant.default } = _a, props = __rest(_a, ["hasNoPadding", "clearAllFilters", "clearFiltersButtonText", "collapseListedFiltersBreakpoint", "isExpanded", "toggleIsExpanded", "className", "children", "isFullHeight", "isStatic", "inset", "isSticky", "ouiaId", "numberOfFiltersText", "customLabelGroupContent", "colorVariant"]);
      const { isManagedToggleExpanded } = this.state;
      const isToggleManaged = this.isToggleManaged();
      const isExpanded = isToggleManaged ? isManagedToggleExpanded : isExpandedProp;
      const numberOfFilters = this.getNumberOfFilters();
      const showClearFiltersButton = numberOfFilters > 0;
      return (0, import_jsx_runtime249.jsx)(PageContext.Consumer, { children: ({ width, getBreakpoint: getBreakpoint2 }) => (0, import_jsx_runtime249.jsx)("div", Object.assign({ className: css(toolbar_default.toolbar, hasNoPadding && toolbar_default.modifiers.noPadding, isFullHeight && toolbar_default.modifiers.fullHeight, isStatic && toolbar_default.modifiers.static, isSticky && toolbar_default.modifiers.sticky, formatBreakpointMods(inset, toolbar_default, "", getBreakpoint2(width)), colorVariant === "primary" && toolbar_default.modifiers.primary, colorVariant === "secondary" && toolbar_default.modifiers.secondary, colorVariant === "no-background" && toolbar_default.modifiers.noBackground, className), id: randomId }, getOUIAProps(_Toolbar.displayName, ouiaId !== void 0 ? ouiaId : this.state.ouiaStateId), props, { children: (0, import_jsx_runtime249.jsxs)(ToolbarContext.Provider, { value: {
        isExpanded,
        toggleIsExpanded: isToggleManaged ? this.toggleIsExpanded : toggleIsExpanded,
        labelGroupContentRef: this.labelGroupContentRef,
        updateNumberFilters: this.updateNumberFilters,
        numberOfFilters,
        clearAllFilters,
        clearFiltersButtonText,
        showClearFiltersButton,
        toolbarId: randomId,
        customLabelGroupContent
      }, children: [children, (0, import_jsx_runtime249.jsx)(ToolbarLabelGroupContent, { isExpanded, labelGroupContentRef: this.labelGroupContentRef, clearAllFilters, showClearFiltersButton, clearFiltersButtonText, numberOfFilters, numberOfFiltersText, collapseListedFiltersBreakpoint, customLabelGroupContent })] }) })) });
    };
  }
  componentDidMount() {
    if (this.isToggleManaged() && canUseDOM) {
      window.addEventListener("resize", this.closeExpandableContent);
    }
  }
  componentWillUnmount() {
    if (this.isToggleManaged() && canUseDOM) {
      window.removeEventListener("resize", this.closeExpandableContent);
    }
  }
  render() {
    return this.props.id ? this.renderToolbar(this.props.id) : (0, import_jsx_runtime249.jsx)(GenerateId, { children: (randomId) => this.renderToolbar(randomId) });
  }
};
Toolbar.displayName = "Toolbar";

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarContent.js
var import_jsx_runtime250 = __toESM(require_jsx_runtime());
var import_react112 = __toESM(require_react());
var ToolbarContent = class _ToolbarContent extends import_react112.Component {
  constructor() {
    super(...arguments);
    this.expandableContentRef = (0, import_react112.createRef)();
    this.labelContainerRef = (0, import_react112.createRef)();
  }
  render() {
    const _a = this.props, { className, children, isExpanded, toolbarId, visibility, rowWrap, alignItems, clearAllFilters, showClearFiltersButton, clearFiltersButtonText } = _a, props = __rest(_a, ["className", "children", "isExpanded", "toolbarId", "visibility", "rowWrap", "alignItems", "clearAllFilters", "showClearFiltersButton", "clearFiltersButtonText"]);
    return (0, import_jsx_runtime250.jsx)(PageContext.Consumer, { children: ({ width, getBreakpoint: getBreakpoint2 }) => (0, import_jsx_runtime250.jsx)("div", Object.assign({ className: css(toolbar_default.toolbarContent, formatBreakpointMods(visibility, toolbar_default, "", getBreakpoint2(width)), className), ref: this.expandableContentRef }, props, { children: (0, import_jsx_runtime250.jsx)(ToolbarContext.Consumer, { children: ({ clearAllFilters: clearAllFiltersContext, clearFiltersButtonText: clearFiltersButtonContext, showClearFiltersButton: showClearFiltersButtonContext, isExpanded: isExpandedContext, toolbarId: toolbarIdContext }) => {
      const expandableContentId = `${toolbarId || toolbarIdContext}-expandable-content-${_ToolbarContent.currentId++}`;
      return (0, import_jsx_runtime250.jsx)(ToolbarContentContext.Provider, { value: {
        expandableContentRef: this.expandableContentRef,
        expandableContentId,
        labelContainerRef: this.labelContainerRef,
        isExpanded: isExpanded || isExpandedContext,
        clearAllFilters: clearAllFilters || clearAllFiltersContext,
        clearFiltersButtonText: clearFiltersButtonText || clearFiltersButtonContext,
        showClearFiltersButton: showClearFiltersButton || showClearFiltersButtonContext
      }, children: (0, import_jsx_runtime250.jsx)("div", { className: css(toolbar_default.toolbarContentSection, formatBreakpointMods(rowWrap, toolbar_default, "", getBreakpoint2(width)), alignItems === "center" && toolbar_default.modifiers.alignItemsCenter, alignItems === "start" && toolbar_default.modifiers.alignItemsStart, alignItems === "baseline" && toolbar_default.modifiers.alignItemsBaseline), children }) });
    } }) })) });
  }
};
ToolbarContent.displayName = "ToolbarContent";
ToolbarContent.currentId = 0;
ToolbarContent.defaultProps = {
  isExpanded: false,
  showClearFiltersButton: false
};

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarExpandIconWrapper.js
var import_jsx_runtime251 = __toESM(require_jsx_runtime());
var ToolbarExpandIconWrapper = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime251.jsx)("span", Object.assign({}, props, { className: css(toolbar_default.toolbarExpandAllIcon, className), children }));
};
ToolbarExpandIconWrapper.displayName = "ToolbarExpandIconWrapper";

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarExpandableContent.js
var import_jsx_runtime252 = __toESM(require_jsx_runtime());
var import_react113 = __toESM(require_react());
var ToolbarExpandableContent = class extends import_react113.Component {
  render() {
    const _a = this.props, { children, className, expandableContentRef, labelContainerRef, isExpanded, clearAllFilters, clearFiltersButtonText, showClearFiltersButton } = _a, props = __rest(_a, ["children", "className", "expandableContentRef", "labelContainerRef", "isExpanded", "clearAllFilters", "clearFiltersButtonText", "showClearFiltersButton"]);
    const { numberOfFilters, customLabelGroupContent } = this.context;
    const clearLabelGroups = () => {
      clearAllFilters();
    };
    return (0, import_jsx_runtime252.jsxs)("div", Object.assign({ className: css(toolbar_default.toolbarExpandableContent, isExpanded && toolbar_default.modifiers.expanded, className), ref: expandableContentRef }, props, { children: [(0, import_jsx_runtime252.jsx)(ToolbarGroup, { children }), numberOfFilters > 0 && (0, import_jsx_runtime252.jsxs)(ToolbarGroup, { children: [(0, import_jsx_runtime252.jsx)(ToolbarGroup, { ref: labelContainerRef }), showClearFiltersButton && !customLabelGroupContent && (0, import_jsx_runtime252.jsx)(ToolbarItem, { children: (0, import_jsx_runtime252.jsx)(Button, { variant: "link", onClick: clearLabelGroups, isInline: true, children: clearFiltersButtonText }) }), customLabelGroupContent && customLabelGroupContent] })] }));
  }
};
ToolbarExpandableContent.displayName = "ToolbarExpandableContent";
ToolbarExpandableContent.contextType = ToolbarContext;
ToolbarExpandableContent.defaultProps = {
  isExpanded: false,
  clearFiltersButtonText: "Clear all filters"
};

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarFilter.js
var import_jsx_runtime253 = __toESM(require_jsx_runtime());
var import_react114 = __toESM(require_react());
var ReactDOM3 = __toESM(require_react_dom());
var ToolbarFilter = class extends import_react114.Component {
  constructor(props) {
    super(props);
    this.state = {
      isMounted: false
    };
  }
  componentDidMount() {
    const { categoryName, labels } = this.props;
    this.context.updateNumberFilters(typeof categoryName !== "string" && categoryName.hasOwnProperty("key") ? categoryName.key : categoryName.toString(), labels.length);
    this.setState({ isMounted: true });
  }
  componentDidUpdate() {
    const { categoryName, labels } = this.props;
    this.context.updateNumberFilters(typeof categoryName !== "string" && categoryName.hasOwnProperty("key") ? categoryName.key : categoryName.toString(), labels.length);
  }
  render() {
    var _a;
    const _b = this.props, { children, labels, deleteLabelGroup, deleteLabel, labelGroupExpandedText, labelGroupCollapsedText, categoryName, showToolbarItem, isExpanded, expandableLabelContainerRef } = _b, props = __rest(_b, ["children", "labels", "deleteLabelGroup", "deleteLabel", "labelGroupExpandedText", "labelGroupCollapsedText", "categoryName", "showToolbarItem", "isExpanded", "expandableLabelContainerRef"]);
    const { isExpanded: managedIsExpanded, labelGroupContentRef } = this.context;
    const _isExpanded = isExpanded !== void 0 ? isExpanded : managedIsExpanded;
    const categoryKey = typeof categoryName !== "string" && categoryName.hasOwnProperty("key") ? categoryName.key : categoryName.toString();
    const labelGroup = labels.length ? (0, import_jsx_runtime253.jsx)(ToolbarItem, { variant: "label-group", children: (0, import_jsx_runtime253.jsx)(LabelGroup, { categoryName: typeof categoryName === "string" ? categoryName : categoryName.name, isClosable: deleteLabelGroup !== void 0, onClick: () => deleteLabelGroup(categoryName), collapsedText: labelGroupCollapsedText, expandedText: labelGroupExpandedText, children: labels.map((label) => typeof label === "string" ? (0, import_jsx_runtime253.jsx)(Label, { variant: "outline", onClose: () => deleteLabel(categoryKey, label), children: label }, label) : (0, import_jsx_runtime253.jsx)(Label, { onClose: () => deleteLabel(categoryKey, label), children: label.node }, label.key)) }, categoryKey) }) : null;
    if (!_isExpanded && this.state.isMounted) {
      return (0, import_jsx_runtime253.jsxs)(import_react114.Fragment, { children: [showToolbarItem && (0, import_jsx_runtime253.jsx)(ToolbarItem, Object.assign({}, props, { children })), ((_a = labelGroupContentRef === null || labelGroupContentRef === void 0 ? void 0 : labelGroupContentRef.current) === null || _a === void 0 ? void 0 : _a.firstElementChild) !== null && ReactDOM3.createPortal(labelGroup, labelGroupContentRef.current.firstElementChild)] });
    }
    return (0, import_jsx_runtime253.jsx)(ToolbarContentContext.Consumer, { children: ({ labelContainerRef }) => (0, import_jsx_runtime253.jsxs)(import_react114.Fragment, { children: [showToolbarItem && (0, import_jsx_runtime253.jsx)(ToolbarItem, Object.assign({}, props, { children })), labelContainerRef.current && ReactDOM3.createPortal(labelGroup, labelContainerRef.current), expandableLabelContainerRef && expandableLabelContainerRef.current && ReactDOM3.createPortal(labelGroup, expandableLabelContainerRef.current)] }) });
  }
};
ToolbarFilter.displayName = "ToolbarFilter";
ToolbarFilter.contextType = ToolbarContext;
ToolbarFilter.defaultProps = {
  labels: [],
  showToolbarItem: true
};

// node_modules/@patternfly/react-core/dist/esm/components/Toolbar/ToolbarToggleGroup.js
var import_jsx_runtime254 = __toESM(require_jsx_runtime());
var import_react115 = __toESM(require_react());
var ReactDOM4 = __toESM(require_react_dom());
var ToolbarToggleGroup = class extends import_react115.Component {
  constructor() {
    super(...arguments);
    this.toggleRef = (0, import_react115.createRef)();
    this.expandableContentRef = (0, import_react115.createRef)();
    this.isContentPopup = () => {
      const viewportSize = canUseDOM ? window.innerWidth : 1200;
      const lgBreakpointValue = parseInt(t_global_breakpoint_lg_default.value);
      return viewportSize < lgBreakpointValue;
    };
  }
  render() {
    const _a = this.props, { toggleIcon, variant, visibility, breakpoint, gap, columnGap, rowGap, className, children, isExpanded, onToggle, labelContainerRef, clearAllFilters, showClearFiltersButton, clearFiltersButtonText } = _a, props = __rest(_a, ["toggleIcon", "variant", "visibility", "breakpoint", "gap", "columnGap", "rowGap", "className", "children", "isExpanded", "onToggle", "labelContainerRef", "clearAllFilters", "showClearFiltersButton", "clearFiltersButtonText"]);
    if (!breakpoint && !toggleIcon) {
      console.error("ToolbarToggleGroup will not be visible without a breakpoint or toggleIcon.");
    }
    return (0, import_jsx_runtime254.jsx)(PageContext.Consumer, { children: ({ width, getBreakpoint: getBreakpoint2 }) => (0, import_jsx_runtime254.jsx)(ToolbarContext.Consumer, { children: ({ toggleIsExpanded: managedOnToggle }) => {
      const _onToggle = onToggle !== void 0 ? onToggle : managedOnToggle;
      return (0, import_jsx_runtime254.jsx)(ToolbarContentContext.Consumer, { children: ({ expandableContentRef, expandableContentId, labelContainerRef: managedLabelContainerRef, isExpanded: managedIsExpanded, clearAllFilters: clearAllFiltersContext, clearFiltersButtonText: clearFiltersButtonContext, showClearFiltersButton: showClearFiltersButtonContext }) => {
        const _isExpanded = isExpanded !== void 0 ? isExpanded : managedIsExpanded;
        const _labelContainerRef = labelContainerRef !== void 0 ? labelContainerRef : managedLabelContainerRef;
        const breakpointMod = {};
        breakpointMod[breakpoint] = "show";
        const expandableContent = (0, import_jsx_runtime254.jsx)(ToolbarExpandableContent, { id: expandableContentId, expandableContentRef: this.expandableContentRef, isExpanded: _isExpanded, clearAllFilters: clearAllFilters || clearAllFiltersContext, showClearFiltersButton: showClearFiltersButton || showClearFiltersButtonContext, clearFiltersButtonText: clearFiltersButtonText || clearFiltersButtonContext, labelContainerRef: _labelContainerRef, children });
        const toggleButton = (0, import_jsx_runtime254.jsx)("div", { className: css(toolbar_default.toolbarToggle), children: (0, import_jsx_runtime254.jsx)(Button, Object.assign({ variant: "plain", onClick: _onToggle, "aria-label": "Show Filters" }, _isExpanded && { "aria-expanded": true }, { "aria-haspopup": _isExpanded && this.isContentPopup(), "aria-controls": _isExpanded ? expandableContentId : void 0, ref: this.toggleRef, icon: toggleIcon })) });
        return (0, import_jsx_runtime254.jsxs)("div", Object.assign({ className: css(toolbar_default.toolbarGroup, toolbar_default.modifiers.toggleGroup, variant && toolbar_default.modifiers[toCamel(variant)], formatBreakpointMods(breakpointMod, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(visibility, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(gap, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(columnGap, toolbar_default, "", getBreakpoint2(width)), formatBreakpointMods(rowGap, toolbar_default, "", getBreakpoint2(width)), className) }, props, { children: [toggleButton, _isExpanded && ReactDOM4.createPortal(expandableContent, expandableContentRef.current), !_isExpanded && children] }));
      } });
    } }) });
  }
};
ToolbarToggleGroup.displayName = "ToolbarToggleGroup";

// node_modules/@patternfly/react-core/dist/esm/components/NumberInput/NumberInput.js
var import_jsx_runtime255 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/components/NumberInput/number-input.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/NumberInput/number-input.css";
var number_input_default = {
  "formControl": "pf-v6-c-form-control",
  "inputGroup": "pf-v6-c-input-group",
  "numberInput": "pf-v6-c-number-input",
  "numberInputIcon": "pf-v6-c-number-input__icon",
  "numberInputUnit": "pf-v6-c-number-input__unit"
};

// node_modules/@patternfly/react-tokens/dist/esm/c_number_input_c_form_control_width_chars.js
var c_number_input_c_form_control_width_chars = {
  "name": "--pf-v6-c-number-input--c-form-control--width-chars",
  "value": "4",
  "var": "var(--pf-v6-c-number-input--c-form-control--width-chars)"
};
var c_number_input_c_form_control_width_chars_default = c_number_input_c_form_control_width_chars;

// node_modules/@patternfly/react-core/dist/esm/components/NumberInput/NumberInput.js
var defaultKeyDownHandler = (args) => (event) => {
  if (KeyTypes.ArrowUp === event.key && args.onPlus) {
    event.preventDefault();
    args.onPlus(null, args.inputName);
  }
  if (KeyTypes.ArrowDown === event.key && args.onMinus) {
    event.preventDefault();
    args.onMinus(null, args.inputName);
  }
};
var DEFAULT_VALUE = 0;
var NumberInput = (_a) => {
  var { value = DEFAULT_VALUE, className, widthChars, isDisabled = false, validated = ValidatedOptions.default, onMinus = () => {
  }, onChange, onBlur, onPlus = () => {
  }, unit, unitPosition = "after", min, max, inputName, inputAriaLabel = "Input", minusBtnAriaLabel = "Minus", plusBtnAriaLabel = "Plus", inputProps, minusBtnProps, plusBtnProps } = _a, props = __rest(_a, ["value", "className", "widthChars", "isDisabled", "validated", "onMinus", "onChange", "onBlur", "onPlus", "unit", "unitPosition", "min", "max", "inputName", "inputAriaLabel", "minusBtnAriaLabel", "plusBtnAriaLabel", "inputProps", "minusBtnProps", "plusBtnProps"]);
  const numberInputUnit = (0, import_jsx_runtime255.jsx)("div", { className: css(number_input_default.numberInputUnit), children: unit });
  const keyDownHandler = inputProps && inputProps.onKeyDown ? inputProps.onKeyDown : defaultKeyDownHandler({ inputName, onMinus, onPlus });
  const handleBlur = (event) => {
    event.target.value = Number(event.target.value).toString();
    if (onChange) {
      onChange(event);
    }
    if (onBlur) {
      onBlur(event);
    }
  };
  return (0, import_jsx_runtime255.jsxs)("div", Object.assign({
    // TODO: Update with issue #9978. Removed "validated !== 'default' && styles.modifiers.status" from classname to get build to work
    className: css(number_input_default.numberInput, className)
  }, widthChars && {
    style: Object.assign({ [c_number_input_c_form_control_width_chars_default.name]: widthChars }, props.style)
  }, props, { children: [unit && unitPosition === "before" && numberInputUnit, (0, import_jsx_runtime255.jsxs)(InputGroup, { children: [(0, import_jsx_runtime255.jsx)(InputGroupItem, { children: (0, import_jsx_runtime255.jsx)(Button, Object.assign({ variant: "control", "aria-label": minusBtnAriaLabel, isDisabled: isDisabled || (typeof value === "number" ? value : DEFAULT_VALUE) <= min, onClick: (evt) => onMinus(evt, inputName), icon: (0, import_jsx_runtime255.jsx)("span", { className: css(number_input_default.numberInputIcon), children: (0, import_jsx_runtime255.jsx)(minus_icon_default, {}) }) }, minusBtnProps)) }), (0, import_jsx_runtime255.jsx)(InputGroupItem, { children: (0, import_jsx_runtime255.jsx)(TextInput, Object.assign({}, inputProps, { type: "number", value, name: inputName, "aria-label": inputAriaLabel }, isDisabled && { isDisabled }, onChange && { onChange: (event, _value) => onChange(event) }, { onBlur: handleBlur }, !onChange && { readOnlyVariant: "default" }, { onKeyDown: keyDownHandler, validated })) }), (0, import_jsx_runtime255.jsx)(InputGroupItem, { children: (0, import_jsx_runtime255.jsx)(Button, Object.assign({ variant: "control", "aria-label": plusBtnAriaLabel, isDisabled: isDisabled || (typeof value === "number" ? value : DEFAULT_VALUE) >= max, onClick: (evt) => onPlus(evt, inputName), icon: (0, import_jsx_runtime255.jsx)("span", { className: css(number_input_default.numberInputIcon), children: (0, import_jsx_runtime255.jsx)(plus_icon_default, {}) }) }, plusBtnProps)) })] }), unit && unitPosition === "after" && numberInputUnit] }));
};
NumberInput.displayName = "NumberInput";

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeView.js
var import_jsx_runtime259 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewList.js
var import_jsx_runtime256 = __toESM(require_jsx_runtime());
var import_react116 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/TreeView/tree-view.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/TreeView/tree-view.css";
var tree_view_default = {
  "dirRtl": "pf-v6-m-dir-rtl",
  "modifiers": {
    "compact": "pf-m-compact",
    "guides": "pf-m-guides",
    "expanded": "pf-m-expanded",
    "noBackground": "pf-m-no-background",
    "current": "pf-m-current",
    "truncate": "pf-m-truncate"
  },
  "treeView": "pf-v6-c-tree-view",
  "treeViewAction": "pf-v6-c-tree-view__action",
  "treeViewContent": "pf-v6-c-tree-view__content",
  "treeViewList": "pf-v6-c-tree-view__list",
  "treeViewListItem": "pf-v6-c-tree-view__list-item",
  "treeViewNode": "pf-v6-c-tree-view__node",
  "treeViewNodeCheck": "pf-v6-c-tree-view__node-check",
  "treeViewNodeContainer": "pf-v6-c-tree-view__node-container",
  "treeViewNodeContent": "pf-v6-c-tree-view__node-content",
  "treeViewNodeCount": "pf-v6-c-tree-view__node-count",
  "treeViewNodeIcon": "pf-v6-c-tree-view__node-icon",
  "treeViewNodeText": "pf-v6-c-tree-view__node-text",
  "treeViewNodeTitle": "pf-v6-c-tree-view__node-title",
  "treeViewNodeToggle": "pf-v6-c-tree-view__node-toggle",
  "treeViewNodeToggleIcon": "pf-v6-c-tree-view__node-toggle-icon",
  "treeViewSearch": "pf-v6-c-tree-view__search"
};

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewList.js
var TreeViewList = (_a) => {
  var { isNested = false, isMultiSelectable = false, toolbar, children, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby } = _a, props = __rest(_a, ["isNested", "isMultiSelectable", "toolbar", "children", "aria-label", "aria-labelledby"]);
  return (0, import_jsx_runtime256.jsxs)(import_jsx_runtime256.Fragment, { children: [toolbar && (0, import_jsx_runtime256.jsxs)(import_react116.Fragment, { children: [toolbar, (0, import_jsx_runtime256.jsx)(Divider, {})] }), (0, import_jsx_runtime256.jsx)("ul", Object.assign({ className: css(`${tree_view_default.treeView}__list`), role: isNested ? "group" : "tree", "aria-multiselectable": isNested ? void 0 : isMultiSelectable, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby }, props, { children }))] });
};
TreeViewList.displayName = "TreeViewList";

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewListItem.js
var import_jsx_runtime257 = __toESM(require_jsx_runtime());
var import_react117 = __toESM(require_react());
var TreeViewListItemBase = ({
  name,
  title,
  id,
  isExpanded,
  defaultExpanded = false,
  children = null,
  onSelect,
  onExpand,
  onCollapse,
  onCheck,
  hasCheckbox = false,
  checkProps = {
    checked: false
  },
  hasBadge = false,
  customBadgeContent,
  badgeProps = { isRead: true },
  isSelectable = false,
  isCompact,
  activeItems = [],
  itemData,
  parentItem,
  icon,
  expandedIcon,
  action,
  compareItems,
  hasAnimations,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  useMemo: useMemo7
}) => {
  const [internalIsExpanded, setIsExpanded] = (0, import_react117.useState)(defaultExpanded);
  (0, import_react117.useEffect)(() => {
    if (isExpanded !== void 0 && isExpanded !== null) {
      setIsExpanded(isExpanded);
    } else if (defaultExpanded !== void 0 && defaultExpanded !== null) {
      setIsExpanded(internalIsExpanded || defaultExpanded);
    }
  }, [isExpanded, defaultExpanded]);
  let Component32 = "button";
  if (hasCheckbox) {
    Component32 = "label";
  } else if (isSelectable) {
    Component32 = "div";
  }
  const ToggleComponent = hasCheckbox || isSelectable ? "button" : "span";
  const renderToggle = (randomId) => (0, import_jsx_runtime257.jsx)(ToggleComponent, Object.assign({ className: css(tree_view_default.treeViewNodeToggle), onClick: (evt) => {
    if (isSelectable || hasCheckbox) {
      if (internalIsExpanded) {
        onCollapse && onCollapse(evt, itemData, parentItem);
      } else {
        onExpand && onExpand(evt, itemData, parentItem);
      }
      setIsExpanded(!internalIsExpanded);
    }
    if (isSelectable) {
      evt.stopPropagation();
    }
  } }, (hasCheckbox || isSelectable) && { "aria-labelledby": `label-${randomId}` }, ToggleComponent === "button" && { type: "button" }, { tabIndex: -1, children: (0, import_jsx_runtime257.jsx)("span", { className: css(tree_view_default.treeViewNodeToggleIcon), children: (0, import_jsx_runtime257.jsx)(angle_right_icon_default, {}) }) }));
  const isCheckboxChecked = checkProps.checked === null ? false : checkProps.checked;
  const renderCheck = (randomId) => (0, import_jsx_runtime257.jsx)("span", { className: css(tree_view_default.treeViewNodeCheck), children: (0, import_jsx_runtime257.jsx)("input", Object.assign({ type: "checkbox", onChange: (evt) => onCheck && onCheck(evt, itemData, parentItem), onClick: (evt) => evt.stopPropagation(), ref: (elem) => {
    elem && (elem.indeterminate = checkProps.checked === null);
  } }, checkProps, { checked: isCheckboxChecked, id: randomId, tabIndex: -1 })) });
  const iconRendered = (0, import_jsx_runtime257.jsxs)("span", { className: css(tree_view_default.treeViewNodeIcon), children: [!internalIsExpanded && icon, internalIsExpanded && (expandedIcon || icon)] });
  const renderNodeContent = () => {
    const content = (0, import_jsx_runtime257.jsxs)(import_jsx_runtime257.Fragment, { children: [isCompact && title && (0, import_jsx_runtime257.jsx)("span", { className: css(tree_view_default.treeViewNodeTitle), children: title }), isSelectable ? (0, import_jsx_runtime257.jsx)("button", { tabIndex: -1, className: css(tree_view_default.treeViewNodeText), type: "button", children: name }) : (0, import_jsx_runtime257.jsx)("span", { className: css(tree_view_default.treeViewNodeText), children: name })] });
    return isCompact ? (0, import_jsx_runtime257.jsx)("span", { className: css(tree_view_default.treeViewNodeContent), children: content }) : content;
  };
  const badgeRendered = (0, import_jsx_runtime257.jsxs)(import_jsx_runtime257.Fragment, { children: [hasBadge && children && (0, import_jsx_runtime257.jsx)("span", { className: css(tree_view_default.treeViewNodeCount), children: (0, import_jsx_runtime257.jsx)(Badge, Object.assign({}, badgeProps, { children: customBadgeContent !== null && customBadgeContent !== void 0 ? customBadgeContent : children.props.data.length })) }), hasBadge && !children && customBadgeContent !== void 0 && (0, import_jsx_runtime257.jsx)("span", { className: css(tree_view_default.treeViewNodeCount), children: (0, import_jsx_runtime257.jsx)(Badge, Object.assign({}, badgeProps, { children: customBadgeContent })) })] });
  const isSelected = (!children || isSelectable) && activeItems && activeItems.length > 0 && activeItems.some((item) => compareItems && item && compareItems(item, itemData));
  const clonedChildren = import_react117.Children.map(children, (child) => (0, import_react117.isValidElement)(child) && (0, import_react117.cloneElement)(child, {
    inert: internalIsExpanded ? void 0 : ""
  }));
  return (0, import_jsx_runtime257.jsxs)("li", Object.assign({ id, className: css(tree_view_default.treeViewListItem, internalIsExpanded && tree_view_default.modifiers.expanded), "aria-expanded": internalIsExpanded, role: "treeitem", tabIndex: -1 }, hasCheckbox && { "aria-checked": isCheckboxChecked }, !hasCheckbox && { "aria-selected": isSelected }, { children: [(0, import_jsx_runtime257.jsxs)("div", { className: css(tree_view_default.treeViewContent), children: [(0, import_jsx_runtime257.jsx)(GenerateId, { prefix: isSelectable ? "selectable-id" : "checkbox-id", children: (randomId) => (0, import_jsx_runtime257.jsx)(Component32, Object.assign({ className: css(tree_view_default.treeViewNode, isSelected && tree_view_default.modifiers.current), onClick: (evt) => {
    if (!hasCheckbox) {
      onSelect && onSelect(evt, itemData, parentItem);
      if (!isSelectable && children && evt.isDefaultPrevented() !== true) {
        if (internalIsExpanded) {
          onCollapse && onCollapse(evt, itemData, parentItem);
        } else {
          onExpand && onExpand(evt, itemData, parentItem);
        }
        setIsExpanded(!internalIsExpanded);
      }
    }
  } }, hasCheckbox && { htmlFor: randomId }, (hasCheckbox || isSelectable && children) && { id: `label-${randomId}` }, Component32 === "button" && { type: "button" }, { children: (0, import_jsx_runtime257.jsxs)("span", { className: css(tree_view_default.treeViewNodeContainer), children: [children && renderToggle(randomId), hasCheckbox && renderCheck(randomId), icon && iconRendered, renderNodeContent(), badgeRendered] }) })) }), action && (0, import_jsx_runtime257.jsx)("div", { className: css(tree_view_default.treeViewAction), children: action })] }), (internalIsExpanded || hasAnimations) && clonedChildren] }));
};
var TreeViewListItem = (0, import_react117.memo)(TreeViewListItemBase, (prevProps, nextProps) => {
  if (!nextProps.useMemo) {
    return false;
  }
  const prevIncludes = prevProps.activeItems && prevProps.activeItems.length > 0 && prevProps.activeItems.some((item) => prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData));
  const nextIncludes = nextProps.activeItems && nextProps.activeItems.length > 0 && nextProps.activeItems.some((item) => nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData));
  if (prevIncludes || nextIncludes) {
    return false;
  }
  if (prevProps.name !== nextProps.name || prevProps.title !== nextProps.title || prevProps.id !== nextProps.id || prevProps.isExpanded !== nextProps.isExpanded || prevProps.defaultExpanded !== nextProps.defaultExpanded || prevProps.onSelect !== nextProps.onSelect || prevProps.onCheck !== nextProps.onCheck || prevProps.onExpand !== nextProps.onExpand || prevProps.onCollapse !== nextProps.onCollapse || prevProps.hasCheckbox !== nextProps.hasCheckbox || prevProps.checkProps !== nextProps.checkProps || prevProps.hasBadge !== nextProps.hasBadge || prevProps.customBadgeContent !== nextProps.customBadgeContent || prevProps.badgeProps !== nextProps.badgeProps || prevProps.isCompact !== nextProps.isCompact || prevProps.icon !== nextProps.icon || prevProps.expandedIcon !== nextProps.expandedIcon || prevProps.action !== nextProps.action || prevProps.parentItem !== nextProps.parentItem || prevProps.itemData !== nextProps.itemData) {
    return false;
  }
  return true;
});
TreeViewListItem.displayName = "TreeViewListItem";

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewRoot.js
var import_jsx_runtime258 = __toESM(require_jsx_runtime());
var import_react118 = __toESM(require_react());
var TreeViewRoot = class extends import_react118.Component {
  constructor() {
    super(...arguments);
    this.displayName = "TreeViewRoot";
    this.treeRef = (0, import_react118.createRef)();
    this.handleKeys = (event) => {
      var _a, _b, _c, _d, _e, _f, _g;
      if (!this.treeRef.current.contains(event.target) || !event.target.classList.contains(tree_view_default.treeViewNode)) {
        return;
      }
      const activeElement = document.activeElement;
      const key = event.key;
      const treeItems = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(tree_view_default.treeViewNode)).filter((el) => !el.classList.contains("pf-m-disabled") && !el.closest(`.${tree_view_default.treeViewList}[inert]`));
      if (key === KeyTypes.Space) {
        activeElement.click();
        event.preventDefault();
      }
      handleArrows(event, treeItems, (element) => activeElement === element, void 0, [], void 0, true, true);
      if (["ArrowLeft", "ArrowRight"].includes(key)) {
        const isExpandable = (_c = (_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.firstElementChild) === null || _b === void 0 ? void 0 : _b.firstElementChild) === null || _c === void 0 ? void 0 : _c.classList.contains(tree_view_default.treeViewNodeToggle);
        const isExpanded = (_d = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest("li")) === null || _d === void 0 ? void 0 : _d.classList.contains("pf-m-expanded");
        if (key === "ArrowLeft") {
          if (isExpandable && isExpanded) {
            activeElement.click();
          } else {
            const parentList = (_e = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest("ul")) === null || _e === void 0 ? void 0 : _e.parentElement;
            if ((parentList === null || parentList === void 0 ? void 0 : parentList.tagName) !== "DIV") {
              const parentButton = parentList === null || parentList === void 0 ? void 0 : parentList.querySelector("button");
              activeElement.tabIndex = -1;
              if (parentButton) {
                parentButton.tabIndex = 0;
                parentButton.focus();
              }
            }
          }
        } else {
          if (isExpandable && !isExpanded) {
            activeElement.tabIndex = -1;
            activeElement.click();
            const childElement = (_g = (_f = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest("li")) === null || _f === void 0 ? void 0 : _f.querySelector("ul > li")) === null || _g === void 0 ? void 0 : _g.querySelector("button");
            if (childElement) {
              childElement.tabIndex = 0;
              childElement.focus();
            }
          }
        }
        event.preventDefault();
      }
    };
    this.handleKeysCheckbox = (event) => {
      var _a, _b, _c, _d, _e;
      if (!this.treeRef.current.contains(event.target)) {
        return;
      }
      const activeElement = document.activeElement;
      const key = event.key;
      if (key === KeyTypes.Space) {
        activeElement.click();
        event.preventDefault();
      }
      const treeNodes = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(tree_view_default.treeViewNode)).filter((el) => !el.closest(`.${tree_view_default.treeViewList}[inert]`));
      handleArrows(event, treeNodes, (element) => element.contains(activeElement), (element) => element.querySelector("button,input"), [], void 0, true, true);
      if (["ArrowLeft", "ArrowRight"].includes(key)) {
        if (key === "ArrowLeft") {
          if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === "INPUT") {
            ((_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement) === null || _b === void 0 ? void 0 : _b.previousSibling) && activeElement.parentElement.previousSibling.focus();
          } else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.previousSibling) {
            if (((_c = activeElement.previousElementSibling) === null || _c === void 0 ? void 0 : _c.tagName) === "SPAN") {
              activeElement.previousSibling.firstChild.focus();
            } else {
              activeElement.previousSibling.focus();
            }
          }
        } else {
          if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === "INPUT") {
            ((_d = activeElement.parentElement) === null || _d === void 0 ? void 0 : _d.nextSibling) && activeElement.parentElement.nextSibling.focus();
          } else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.nextSibling) {
            if (((_e = activeElement.nextElementSibling) === null || _e === void 0 ? void 0 : _e.tagName) === "SPAN") {
              activeElement.nextSibling.firstChild.focus();
            } else {
              activeElement.nextSibling.focus();
            }
          }
        }
        event.preventDefault();
      }
    };
    this.variantStyleModifiers = {
      default: "",
      compact: tree_view_default.modifiers.compact,
      compactNoBackground: [tree_view_default.modifiers.compact, tree_view_default.modifiers.noBackground]
    };
  }
  componentDidMount() {
    var _a;
    if (canUseDOM) {
      window.addEventListener("keydown", this.props.hasCheckboxes || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);
    }
    if (this.props.hasCheckboxes || this.props.hasSelectableNodes) {
      const firstToggle = this.treeRef.current.getElementsByClassName(tree_view_default.treeViewNodeToggle)[0];
      if (firstToggle) {
        firstToggle.tabIndex = 0;
      }
      if (this.props.hasCheckboxes) {
        const firstInput = this.treeRef.current.getElementsByTagName("INPUT")[0];
        if (firstInput) {
          firstInput.tabIndex = 0;
        }
      }
      if (this.props.hasSelectableNodes) {
        const firstTextButton = this.treeRef.current.getElementsByClassName(tree_view_default.treeViewNodeText)[0];
        if (firstTextButton) {
          firstTextButton.tabIndex = 0;
        }
      }
    } else {
      ((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName(tree_view_default.treeViewNode)[0]).tabIndex = 0;
    }
  }
  componentWillUnmount() {
    if (canUseDOM) {
      window.removeEventListener("keydown", this.props.hasCheckboxes || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);
    }
  }
  render() {
    const _a = this.props, { children, hasCheckboxes, hasGuides, variant, className, hasSelectableNodes } = _a, props = __rest(_a, ["children", "hasCheckboxes", "hasGuides", "variant", "className", "hasSelectableNodes"]);
    return (0, import_jsx_runtime258.jsx)("div", Object.assign({ className: css(tree_view_default.treeView, hasGuides && tree_view_default.modifiers.guides, this.variantStyleModifiers[variant], className), ref: this.treeRef }, props, { children }));
  }
};

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeView.js
var TreeView = (_a) => {
  var { data, isNested = false, hasCheckboxes = false, hasBadges = false, hasGuides = false, hasSelectableNodes = false, variant = "default", defaultAllExpanded = false, allExpanded, icon, isMultiSelectable = false, expandedIcon, parentItem, onSelect, onCheck, onExpand, onCollapse, toolbar, activeItems, compareItems = (item, itemToCheck) => item.id === itemToCheck.id, className, useMemo: useMemo7, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, hasAnimations } = _a, props = __rest(_a, ["data", "isNested", "hasCheckboxes", "hasBadges", "hasGuides", "hasSelectableNodes", "variant", "defaultAllExpanded", "allExpanded", "icon", "isMultiSelectable", "expandedIcon", "parentItem", "onSelect", "onCheck", "onExpand", "onCollapse", "toolbar", "activeItems", "compareItems", "className", "useMemo", "aria-label", "aria-labelledby", "hasAnimations"]);
  const treeViewList = (0, import_jsx_runtime259.jsx)(TreeViewList, Object.assign({ isNested, toolbar, isMultiSelectable, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby }, props, { children: data.map((item) => {
    var _a2, _b;
    return (0, import_jsx_runtime259.jsx)(TreeViewListItem, Object.assign({ name: item.name, hasAnimations, title: item.title, id: item.id, isExpanded: allExpanded, isSelectable: hasSelectableNodes, defaultExpanded: item.defaultExpanded !== void 0 ? item.defaultExpanded : defaultAllExpanded, onSelect, onCheck, onExpand, onCollapse, hasCheckbox: item.hasCheckbox !== void 0 ? item.hasCheckbox : hasCheckboxes, checkProps: item.checkProps, hasBadge: item.hasBadge !== void 0 ? item.hasBadge : hasBadges, customBadgeContent: item.customBadgeContent, badgeProps: item.badgeProps, activeItems, parentItem, itemData: item, icon: item.icon !== void 0 ? item.icon : icon, expandedIcon: item.expandedIcon !== void 0 ? item.expandedIcon : expandedIcon, action: item.action, compareItems, isCompact: variant === "compact" || variant === "compactNoBackground", useMemo: useMemo7 }, item.children && {
      children: (0, import_jsx_runtime259.jsx)(TreeView, { data: item.children, isNested: true, hasAnimations, parentItem: item, hasCheckboxes, hasBadges, hasGuides, hasSelectableNodes, variant, allExpanded, defaultAllExpanded, onSelect, onCheck, onExpand, onCollapse, activeItems, icon, expandedIcon })
    }), ((_a2 = item.id) === null || _a2 === void 0 ? void 0 : _a2.toString()) || ((_b = item.name) === null || _b === void 0 ? void 0 : _b.toString()));
  }) }));
  return (0, import_jsx_runtime259.jsx)(import_jsx_runtime259.Fragment, { children: parentItem ? treeViewList : (0, import_jsx_runtime259.jsx)(TreeViewRoot, Object.assign({ hasSelectableNodes, hasCheckboxes, hasGuides, variant, className }, props, { children: treeViewList })) });
};
TreeView.displayName = "TreeView";

// node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewSearch.js
var import_jsx_runtime260 = __toESM(require_jsx_runtime());
var TreeViewSearch = (_a) => {
  var { className, onSearch, id, name, "aria-label": ariaLabel } = _a, props = __rest(_a, ["className", "onSearch", "id", "name", "aria-label"]);
  return (0, import_jsx_runtime260.jsx)("div", { className: css(tree_view_default.treeViewSearch, className), children: (0, import_jsx_runtime260.jsxs)("div", { className: css(form_control_default.formControl, form_control_default.modifiers.icon), children: [(0, import_jsx_runtime260.jsx)("input", Object.assign({ onChange: onSearch, id, name, "aria-label": ariaLabel, type: "search" }, props)), (0, import_jsx_runtime260.jsx)("div", { className: css(form_control_default.formControlUtilities), children: (0, import_jsx_runtime260.jsx)("div", { className: css(form_control_default.formControlIcon), children: (0, import_jsx_runtime260.jsx)(search_icon_default, {}) }) })] }) });
};
TreeViewSearch.displayName = "TreeViewSearch";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/Wizard.js
var import_jsx_runtime269 = __toESM(require_jsx_runtime());
var import_react127 = __toESM(require_react());

// node_modules/@patternfly/react-styles/css/components/Wizard/wizard.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/components/Wizard/wizard.css";
var wizard_default = {
  "dirRtl": "pf-v6-m-dir-rtl",
  "drawer": "pf-v6-c-drawer",
  "modalBox": "pf-v6-c-modal-box",
  "modifiers": {
    "finished": "pf-m-finished",
    "expanded": "pf-m-expanded",
    "danger": "pf-m-danger",
    "success": "pf-m-success",
    "current": "pf-m-current",
    "expandable": "pf-m-expandable",
    "disabled": "pf-m-disabled",
    "noPadding": "pf-m-no-padding"
  },
  "wizard": "pf-v6-c-wizard",
  "wizardClose": "pf-v6-c-wizard__close",
  "wizardDescription": "pf-v6-c-wizard__description",
  "wizardFooter": "pf-v6-c-wizard__footer",
  "wizardHeader": "pf-v6-c-wizard__header",
  "wizardInnerWrap": "pf-v6-c-wizard__inner-wrap",
  "wizardMain": "pf-v6-c-wizard__main",
  "wizardMainBody": "pf-v6-c-wizard__main-body",
  "wizardNav": "pf-v6-c-wizard__nav",
  "wizardNavItem": "pf-v6-c-wizard__nav-item",
  "wizardNavLink": "pf-v6-c-wizard__nav-link",
  "wizardNavLinkMain": "pf-v6-c-wizard__nav-link-main",
  "wizardNavLinkStatusIcon": "pf-v6-c-wizard__nav-link-status-icon",
  "wizardNavLinkText": "pf-v6-c-wizard__nav-link-text",
  "wizardNavLinkToggle": "pf-v6-c-wizard__nav-link-toggle",
  "wizardNavLinkToggleIcon": "pf-v6-c-wizard__nav-link-toggle-icon",
  "wizardNavList": "pf-v6-c-wizard__nav-list",
  "wizardOuterWrap": "pf-v6-c-wizard__outer-wrap",
  "wizardTitle": "pf-v6-c-wizard__title",
  "wizardTitleText": "pf-v6-c-wizard__title-text",
  "wizardToggle": "pf-v6-c-wizard__toggle",
  "wizardToggleIcon": "pf-v6-c-wizard__toggle-icon",
  "wizardToggleList": "pf-v6-c-wizard__toggle-list",
  "wizardToggleListItem": "pf-v6-c-wizard__toggle-list-item",
  "wizardToggleNum": "pf-v6-c-wizard__toggle-num",
  "wizardToggleSeparator": "pf-v6-c-wizard__toggle-separator",
  "wizardToggleStatusIcon": "pf-v6-c-wizard__toggle-status-icon"
};

// node_modules/@patternfly/react-tokens/dist/esm/c_wizard_Height.js
var c_wizard_Height = {
  "name": "--pf-v6-c-wizard--Height",
  "value": "initial",
  "var": "var(--pf-v6-c-wizard--Height)"
};
var c_wizard_Height_default = c_wizard_Height;

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/types.js
var import_react119 = __toESM(require_react());
var WizardNavItemStatus;
(function(WizardNavItemStatus2) {
  WizardNavItemStatus2["Default"] = "default";
  WizardNavItemStatus2["Error"] = "error";
  WizardNavItemStatus2["Success"] = "success";
})(WizardNavItemStatus || (WizardNavItemStatus = {}));
var WizardStepChangeScope;
(function(WizardStepChangeScope2) {
  WizardStepChangeScope2["Next"] = "next";
  WizardStepChangeScope2["Back"] = "back";
  WizardStepChangeScope2["Nav"] = "nav";
})(WizardStepChangeScope || (WizardStepChangeScope = {}));
function isCustomWizardNav(nav) {
  return typeof nav === "function" || (0, import_react119.isValidElement)(nav);
}
function isCustomWizardNavItem(navItem) {
  return typeof navItem === "function" || (0, import_react119.isValidElement)(navItem);
}
function isCustomWizardFooter(footer) {
  return typeof footer === "function" || (0, import_react119.isValidElement)(footer);
}
function isWizardBasicStep(step) {
  return (step === null || step === void 0 ? void 0 : step.subStepIds) === void 0 && !isWizardSubStep(step);
}
function isWizardSubStep(step) {
  return (step === null || step === void 0 ? void 0 : step.parentId) !== void 0;
}
function isWizardParentStep(step) {
  return (step === null || step === void 0 ? void 0 : step.subStepIds) !== void 0;
}

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/utils.js
var import_react122 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardStep.js
var import_jsx_runtime263 = __toESM(require_jsx_runtime());
var import_react121 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardContext.js
var import_jsx_runtime262 = __toESM(require_jsx_runtime());
var import_react120 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardFooter.js
var import_jsx_runtime261 = __toESM(require_jsx_runtime());
var WizardFooterWrapper = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime261.jsx)("footer", Object.assign({ className: css(wizard_default.wizardFooter, className) }, props, { children }));
};
var WizardFooter = (_a) => {
  var { activeStep } = _a, internalProps = __rest(_a, ["activeStep"]);
  const activeStepFooter = !isCustomWizardFooter(activeStep === null || activeStep === void 0 ? void 0 : activeStep.footer) && (activeStep === null || activeStep === void 0 ? void 0 : activeStep.footer);
  return (0, import_jsx_runtime261.jsx)(InternalWizardFooter, Object.assign({}, internalProps, activeStepFooter));
};
var InternalWizardFooter = (_a) => {
  var { onNext, onBack, onClose, isNextDisabled, isBackDisabled, isBackHidden, isCancelHidden, nextButtonText = "Next", backButtonText = "Back", cancelButtonText = "Cancel", nextButtonProps, backButtonProps, cancelButtonProps, className } = _a, props = __rest(_a, ["onNext", "onBack", "onClose", "isNextDisabled", "isBackDisabled", "isBackHidden", "isCancelHidden", "nextButtonText", "backButtonText", "cancelButtonText", "nextButtonProps", "backButtonProps", "cancelButtonProps", "className"]);
  return (0, import_jsx_runtime261.jsx)(WizardFooterWrapper, Object.assign({ className }, props, { children: (0, import_jsx_runtime261.jsxs)(ActionList, { children: [(0, import_jsx_runtime261.jsxs)(ActionListGroup, { children: [!isBackHidden && (0, import_jsx_runtime261.jsx)(ActionListItem, { children: (0, import_jsx_runtime261.jsx)(Button, Object.assign({ variant: ButtonVariant.secondary, onClick: onBack, isDisabled: isBackDisabled }, backButtonProps, { children: backButtonText })) }), (0, import_jsx_runtime261.jsx)(ActionListItem, { children: (0, import_jsx_runtime261.jsx)(Button, Object.assign({ variant: ButtonVariant.primary, type: "submit", onClick: onNext, isDisabled: isNextDisabled }, nextButtonProps, { children: nextButtonText })) })] }), !isCancelHidden && (0, import_jsx_runtime261.jsx)(ActionListGroup, { children: (0, import_jsx_runtime261.jsx)(ActionListItem, { children: (0, import_jsx_runtime261.jsx)(Button, Object.assign({ variant: ButtonVariant.link, onClick: onClose }, cancelButtonProps, { children: cancelButtonText })) }) })] }) }));
};
WizardFooterWrapper.displayName = "WizardFooterWrapper";
WizardFooter.displayName = "WizardFooter";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardContext.js
var WizardContext = (0, import_react120.createContext)({});
var WizardContextProvider = ({ steps: initialSteps, footer: initialFooter, activeStepIndex, children, onNext, onBack, onClose, goToStepById, goToStepByName, goToStepByIndex, shouldFocusContent, mainWrapperRef }) => {
  const [currentSteps, setCurrentSteps] = (0, import_react120.useState)(initialSteps);
  const [currentFooter, setCurrentFooter] = (0, import_react120.useState)();
  (0, import_react120.useEffect)(() => {
    if (currentSteps.length !== initialSteps.length) {
      const newSteps = initialSteps.map((newStep) => {
        const currentStepMatch = currentSteps.find((step) => step.id === newStep.id);
        if (currentStepMatch) {
          return Object.assign(Object.assign({}, currentStepMatch), newStep);
        }
        return newStep;
      });
      setCurrentSteps(newSteps);
    }
  }, [currentSteps, initialSteps]);
  const steps = (0, import_react120.useMemo)(() => currentSteps.map((currentStepProps, index) => Object.assign(Object.assign({}, currentStepProps), initialSteps[index])), [initialSteps, currentSteps]);
  const activeStep = (0, import_react120.useMemo)(() => steps.find((step) => step.index === activeStepIndex), [activeStepIndex, steps]);
  const close = (0, import_react120.useCallback)(() => onClose === null || onClose === void 0 ? void 0 : onClose(null), [onClose]);
  const goToNextStep = (0, import_react120.useCallback)(() => onNext(null, steps), [onNext, steps]);
  const goToPrevStep = (0, import_react120.useCallback)(() => onBack(null, steps), [onBack, steps]);
  const footer = (0, import_react120.useMemo)(() => {
    const wizardFooter = (activeStep === null || activeStep === void 0 ? void 0 : activeStep.footer) || currentFooter || initialFooter;
    if (isCustomWizardFooter(wizardFooter)) {
      const customFooter = wizardFooter;
      return typeof customFooter === "function" ? customFooter(activeStep, goToNextStep, goToPrevStep, close) : customFooter;
    }
    return (0, import_jsx_runtime262.jsx)(WizardFooter, Object.assign({ activeStep, onNext: goToNextStep, onBack: goToPrevStep, onClose: close, isBackDisabled: (activeStep === null || activeStep === void 0 ? void 0 : activeStep.index) === 1 || isWizardSubStep(activeStep) && (activeStep === null || activeStep === void 0 ? void 0 : activeStep.index) === 2 }, wizardFooter));
  }, [currentFooter, initialFooter, activeStep, goToNextStep, goToPrevStep, close]);
  const getStep = (0, import_react120.useCallback)((stepId) => steps.find((step) => step.id === stepId), [steps]);
  const setStep = (0, import_react120.useCallback)((step) => setCurrentSteps((prevSteps) => prevSteps.map((prevStep) => {
    if (prevStep.id === step.id) {
      return Object.assign(Object.assign({}, prevStep), step);
    }
    return prevStep;
  })), []);
  return (0, import_jsx_runtime262.jsx)(WizardContext.Provider, { value: {
    steps,
    activeStep,
    footer,
    close,
    getStep,
    setStep,
    goToNextStep,
    goToPrevStep,
    setFooter: setCurrentFooter,
    goToStepById: (0, import_react120.useCallback)((id) => goToStepById(steps, id), [goToStepById, steps]),
    goToStepByName: (0, import_react120.useCallback)((name) => goToStepByName(steps, name), [goToStepByName, steps]),
    goToStepByIndex: (0, import_react120.useCallback)((index) => goToStepByIndex(null, steps, index), [goToStepByIndex, steps]),
    shouldFocusContent,
    mainWrapperRef
  }, children });
};
WizardContextProvider.displayName = "WizardContextProvider";
var useWizardContext = () => (0, import_react120.useContext)(WizardContext);

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardStep.js
var WizardStep = (_a) => {
  var { children, steps: _subSteps } = _a, props = __rest(_a, ["children", "steps"]);
  const { activeStep, setStep } = useWizardContext();
  const { id, name, body, isDisabled, isHidden, navItem, footer, status } = props;
  const isParentStep = isWizardParentStep(activeStep);
  (0, import_react121.useEffect)(() => {
    setStep(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
      id,
      name
    }, body && { body }), isDisabled && { isDisabled }), isHidden && { isHidden }), navItem && { navItem }), footer && { footer }), status && { status }), !isParentStep && id === (activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) && !(activeStep === null || activeStep === void 0 ? void 0 : activeStep.isVisited) && { isVisited: true }));
  }, [
    body,
    footer,
    id,
    isDisabled,
    isHidden,
    name,
    navItem,
    status,
    isParentStep,
    setStep,
    activeStep === null || activeStep === void 0 ? void 0 : activeStep.id,
    activeStep === null || activeStep === void 0 ? void 0 : activeStep.isVisited
  ]);
  return (0, import_jsx_runtime263.jsx)(import_jsx_runtime263.Fragment, { children });
};
WizardStep.displayName = "WizardStep";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/utils.js
var buildSteps = (children) => import_react122.Children.toArray(children).reduce((acc, child, index) => {
  if (isWizardStep(child)) {
    const { props: childProps } = child;
    const { steps: childStepComponents, id } = childProps;
    const stepIndex = acc.length + 1;
    const subSteps = [];
    acc.push(Object.assign(Object.assign(Object.assign({ index: stepIndex, component: child }, index === 0 && !(childStepComponents === null || childStepComponents === void 0 ? void 0 : childStepComponents.length) && { isVisited: true }), childStepComponents && {
      subStepIds: childStepComponents === null || childStepComponents === void 0 ? void 0 : childStepComponents.map((childStepComponent, subStepIndex) => {
        subSteps.push(Object.assign(Object.assign({ index: stepIndex + subStepIndex + 1, component: childStepComponent, parentId: id }, index === 0 && subStepIndex === 0 && { isVisited: true }), normalizeStepProps(childStepComponent.props)));
        return childStepComponent.props.id;
      })
    }), normalizeStepProps(childProps)), ...subSteps);
  } else {
    throw new Error("Wizard only accepts children of type WizardStep.");
  }
  return acc;
}, []);
function isWizardStep(child) {
  return (0, import_react122.isValidElement)(child) && child.type === WizardStep;
}
var normalizeStepProps = (_a) => {
  var { children: _children, steps: _steps } = _a, controlStep = __rest(_a, ["children", "steps"]);
  return controlStep;
};
var isStepEnabled = (steps, step) => {
  if (!isWizardParentStep(step) && !step.isHidden && !step.isDisabled) {
    if (isWizardSubStep(step)) {
      const parentStep = steps.find((otherStep) => otherStep.id === step.parentId);
      if (!parentStep.isHidden && !parentStep.isDisabled) {
        return true;
      }
    } else {
      return true;
    }
  }
  return false;
};

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardToggle.js
var import_jsx_runtime265 = __toESM(require_jsx_runtime());
var import_react124 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardBody.js
var import_jsx_runtime264 = __toESM(require_jsx_runtime());
var import_react123 = __toESM(require_react());
var WizardBody = (_a) => {
  var { children, className, hasNoPadding = false, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, component = "div" } = _a, props = __rest(_a, ["children", "className", "hasNoPadding", "aria-label", "aria-labelledby", "component"]);
  const [hasScrollbar, setHasScrollbar] = (0, import_react123.useState)(false);
  const [previousWidth, setPreviousWidth] = (0, import_react123.useState)(void 0);
  const WrapperComponent = component;
  const { activeStep, shouldFocusContent, mainWrapperRef } = (0, import_react123.useContext)(WizardContext);
  const defaultAriaLabel = ariaLabel || `${activeStep === null || activeStep === void 0 ? void 0 : activeStep.name} content`;
  (0, import_react123.useEffect)(() => {
    const resize = () => {
      if (mainWrapperRef === null || mainWrapperRef === void 0 ? void 0 : mainWrapperRef.current) {
        const { offsetWidth, offsetHeight, scrollHeight } = mainWrapperRef.current;
        if (previousWidth !== offsetWidth) {
          setPreviousWidth(offsetWidth);
          setHasScrollbar(offsetHeight < scrollHeight);
        }
      }
    };
    const handleResizeWithDelay = debounce(resize, 250);
    let observer = () => {
    };
    if (mainWrapperRef === null || mainWrapperRef === void 0 ? void 0 : mainWrapperRef.current) {
      observer = getResizeObserver(mainWrapperRef.current, handleResizeWithDelay);
      const { offsetHeight, scrollHeight } = mainWrapperRef.current;
      setHasScrollbar(offsetHeight < scrollHeight);
      setPreviousWidth(mainWrapperRef.current.offsetWidth);
    }
    return () => {
      observer();
    };
  }, [previousWidth]);
  return (0, import_jsx_runtime264.jsx)(WrapperComponent, Object.assign({ ref: mainWrapperRef }, shouldFocusContent && { tabIndex: -1 }, component === "div" && hasScrollbar && { role: "region" }, hasScrollbar && { "aria-label": defaultAriaLabel, "aria-labelledby": ariaLabelledBy, tabIndex: 0 }, { className: css(wizard_default.wizardMain, className) }, props, { children: (0, import_jsx_runtime264.jsx)("div", { className: css(wizard_default.wizardMainBody, hasNoPadding && wizard_default.modifiers.noPadding), children }) }));
};
WizardBody.displayName = "WizardBody";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardToggle.js
var WizardToggle = ({ steps, activeStep, footer, nav, isNavExpanded, toggleNavExpanded, "aria-label": ariaLabel = "Wizard toggle" }) => {
  const isActiveSubStep = isWizardSubStep(activeStep);
  const parentStep = isActiveSubStep && steps.find((step) => step.id === activeStep.parentId);
  const nonSubSteps = steps.filter((step) => !isWizardSubStep(step));
  const wizardToggleIndex = nonSubSteps.indexOf(parentStep || activeStep) + 1;
  const isActiveStepStatus = activeStep.status;
  const handleKeyClicks = (0, import_react124.useCallback)((event) => {
    if (isNavExpanded && event.key === KeyTypes.Escape) {
      toggleNavExpanded === null || toggleNavExpanded === void 0 ? void 0 : toggleNavExpanded(event);
    }
  }, [isNavExpanded, toggleNavExpanded]);
  (0, import_react124.useEffect)(() => {
    const target = typeof document !== "undefined" ? document.body : null;
    target === null || target === void 0 ? void 0 : target.addEventListener("keydown", handleKeyClicks, false);
    return () => {
      target === null || target === void 0 ? void 0 : target.removeEventListener("keydown", handleKeyClicks, false);
    };
  }, [handleKeyClicks]);
  const bodyContent = steps.map((step) => {
    var _a;
    const props = ((_a = step.component) === null || _a === void 0 ? void 0 : _a.props) || {};
    const { children, body } = props, propsWithoutChildren = __rest(props, ["children", "body"]);
    return (0, import_jsx_runtime265.jsxs)(import_react124.Fragment, { children: [(activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) === step.id && (0, import_jsx_runtime265.jsx)(WizardBody, Object.assign({}, body, { children })), (0, import_jsx_runtime265.jsx)("div", { style: { display: "none" }, children: (0, import_jsx_runtime265.jsx)(WizardStep, Object.assign({}, propsWithoutChildren)) }, step.id)] }, step.id);
  });
  return (0, import_jsx_runtime265.jsxs)(import_jsx_runtime265.Fragment, { children: [(0, import_jsx_runtime265.jsxs)("button", { onClick: toggleNavExpanded, className: css(wizard_default.wizardToggle, isNavExpanded && "pf-m-expanded"), "aria-label": ariaLabel, "aria-expanded": isNavExpanded, children: [(0, import_jsx_runtime265.jsxs)("span", { className: css(wizard_default.wizardToggleList), children: [(0, import_jsx_runtime265.jsxs)("span", { className: css(wizard_default.wizardToggleListItem, isActiveStepStatus === "error" && wizard_default.modifiers.danger, isActiveStepStatus === "success" && wizard_default.modifiers.success), children: [isActiveStepStatus === "error" && (0, import_jsx_runtime265.jsx)("span", { className: css(wizard_default.wizardToggleStatusIcon), children: (0, import_jsx_runtime265.jsx)(exclamation_circle_icon_default, {}) }), isActiveStepStatus === "success" && (0, import_jsx_runtime265.jsx)("span", { className: css(wizard_default.wizardToggleStatusIcon), children: (0, import_jsx_runtime265.jsx)(check_circle_icon_default, {}) }), isActiveStepStatus !== "success" && isActiveStepStatus !== "error" && (0, import_jsx_runtime265.jsx)("span", { className: css(wizard_default.wizardToggleNum), children: wizardToggleIndex }), " ", (parentStep === null || parentStep === void 0 ? void 0 : parentStep.name) || (activeStep === null || activeStep === void 0 ? void 0 : activeStep.name), isActiveSubStep && (0, import_jsx_runtime265.jsx)(angle_right_icon_default, { className: css(wizard_default.wizardToggleSeparator) })] }), isActiveSubStep && (0, import_jsx_runtime265.jsx)("span", { className: css(wizard_default.wizardToggleListItem), children: activeStep === null || activeStep === void 0 ? void 0 : activeStep.name })] }), (0, import_jsx_runtime265.jsx)("span", { className: css(wizard_default.wizardToggleIcon), children: (0, import_jsx_runtime265.jsx)(caret_down_icon_default, {}) })] }), (0, import_jsx_runtime265.jsxs)("div", { className: css(wizard_default.wizardOuterWrap), children: [(0, import_jsx_runtime265.jsxs)("div", { className: css(wizard_default.wizardInnerWrap), children: [nav, bodyContent] }), footer] })] });
};
WizardToggle.displayName = "WizardToggle";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNavInternal.js
var import_jsx_runtime268 = __toESM(require_jsx_runtime());
var import_react126 = __toESM(require_react());

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNav.js
var import_jsx_runtime266 = __toESM(require_jsx_runtime());
var WizardNav = (_a) => {
  var { children, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, isExpanded = false, isInnerList = false, className } = _a, props = __rest(_a, ["children", "aria-label", "aria-labelledby", "isExpanded", "isInnerList", "className"]);
  if (isInnerList) {
    return (0, import_jsx_runtime266.jsx)("ol", Object.assign({ className: css(wizard_default.wizardNavList, className), role: "list" }, props, { children }));
  }
  return (0, import_jsx_runtime266.jsx)("nav", Object.assign({ className: css(wizard_default.wizardNav, isExpanded && wizard_default.modifiers.expanded, className), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy }, props, { children: (0, import_jsx_runtime266.jsx)("ol", { className: css(wizard_default.wizardNavList), role: "list", children }) }));
};
WizardNav.displayName = "WizardNav";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNavItem.js
var import_jsx_runtime267 = __toESM(require_jsx_runtime());
var import_react125 = __toESM(require_react());
var WizardNavItem = (_a) => {
  var {
    children = null,
    content = "",
    isCurrent = false,
    isDisabled = false,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isVisited = false,
    stepIndex,
    onClick,
    component: NavItemComponent = "button",
    href,
    isExpandable = false,
    id,
    status = "default",
    target,
    ouiaId,
    ouiaSafe = true,
    className
  } = _a, props = __rest(_a, ["children", "content", "isCurrent", "isDisabled", "isVisited", "stepIndex", "onClick", "component", "href", "isExpandable", "id", "status", "target", "ouiaId", "ouiaSafe", "className"]);
  const [isExpanded, setIsExpanded] = (0, import_react125.useState)(false);
  const ouiaProps = useOUIAProps(WizardNavItem.displayName, ouiaId, ouiaSafe);
  (0, import_react125.useEffect)(() => {
    setIsExpanded(isCurrent);
  }, [isCurrent]);
  if (NavItemComponent === "a" && !href && true) {
    console.error("WizardNavItem: When using an anchor, please provide an href");
  }
  return (0, import_jsx_runtime267.jsxs)("li", Object.assign({ className: css(wizard_default.wizardNavItem, isExpandable && wizard_default.modifiers.expandable, isExpandable && isExpanded && wizard_default.modifiers.expanded, className) }, props, { children: [(0, import_jsx_runtime267.jsxs)(NavItemComponent, Object.assign({}, NavItemComponent === "a" ? { tabIndex: isDisabled ? -1 : void 0, href, target } : { disabled: isDisabled }, id && { id: id.toString() }, { onClick: (e) => {
    e.stopPropagation();
    isExpandable ? setIsExpanded(!isExpanded || isCurrent) : onClick === null || onClick === void 0 ? void 0 : onClick(e, stepIndex);
  }, className: css(wizard_default.wizardNavLink, isCurrent && wizard_default.modifiers.current, isDisabled && wizard_default.modifiers.disabled, status === WizardNavItemStatus.Error && wizard_default.modifiers.danger, status === WizardNavItemStatus.Success && wizard_default.modifiers.success), "aria-disabled": isDisabled ? true : null, "aria-current": isCurrent && !children ? "step" : false }, isExpandable && { "aria-expanded": isExpanded }, ouiaProps, { children: [status !== WizardNavItemStatus.Default && (0, import_jsx_runtime267.jsxs)(import_jsx_runtime267.Fragment, { children: [(0, import_jsx_runtime267.jsxs)("span", { className: "pf-v6-screen-reader", children: [", ", status] }), (0, import_jsx_runtime267.jsxs)("span", { className: css(wizard_default.wizardNavLinkStatusIcon), children: [status === WizardNavItemStatus.Error && (0, import_jsx_runtime267.jsx)(exclamation_circle_icon_default, {}), status === WizardNavItemStatus.Success && (0, import_jsx_runtime267.jsx)(check_circle_icon_default, {})] })] }), (0, import_jsx_runtime267.jsx)("span", { className: css(wizard_default.wizardNavLinkMain), children: isExpandable ? (0, import_jsx_runtime267.jsxs)(import_jsx_runtime267.Fragment, { children: [(0, import_jsx_runtime267.jsx)("span", { className: css(wizard_default.wizardNavLinkText), children: content }), (0, import_jsx_runtime267.jsx)("span", { className: css(wizard_default.wizardNavLinkToggle), children: (0, import_jsx_runtime267.jsx)("span", { className: css(wizard_default.wizardNavLinkToggleIcon), children: (0, import_jsx_runtime267.jsx)(angle_right_icon_default, { "aria-label": `${isCurrent ? "Collapse" : "Expand"} step icon` }) }) })] }) : (0, import_jsx_runtime267.jsx)(import_jsx_runtime267.Fragment, { children: content }) })] })), children] }));
};
WizardNavItem.displayName = "WizardNavItem";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardNavInternal.js
var WizardNavInternal = ({ nav, navAriaLabel, isVisitRequired, isProgressive, isNavExpanded }) => {
  const { activeStep, steps, goToStepByIndex } = useWizardContext();
  const wizardNavProps = Object.assign({ isExpanded: isNavExpanded, "aria-label": navAriaLabel || (nav === null || nav === void 0 ? void 0 : nav["aria-label"]) || "Wizard steps" }, (nav === null || nav === void 0 ? void 0 : nav["aria-labelledby"]) && {
    "aria-labelledby": nav["aria-labelledby"]
  });
  return (0, import_jsx_runtime268.jsx)(WizardNav, Object.assign({}, wizardNavProps, { children: steps.map((step, stepIndex) => {
    var _a;
    const hasVisitedNextStep = steps.some((step2) => step2.index > stepIndex + 1 && step2.isVisited);
    const isStepDisabled = step.isDisabled || isVisitRequired && !step.isVisited && !hasVisitedNextStep;
    const customStepNavItem = isCustomWizardNavItem(step.navItem) && (0, import_jsx_runtime268.jsx)(import_react126.Fragment, { children: typeof step.navItem === "function" ? step.navItem(step, activeStep, steps, goToStepByIndex) : step.navItem }, step.id);
    if (isWizardParentStep(step) && !step.isHidden) {
      let firstSubStepIndex;
      let hasActiveChild = false;
      const subNavItems = (_a = step.subStepIds) === null || _a === void 0 ? void 0 : _a.map((subStepId, subStepIndex) => {
        const subStep = steps.find((step2) => step2.id === subStepId);
        const hasVisitedNextStep2 = steps.some((step2) => step2.index > subStep.index && step2.isVisited);
        const isSubStepDisabled = subStep.isDisabled || isVisitRequired && !subStep.isVisited && !hasVisitedNextStep2;
        const customSubStepNavItem = isCustomWizardNavItem(subStep.navItem) && (0, import_jsx_runtime268.jsx)(import_react126.Fragment, { children: typeof subStep.navItem === "function" ? subStep.navItem(subStep, activeStep, steps, goToStepByIndex) : subStep.navItem }, subStep.id);
        if (subStep.isHidden) {
          return;
        }
        if (subStepIndex === 0) {
          firstSubStepIndex = subStep.index;
        }
        if ((activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) === subStep.id) {
          hasActiveChild = true;
        }
        if (!isProgressive || isProgressive && subStep.index <= activeStep.index) {
          return customSubStepNavItem || (0, import_jsx_runtime268.jsx)(WizardNavItem, Object.assign({ id: subStep.id, content: subStep.name, isCurrent: (activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) === subStep.id, isDisabled: isSubStepDisabled || isStepDisabled, isVisited: subStep.isVisited, stepIndex: subStep.index, onClick: () => goToStepByIndex(subStep.index), status: subStep.status }, subStep.navItem), subStep.id);
        }
      });
      const hasEnabledChildren = import_react126.Children.toArray(subNavItems).some((child) => (0, import_react126.isValidElement)(child) && !child.props.isDisabled);
      if (!isProgressive || isProgressive && step.index <= activeStep.index) {
        return customStepNavItem || (0, import_jsx_runtime268.jsx)(WizardNavItem, Object.assign({ id: step.id, content: step.name, isExpandable: step.isExpandable, isCurrent: hasActiveChild, isDisabled: !hasEnabledChildren || isStepDisabled, isVisited: step.isVisited, stepIndex: firstSubStepIndex, onClick: () => goToStepByIndex(firstSubStepIndex), status: step.status }, step.navItem, { children: (0, import_jsx_runtime268.jsx)(WizardNav, Object.assign({}, wizardNavProps, { isInnerList: true, children: subNavItems })) }), step.id);
      }
    }
    if (isWizardBasicStep(step) && !step.isHidden && (!isProgressive || isProgressive && step.index <= activeStep.index)) {
      return customStepNavItem || (0, import_jsx_runtime268.jsx)(WizardNavItem, Object.assign({ id: step.id, content: step.name, isCurrent: (activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) === step.id, isDisabled: isStepDisabled, isVisited: step.isVisited, stepIndex: step.index, onClick: () => goToStepByIndex(step.index), status: step.status }, step.navItem), step.id);
    }
  }) }));
};

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/Wizard.js
var Wizard = (_a) => {
  var { children, footer, height, width, className, header, nav, navAriaLabel, startIndex = 1, isVisitRequired = false, isProgressive = false, onStepChange, onSave, onClose, shouldFocusContent = true } = _a, wrapperProps = __rest(_a, ["children", "footer", "height", "width", "className", "header", "nav", "navAriaLabel", "startIndex", "isVisitRequired", "isProgressive", "onStepChange", "onSave", "onClose", "shouldFocusContent"]);
  const [activeStepIndex, setActiveStepIndex] = (0, import_react127.useState)(startIndex);
  const initialSteps = buildSteps(children);
  const firstStepRef = (0, import_react127.useRef)(initialSteps[startIndex - 1]);
  const wrapperRef = (0, import_react127.useRef)(null);
  (0, import_react127.useEffect)(() => {
    if (isWizardParentStep(firstStepRef.current)) {
      setActiveStepIndex(startIndex + 1);
    }
  }, [startIndex]);
  (0, import_react127.useEffect)(() => {
    if (activeStepIndex > initialSteps.length) {
      setActiveStepIndex(startIndex);
    }
  }, [initialSteps, activeStepIndex, startIndex]);
  const focusMainContentElement = () => setTimeout(() => {
    var _a2;
    ((_a2 = wrapperRef === null || wrapperRef === void 0 ? void 0 : wrapperRef.current) === null || _a2 === void 0 ? void 0 : _a2.focus) && wrapperRef.current.focus();
  }, 0);
  const goToNextStep = (event, steps = initialSteps) => {
    const newStep = steps.find((step) => step.index > activeStepIndex && isStepEnabled(steps, step));
    if (activeStepIndex >= steps.length || !(newStep === null || newStep === void 0 ? void 0 : newStep.index)) {
      return onSave ? onSave(event) : onClose === null || onClose === void 0 ? void 0 : onClose(event);
    }
    setActiveStepIndex(newStep === null || newStep === void 0 ? void 0 : newStep.index);
    onStepChange === null || onStepChange === void 0 ? void 0 : onStepChange(event, newStep, steps[activeStepIndex - 1], WizardStepChangeScope.Next);
    shouldFocusContent && focusMainContentElement();
  };
  const goToPrevStep = (event, steps = initialSteps) => {
    const newStep = [...steps].reverse().find((step) => step.index < activeStepIndex && isStepEnabled(steps, step));
    setActiveStepIndex(newStep === null || newStep === void 0 ? void 0 : newStep.index);
    onStepChange === null || onStepChange === void 0 ? void 0 : onStepChange(event, newStep, steps[activeStepIndex - 1], WizardStepChangeScope.Back);
    shouldFocusContent && focusMainContentElement();
  };
  const goToStepByIndex = (event, steps = initialSteps, index) => {
    const lastStepIndex = steps.length + 1;
    if (index < 1) {
      index = 1;
    } else if (index > lastStepIndex) {
      index = lastStepIndex;
    }
    const currStep = steps[index - 1];
    const prevStep = steps[activeStepIndex - 1];
    setActiveStepIndex(index);
    onStepChange === null || onStepChange === void 0 ? void 0 : onStepChange(event, currStep, prevStep, WizardStepChangeScope.Nav);
  };
  const goToStepById = (steps = initialSteps, id) => {
    const step = steps.find((step2) => step2.id === id);
    const stepIndex = step === null || step === void 0 ? void 0 : step.index;
    const lastStepIndex = steps.length + 1;
    if (stepIndex > 0 && stepIndex < lastStepIndex && !step.isDisabled && !step.isHidden) {
      setActiveStepIndex(stepIndex);
    }
  };
  const goToStepByName = (steps = initialSteps, name) => {
    const step = steps.find((step2) => step2.name === name);
    const stepIndex = step === null || step === void 0 ? void 0 : step.index;
    const lastStepIndex = steps.length + 1;
    if (stepIndex > 0 && stepIndex < lastStepIndex && !step.isDisabled && !step.isHidden) {
      setActiveStepIndex(stepIndex);
    }
  };
  return (0, import_jsx_runtime269.jsx)(WizardContextProvider, { steps: initialSteps, activeStepIndex, footer, onNext: goToNextStep, onBack: goToPrevStep, onClose, goToStepById, goToStepByName, goToStepByIndex, shouldFocusContent, mainWrapperRef: wrapperRef, children: (0, import_jsx_runtime269.jsxs)("div", Object.assign({ className: css(wizard_default.wizard, className), style: Object.assign(Object.assign({}, height ? { [c_wizard_Height_default.name]: typeof height === "number" ? `${height}px` : height } : {}), width ? { width } : {}) }, wrapperProps, { children: [header, (0, import_jsx_runtime269.jsx)(WizardInternal, { nav, navAriaLabel, isVisitRequired, isProgressive })] })) });
};
var WizardInternal = ({ nav, navAriaLabel, isVisitRequired, isProgressive }) => {
  const { activeStep, steps, footer, goToStepByIndex } = useWizardContext();
  const [isNavExpanded, setIsNavExpanded] = (0, import_react127.useState)(false);
  const wizardNav = (0, import_react127.useMemo)(() => {
    if (isCustomWizardNav(nav)) {
      return typeof nav === "function" ? nav(isNavExpanded, steps, activeStep, goToStepByIndex) : nav;
    }
    return (0, import_jsx_runtime269.jsx)(WizardNavInternal, { nav, navAriaLabel, isNavExpanded, isVisitRequired, isProgressive });
  }, [activeStep, isVisitRequired, isProgressive, goToStepByIndex, isNavExpanded, nav, navAriaLabel, steps]);
  return (0, import_jsx_runtime269.jsx)(WizardToggle, { nav: wizardNav, footer, steps, activeStep, isNavExpanded, toggleNavExpanded: () => setIsNavExpanded((prevIsExpanded) => !prevIsExpanded) });
};
Wizard.displayName = "Wizard";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/WizardHeader.js
var import_jsx_runtime270 = __toESM(require_jsx_runtime());
var WizardHeader = (_a) => {
  var { onClose = () => void 0, title, description, isCloseHidden, closeButtonAriaLabel, titleId, descriptionComponent: Component32 = "div", descriptionId, className } = _a, props = __rest(_a, ["onClose", "title", "description", "isCloseHidden", "closeButtonAriaLabel", "titleId", "descriptionComponent", "descriptionId", "className"]);
  return (0, import_jsx_runtime270.jsxs)("div", Object.assign({ className: css(wizard_default.wizardHeader, className) }, props, { children: [!isCloseHidden && (0, import_jsx_runtime270.jsx)("div", { className: css(wizard_default.wizardClose), children: (0, import_jsx_runtime270.jsx)(Button, { variant: "plain", "aria-label": closeButtonAriaLabel, onClick: onClose, icon: (0, import_jsx_runtime270.jsx)(times_icon_default, {}) }) }), (0, import_jsx_runtime270.jsx)("div", { className: css(wizard_default.wizardTitle), children: (0, import_jsx_runtime270.jsx)("h2", { className: css(wizard_default.wizardTitleText), id: titleId, children: title || (0, import_jsx_runtime270.jsx)(import_jsx_runtime270.Fragment, { children: " " }) }) }), description && (0, import_jsx_runtime270.jsx)(Component32, { className: css(wizard_default.wizardDescription), id: descriptionId, children: description })] }));
};
WizardHeader.displayName = "WizardHeader";

// node_modules/@patternfly/react-core/dist/esm/components/Wizard/hooks/useWizardFooter.js
var import_react128 = __toESM(require_react());
var useWizardFooter = (footer, stepId) => {
  const { activeStep, setFooter } = useWizardContext();
  (0, import_react128.useEffect)(() => {
    if (footer && (!stepId || (activeStep === null || activeStep === void 0 ? void 0 : activeStep.id) === stepId)) {
      setFooter(footer);
      return () => {
        setFooter(null);
      };
    }
  }, [activeStep, footer, setFooter, stepId]);
};

// node_modules/@patternfly/react-core/dist/esm/layouts/Bullseye/Bullseye.js
var import_jsx_runtime271 = __toESM(require_jsx_runtime());
var Bullseye = (_a) => {
  var { children = null, className = "", component = "div" } = _a, props = __rest(_a, ["children", "className", "component"]);
  const Component32 = component;
  return (0, import_jsx_runtime271.jsx)(Component32, Object.assign({ className: css(bullseye_default.bullseye, className) }, props, { children }));
};
Bullseye.displayName = "Bullseye";

// node_modules/@patternfly/react-core/dist/esm/layouts/Flex/Flex.js
var import_jsx_runtime272 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/layouts/Flex/flex.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/layouts/Flex/flex.css";
var flex_default = {
  "flex": "pf-v6-l-flex",
  "modifiers": {
    "flex": "pf-m-flex",
    "inlineFlex": "pf-m-inline-flex",
    "column": "pf-m-column",
    "columnReverse": "pf-m-column-reverse",
    "row": "pf-m-row",
    "rowReverse": "pf-m-row-reverse",
    "wrap": "pf-m-wrap",
    "wrapReverse": "pf-m-wrap-reverse",
    "nowrap": "pf-m-nowrap",
    "justifyContentFlexStart": "pf-m-justify-content-flex-start",
    "justifyContentFlexEnd": "pf-m-justify-content-flex-end",
    "justifyContentCenter": "pf-m-justify-content-center",
    "justifyContentSpaceBetween": "pf-m-justify-content-space-between",
    "justifyContentSpaceAround": "pf-m-justify-content-space-around",
    "justifyContentSpaceEvenly": "pf-m-justify-content-space-evenly",
    "alignItemsFlexStart": "pf-m-align-items-flex-start",
    "alignItemsFlexEnd": "pf-m-align-items-flex-end",
    "alignItemsCenter": "pf-m-align-items-center",
    "alignItemsStretch": "pf-m-align-items-stretch",
    "alignItemsBaseline": "pf-m-align-items-baseline",
    "alignContentFlexStart": "pf-m-align-content-flex-start",
    "alignContentFlexEnd": "pf-m-align-content-flex-end",
    "alignContentCenter": "pf-m-align-content-center",
    "alignContentStretch": "pf-m-align-content-stretch",
    "alignContentSpaceBetween": "pf-m-align-content-space-between",
    "alignContentSpaceAround": "pf-m-align-content-space-around",
    "alignRight": "pf-m-align-right",
    "alignLeft": "pf-m-align-left",
    "grow": "pf-m-grow",
    "shrink": "pf-m-shrink",
    "fullWidth": "pf-m-full-width",
    "flex_1": "pf-m-flex-1",
    "flex_2": "pf-m-flex-2",
    "flex_3": "pf-m-flex-3",
    "flex_4": "pf-m-flex-4",
    "flexDefault": "pf-m-flex-default",
    "flexNone": "pf-m-flex-none",
    "alignSelfFlexStart": "pf-m-align-self-flex-start",
    "alignSelfFlexEnd": "pf-m-align-self-flex-end",
    "alignSelfCenter": "pf-m-align-self-center",
    "alignSelfBaseline": "pf-m-align-self-baseline",
    "alignSelfStretch": "pf-m-align-self-stretch",
    "flexOnSm": "pf-m-flex-on-sm",
    "inlineFlexOnSm": "pf-m-inline-flex-on-sm",
    "columnOnSm": "pf-m-column-on-sm",
    "columnReverseOnSm": "pf-m-column-reverse-on-sm",
    "rowOnSm": "pf-m-row-on-sm",
    "rowReverseOnSm": "pf-m-row-reverse-on-sm",
    "wrapOnSm": "pf-m-wrap-on-sm",
    "wrapReverseOnSm": "pf-m-wrap-reverse-on-sm",
    "nowrapOnSm": "pf-m-nowrap-on-sm",
    "justifyContentFlexStartOnSm": "pf-m-justify-content-flex-start-on-sm",
    "justifyContentFlexEndOnSm": "pf-m-justify-content-flex-end-on-sm",
    "justifyContentCenterOnSm": "pf-m-justify-content-center-on-sm",
    "justifyContentSpaceBetweenOnSm": "pf-m-justify-content-space-between-on-sm",
    "justifyContentSpaceAroundOnSm": "pf-m-justify-content-space-around-on-sm",
    "justifyContentSpaceEvenlyOnSm": "pf-m-justify-content-space-evenly-on-sm",
    "alignItemsFlexStartOnSm": "pf-m-align-items-flex-start-on-sm",
    "alignItemsFlexEndOnSm": "pf-m-align-items-flex-end-on-sm",
    "alignItemsCenterOnSm": "pf-m-align-items-center-on-sm",
    "alignItemsStretchOnSm": "pf-m-align-items-stretch-on-sm",
    "alignItemsBaselineOnSm": "pf-m-align-items-baseline-on-sm",
    "alignContentFlexStartOnSm": "pf-m-align-content-flex-start-on-sm",
    "alignContentFlexEndOnSm": "pf-m-align-content-flex-end-on-sm",
    "alignContentCenterOnSm": "pf-m-align-content-center-on-sm",
    "alignContentStretchOnSm": "pf-m-align-content-stretch-on-sm",
    "alignContentSpaceBetweenOnSm": "pf-m-align-content-space-between-on-sm",
    "alignContentSpaceAroundOnSm": "pf-m-align-content-space-around-on-sm",
    "alignRightOnSm": "pf-m-align-right-on-sm",
    "alignLeftOnSm": "pf-m-align-left-on-sm",
    "growOnSm": "pf-m-grow-on-sm",
    "shrinkOnSm": "pf-m-shrink-on-sm",
    "fullWidthOnSm": "pf-m-full-width-on-sm",
    "flex_1OnSm": "pf-m-flex-1-on-sm",
    "flex_2OnSm": "pf-m-flex-2-on-sm",
    "flex_3OnSm": "pf-m-flex-3-on-sm",
    "flex_4OnSm": "pf-m-flex-4-on-sm",
    "flexDefaultOnSm": "pf-m-flex-default-on-sm",
    "flexNoneOnSm": "pf-m-flex-none-on-sm",
    "alignSelfFlexStartOnSm": "pf-m-align-self-flex-start-on-sm",
    "alignSelfFlexEndOnSm": "pf-m-align-self-flex-end-on-sm",
    "alignSelfCenterOnSm": "pf-m-align-self-center-on-sm",
    "alignSelfBaselineOnSm": "pf-m-align-self-baseline-on-sm",
    "alignSelfStretchOnSm": "pf-m-align-self-stretch-on-sm",
    "flexOnMd": "pf-m-flex-on-md",
    "inlineFlexOnMd": "pf-m-inline-flex-on-md",
    "columnOnMd": "pf-m-column-on-md",
    "columnReverseOnMd": "pf-m-column-reverse-on-md",
    "rowOnMd": "pf-m-row-on-md",
    "rowReverseOnMd": "pf-m-row-reverse-on-md",
    "wrapOnMd": "pf-m-wrap-on-md",
    "wrapReverseOnMd": "pf-m-wrap-reverse-on-md",
    "nowrapOnMd": "pf-m-nowrap-on-md",
    "justifyContentFlexStartOnMd": "pf-m-justify-content-flex-start-on-md",
    "justifyContentFlexEndOnMd": "pf-m-justify-content-flex-end-on-md",
    "justifyContentCenterOnMd": "pf-m-justify-content-center-on-md",
    "justifyContentSpaceBetweenOnMd": "pf-m-justify-content-space-between-on-md",
    "justifyContentSpaceAroundOnMd": "pf-m-justify-content-space-around-on-md",
    "justifyContentSpaceEvenlyOnMd": "pf-m-justify-content-space-evenly-on-md",
    "alignItemsFlexStartOnMd": "pf-m-align-items-flex-start-on-md",
    "alignItemsFlexEndOnMd": "pf-m-align-items-flex-end-on-md",
    "alignItemsCenterOnMd": "pf-m-align-items-center-on-md",
    "alignItemsStretchOnMd": "pf-m-align-items-stretch-on-md",
    "alignItemsBaselineOnMd": "pf-m-align-items-baseline-on-md",
    "alignContentFlexStartOnMd": "pf-m-align-content-flex-start-on-md",
    "alignContentFlexEndOnMd": "pf-m-align-content-flex-end-on-md",
    "alignContentCenterOnMd": "pf-m-align-content-center-on-md",
    "alignContentStretchOnMd": "pf-m-align-content-stretch-on-md",
    "alignContentSpaceBetweenOnMd": "pf-m-align-content-space-between-on-md",
    "alignContentSpaceAroundOnMd": "pf-m-align-content-space-around-on-md",
    "alignRightOnMd": "pf-m-align-right-on-md",
    "alignLeftOnMd": "pf-m-align-left-on-md",
    "growOnMd": "pf-m-grow-on-md",
    "shrinkOnMd": "pf-m-shrink-on-md",
    "fullWidthOnMd": "pf-m-full-width-on-md",
    "flex_1OnMd": "pf-m-flex-1-on-md",
    "flex_2OnMd": "pf-m-flex-2-on-md",
    "flex_3OnMd": "pf-m-flex-3-on-md",
    "flex_4OnMd": "pf-m-flex-4-on-md",
    "flexDefaultOnMd": "pf-m-flex-default-on-md",
    "flexNoneOnMd": "pf-m-flex-none-on-md",
    "alignSelfFlexStartOnMd": "pf-m-align-self-flex-start-on-md",
    "alignSelfFlexEndOnMd": "pf-m-align-self-flex-end-on-md",
    "alignSelfCenterOnMd": "pf-m-align-self-center-on-md",
    "alignSelfBaselineOnMd": "pf-m-align-self-baseline-on-md",
    "alignSelfStretchOnMd": "pf-m-align-self-stretch-on-md",
    "flexOnLg": "pf-m-flex-on-lg",
    "inlineFlexOnLg": "pf-m-inline-flex-on-lg",
    "columnOnLg": "pf-m-column-on-lg",
    "columnReverseOnLg": "pf-m-column-reverse-on-lg",
    "rowOnLg": "pf-m-row-on-lg",
    "rowReverseOnLg": "pf-m-row-reverse-on-lg",
    "wrapOnLg": "pf-m-wrap-on-lg",
    "wrapReverseOnLg": "pf-m-wrap-reverse-on-lg",
    "nowrapOnLg": "pf-m-nowrap-on-lg",
    "justifyContentFlexStartOnLg": "pf-m-justify-content-flex-start-on-lg",
    "justifyContentFlexEndOnLg": "pf-m-justify-content-flex-end-on-lg",
    "justifyContentCenterOnLg": "pf-m-justify-content-center-on-lg",
    "justifyContentSpaceBetweenOnLg": "pf-m-justify-content-space-between-on-lg",
    "justifyContentSpaceAroundOnLg": "pf-m-justify-content-space-around-on-lg",
    "justifyContentSpaceEvenlyOnLg": "pf-m-justify-content-space-evenly-on-lg",
    "alignItemsFlexStartOnLg": "pf-m-align-items-flex-start-on-lg",
    "alignItemsFlexEndOnLg": "pf-m-align-items-flex-end-on-lg",
    "alignItemsCenterOnLg": "pf-m-align-items-center-on-lg",
    "alignItemsStretchOnLg": "pf-m-align-items-stretch-on-lg",
    "alignItemsBaselineOnLg": "pf-m-align-items-baseline-on-lg",
    "alignContentFlexStartOnLg": "pf-m-align-content-flex-start-on-lg",
    "alignContentFlexEndOnLg": "pf-m-align-content-flex-end-on-lg",
    "alignContentCenterOnLg": "pf-m-align-content-center-on-lg",
    "alignContentStretchOnLg": "pf-m-align-content-stretch-on-lg",
    "alignContentSpaceBetweenOnLg": "pf-m-align-content-space-between-on-lg",
    "alignContentSpaceAroundOnLg": "pf-m-align-content-space-around-on-lg",
    "alignRightOnLg": "pf-m-align-right-on-lg",
    "alignLeftOnLg": "pf-m-align-left-on-lg",
    "growOnLg": "pf-m-grow-on-lg",
    "shrinkOnLg": "pf-m-shrink-on-lg",
    "fullWidthOnLg": "pf-m-full-width-on-lg",
    "flex_1OnLg": "pf-m-flex-1-on-lg",
    "flex_2OnLg": "pf-m-flex-2-on-lg",
    "flex_3OnLg": "pf-m-flex-3-on-lg",
    "flex_4OnLg": "pf-m-flex-4-on-lg",
    "flexDefaultOnLg": "pf-m-flex-default-on-lg",
    "flexNoneOnLg": "pf-m-flex-none-on-lg",
    "alignSelfFlexStartOnLg": "pf-m-align-self-flex-start-on-lg",
    "alignSelfFlexEndOnLg": "pf-m-align-self-flex-end-on-lg",
    "alignSelfCenterOnLg": "pf-m-align-self-center-on-lg",
    "alignSelfBaselineOnLg": "pf-m-align-self-baseline-on-lg",
    "alignSelfStretchOnLg": "pf-m-align-self-stretch-on-lg",
    "flexOnXl": "pf-m-flex-on-xl",
    "inlineFlexOnXl": "pf-m-inline-flex-on-xl",
    "columnOnXl": "pf-m-column-on-xl",
    "columnReverseOnXl": "pf-m-column-reverse-on-xl",
    "rowOnXl": "pf-m-row-on-xl",
    "rowReverseOnXl": "pf-m-row-reverse-on-xl",
    "wrapOnXl": "pf-m-wrap-on-xl",
    "wrapReverseOnXl": "pf-m-wrap-reverse-on-xl",
    "nowrapOnXl": "pf-m-nowrap-on-xl",
    "justifyContentFlexStartOnXl": "pf-m-justify-content-flex-start-on-xl",
    "justifyContentFlexEndOnXl": "pf-m-justify-content-flex-end-on-xl",
    "justifyContentCenterOnXl": "pf-m-justify-content-center-on-xl",
    "justifyContentSpaceBetweenOnXl": "pf-m-justify-content-space-between-on-xl",
    "justifyContentSpaceAroundOnXl": "pf-m-justify-content-space-around-on-xl",
    "justifyContentSpaceEvenlyOnXl": "pf-m-justify-content-space-evenly-on-xl",
    "alignItemsFlexStartOnXl": "pf-m-align-items-flex-start-on-xl",
    "alignItemsFlexEndOnXl": "pf-m-align-items-flex-end-on-xl",
    "alignItemsCenterOnXl": "pf-m-align-items-center-on-xl",
    "alignItemsStretchOnXl": "pf-m-align-items-stretch-on-xl",
    "alignItemsBaselineOnXl": "pf-m-align-items-baseline-on-xl",
    "alignContentFlexStartOnXl": "pf-m-align-content-flex-start-on-xl",
    "alignContentFlexEndOnXl": "pf-m-align-content-flex-end-on-xl",
    "alignContentCenterOnXl": "pf-m-align-content-center-on-xl",
    "alignContentStretchOnXl": "pf-m-align-content-stretch-on-xl",
    "alignContentSpaceBetweenOnXl": "pf-m-align-content-space-between-on-xl",
    "alignContentSpaceAroundOnXl": "pf-m-align-content-space-around-on-xl",
    "alignRightOnXl": "pf-m-align-right-on-xl",
    "alignLeftOnXl": "pf-m-align-left-on-xl",
    "growOnXl": "pf-m-grow-on-xl",
    "shrinkOnXl": "pf-m-shrink-on-xl",
    "fullWidthOnXl": "pf-m-full-width-on-xl",
    "flex_1OnXl": "pf-m-flex-1-on-xl",
    "flex_2OnXl": "pf-m-flex-2-on-xl",
    "flex_3OnXl": "pf-m-flex-3-on-xl",
    "flex_4OnXl": "pf-m-flex-4-on-xl",
    "flexDefaultOnXl": "pf-m-flex-default-on-xl",
    "flexNoneOnXl": "pf-m-flex-none-on-xl",
    "alignSelfFlexStartOnXl": "pf-m-align-self-flex-start-on-xl",
    "alignSelfFlexEndOnXl": "pf-m-align-self-flex-end-on-xl",
    "alignSelfCenterOnXl": "pf-m-align-self-center-on-xl",
    "alignSelfBaselineOnXl": "pf-m-align-self-baseline-on-xl",
    "alignSelfStretchOnXl": "pf-m-align-self-stretch-on-xl",
    "flexOn_2xl": "pf-m-flex-on-2xl",
    "inlineFlexOn_2xl": "pf-m-inline-flex-on-2xl",
    "columnOn_2xl": "pf-m-column-on-2xl",
    "columnReverseOn_2xl": "pf-m-column-reverse-on-2xl",
    "rowOn_2xl": "pf-m-row-on-2xl",
    "rowReverseOn_2xl": "pf-m-row-reverse-on-2xl",
    "wrapOn_2xl": "pf-m-wrap-on-2xl",
    "wrapReverseOn_2xl": "pf-m-wrap-reverse-on-2xl",
    "nowrapOn_2xl": "pf-m-nowrap-on-2xl",
    "justifyContentFlexStartOn_2xl": "pf-m-justify-content-flex-start-on-2xl",
    "justifyContentFlexEndOn_2xl": "pf-m-justify-content-flex-end-on-2xl",
    "justifyContentCenterOn_2xl": "pf-m-justify-content-center-on-2xl",
    "justifyContentSpaceBetweenOn_2xl": "pf-m-justify-content-space-between-on-2xl",
    "justifyContentSpaceAroundOn_2xl": "pf-m-justify-content-space-around-on-2xl",
    "justifyContentSpaceEvenlyOn_2xl": "pf-m-justify-content-space-evenly-on-2xl",
    "alignItemsFlexStartOn_2xl": "pf-m-align-items-flex-start-on-2xl",
    "alignItemsFlexEndOn_2xl": "pf-m-align-items-flex-end-on-2xl",
    "alignItemsCenterOn_2xl": "pf-m-align-items-center-on-2xl",
    "alignItemsStretchOn_2xl": "pf-m-align-items-stretch-on-2xl",
    "alignItemsBaselineOn_2xl": "pf-m-align-items-baseline-on-2xl",
    "alignContentFlexStartOn_2xl": "pf-m-align-content-flex-start-on-2xl",
    "alignContentFlexEndOn_2xl": "pf-m-align-content-flex-end-on-2xl",
    "alignContentCenterOn_2xl": "pf-m-align-content-center-on-2xl",
    "alignContentStretchOn_2xl": "pf-m-align-content-stretch-on-2xl",
    "alignContentSpaceBetweenOn_2xl": "pf-m-align-content-space-between-on-2xl",
    "alignContentSpaceAroundOn_2xl": "pf-m-align-content-space-around-on-2xl",
    "alignRightOn_2xl": "pf-m-align-right-on-2xl",
    "alignLeftOn_2xl": "pf-m-align-left-on-2xl",
    "growOn_2xl": "pf-m-grow-on-2xl",
    "shrinkOn_2xl": "pf-m-shrink-on-2xl",
    "fullWidthOn_2xl": "pf-m-full-width-on-2xl",
    "flex_1On_2xl": "pf-m-flex-1-on-2xl",
    "flex_2On_2xl": "pf-m-flex-2-on-2xl",
    "flex_3On_2xl": "pf-m-flex-3-on-2xl",
    "flex_4On_2xl": "pf-m-flex-4-on-2xl",
    "flexDefaultOn_2xl": "pf-m-flex-default-on-2xl",
    "flexNoneOn_2xl": "pf-m-flex-none-on-2xl",
    "alignSelfFlexStartOn_2xl": "pf-m-align-self-flex-start-on-2xl",
    "alignSelfFlexEndOn_2xl": "pf-m-align-self-flex-end-on-2xl",
    "alignSelfCenterOn_2xl": "pf-m-align-self-center-on-2xl",
    "alignSelfBaselineOn_2xl": "pf-m-align-self-baseline-on-2xl",
    "alignSelfStretchOn_2xl": "pf-m-align-self-stretch-on-2xl",
    "spaceItemsNone": "pf-m-space-items-none",
    "spaceItemsXs": "pf-m-space-items-xs",
    "spaceItemsSm": "pf-m-space-items-sm",
    "spaceItemsMd": "pf-m-space-items-md",
    "spaceItemsLg": "pf-m-space-items-lg",
    "spaceItemsXl": "pf-m-space-items-xl",
    "spaceItems_2xl": "pf-m-space-items-2xl",
    "spaceItems_3xl": "pf-m-space-items-3xl",
    "spaceItems_4xl": "pf-m-space-items-4xl",
    "spaceItemsNoneOnSm": "pf-m-space-items-none-on-sm",
    "spaceItemsXsOnSm": "pf-m-space-items-xs-on-sm",
    "spaceItemsSmOnSm": "pf-m-space-items-sm-on-sm",
    "spaceItemsMdOnSm": "pf-m-space-items-md-on-sm",
    "spaceItemsLgOnSm": "pf-m-space-items-lg-on-sm",
    "spaceItemsXlOnSm": "pf-m-space-items-xl-on-sm",
    "spaceItems_2xlOnSm": "pf-m-space-items-2xl-on-sm",
    "spaceItems_3xlOnSm": "pf-m-space-items-3xl-on-sm",
    "spaceItems_4xlOnSm": "pf-m-space-items-4xl-on-sm",
    "spaceItemsNoneOnMd": "pf-m-space-items-none-on-md",
    "spaceItemsXsOnMd": "pf-m-space-items-xs-on-md",
    "spaceItemsSmOnMd": "pf-m-space-items-sm-on-md",
    "spaceItemsMdOnMd": "pf-m-space-items-md-on-md",
    "spaceItemsLgOnMd": "pf-m-space-items-lg-on-md",
    "spaceItemsXlOnMd": "pf-m-space-items-xl-on-md",
    "spaceItems_2xlOnMd": "pf-m-space-items-2xl-on-md",
    "spaceItems_3xlOnMd": "pf-m-space-items-3xl-on-md",
    "spaceItems_4xlOnMd": "pf-m-space-items-4xl-on-md",
    "spaceItemsNoneOnLg": "pf-m-space-items-none-on-lg",
    "spaceItemsXsOnLg": "pf-m-space-items-xs-on-lg",
    "spaceItemsSmOnLg": "pf-m-space-items-sm-on-lg",
    "spaceItemsMdOnLg": "pf-m-space-items-md-on-lg",
    "spaceItemsLgOnLg": "pf-m-space-items-lg-on-lg",
    "spaceItemsXlOnLg": "pf-m-space-items-xl-on-lg",
    "spaceItems_2xlOnLg": "pf-m-space-items-2xl-on-lg",
    "spaceItems_3xlOnLg": "pf-m-space-items-3xl-on-lg",
    "spaceItems_4xlOnLg": "pf-m-space-items-4xl-on-lg",
    "spaceItemsNoneOnXl": "pf-m-space-items-none-on-xl",
    "spaceItemsXsOnXl": "pf-m-space-items-xs-on-xl",
    "spaceItemsSmOnXl": "pf-m-space-items-sm-on-xl",
    "spaceItemsMdOnXl": "pf-m-space-items-md-on-xl",
    "spaceItemsLgOnXl": "pf-m-space-items-lg-on-xl",
    "spaceItemsXlOnXl": "pf-m-space-items-xl-on-xl",
    "spaceItems_2xlOnXl": "pf-m-space-items-2xl-on-xl",
    "spaceItems_3xlOnXl": "pf-m-space-items-3xl-on-xl",
    "spaceItems_4xlOnXl": "pf-m-space-items-4xl-on-xl",
    "spaceItemsNoneOn_2xl": "pf-m-space-items-none-on-2xl",
    "spaceItemsXsOn_2xl": "pf-m-space-items-xs-on-2xl",
    "spaceItemsSmOn_2xl": "pf-m-space-items-sm-on-2xl",
    "spaceItemsMdOn_2xl": "pf-m-space-items-md-on-2xl",
    "spaceItemsLgOn_2xl": "pf-m-space-items-lg-on-2xl",
    "spaceItemsXlOn_2xl": "pf-m-space-items-xl-on-2xl",
    "spaceItems_2xlOn_2xl": "pf-m-space-items-2xl-on-2xl",
    "spaceItems_3xlOn_2xl": "pf-m-space-items-3xl-on-2xl",
    "spaceItems_4xlOn_2xl": "pf-m-space-items-4xl-on-2xl",
    "spacerNone": "pf-m-spacer-none",
    "spacerXs": "pf-m-spacer-xs",
    "spacerSm": "pf-m-spacer-sm",
    "spacerMd": "pf-m-spacer-md",
    "spacerLg": "pf-m-spacer-lg",
    "spacerXl": "pf-m-spacer-xl",
    "spacer_2xl": "pf-m-spacer-2xl",
    "spacer_3xl": "pf-m-spacer-3xl",
    "spacer_4xl": "pf-m-spacer-4xl",
    "spacerNoneOnSm": "pf-m-spacer-none-on-sm",
    "spacerXsOnSm": "pf-m-spacer-xs-on-sm",
    "spacerSmOnSm": "pf-m-spacer-sm-on-sm",
    "spacerMdOnSm": "pf-m-spacer-md-on-sm",
    "spacerLgOnSm": "pf-m-spacer-lg-on-sm",
    "spacerXlOnSm": "pf-m-spacer-xl-on-sm",
    "spacer_2xlOnSm": "pf-m-spacer-2xl-on-sm",
    "spacer_3xlOnSm": "pf-m-spacer-3xl-on-sm",
    "spacer_4xlOnSm": "pf-m-spacer-4xl-on-sm",
    "spacerNoneOnMd": "pf-m-spacer-none-on-md",
    "spacerXsOnMd": "pf-m-spacer-xs-on-md",
    "spacerSmOnMd": "pf-m-spacer-sm-on-md",
    "spacerMdOnMd": "pf-m-spacer-md-on-md",
    "spacerLgOnMd": "pf-m-spacer-lg-on-md",
    "spacerXlOnMd": "pf-m-spacer-xl-on-md",
    "spacer_2xlOnMd": "pf-m-spacer-2xl-on-md",
    "spacer_3xlOnMd": "pf-m-spacer-3xl-on-md",
    "spacer_4xlOnMd": "pf-m-spacer-4xl-on-md",
    "spacerNoneOnLg": "pf-m-spacer-none-on-lg",
    "spacerXsOnLg": "pf-m-spacer-xs-on-lg",
    "spacerSmOnLg": "pf-m-spacer-sm-on-lg",
    "spacerMdOnLg": "pf-m-spacer-md-on-lg",
    "spacerLgOnLg": "pf-m-spacer-lg-on-lg",
    "spacerXlOnLg": "pf-m-spacer-xl-on-lg",
    "spacer_2xlOnLg": "pf-m-spacer-2xl-on-lg",
    "spacer_3xlOnLg": "pf-m-spacer-3xl-on-lg",
    "spacer_4xlOnLg": "pf-m-spacer-4xl-on-lg",
    "spacerNoneOnXl": "pf-m-spacer-none-on-xl",
    "spacerXsOnXl": "pf-m-spacer-xs-on-xl",
    "spacerSmOnXl": "pf-m-spacer-sm-on-xl",
    "spacerMdOnXl": "pf-m-spacer-md-on-xl",
    "spacerLgOnXl": "pf-m-spacer-lg-on-xl",
    "spacerXlOnXl": "pf-m-spacer-xl-on-xl",
    "spacer_2xlOnXl": "pf-m-spacer-2xl-on-xl",
    "spacer_3xlOnXl": "pf-m-spacer-3xl-on-xl",
    "spacer_4xlOnXl": "pf-m-spacer-4xl-on-xl",
    "spacerNoneOn_2xl": "pf-m-spacer-none-on-2xl",
    "spacerXsOn_2xl": "pf-m-spacer-xs-on-2xl",
    "spacerSmOn_2xl": "pf-m-spacer-sm-on-2xl",
    "spacerMdOn_2xl": "pf-m-spacer-md-on-2xl",
    "spacerLgOn_2xl": "pf-m-spacer-lg-on-2xl",
    "spacerXlOn_2xl": "pf-m-spacer-xl-on-2xl",
    "spacer_2xlOn_2xl": "pf-m-spacer-2xl-on-2xl",
    "spacer_3xlOn_2xl": "pf-m-spacer-3xl-on-2xl",
    "spacer_4xlOn_2xl": "pf-m-spacer-4xl-on-2xl",
    "gap": "pf-m-gap",
    "gapNone": "pf-m-gap-none",
    "gapXs": "pf-m-gap-xs",
    "gapSm": "pf-m-gap-sm",
    "gapMd": "pf-m-gap-md",
    "gapLg": "pf-m-gap-lg",
    "gapXl": "pf-m-gap-xl",
    "gap_2xl": "pf-m-gap-2xl",
    "gap_3xl": "pf-m-gap-3xl",
    "gap_4xl": "pf-m-gap-4xl",
    "gapOnSm": "pf-m-gap-on-sm",
    "gapNoneOnSm": "pf-m-gap-none-on-sm",
    "gapXsOnSm": "pf-m-gap-xs-on-sm",
    "gapSmOnSm": "pf-m-gap-sm-on-sm",
    "gapMdOnSm": "pf-m-gap-md-on-sm",
    "gapLgOnSm": "pf-m-gap-lg-on-sm",
    "gapXlOnSm": "pf-m-gap-xl-on-sm",
    "gap_2xlOnSm": "pf-m-gap-2xl-on-sm",
    "gap_3xlOnSm": "pf-m-gap-3xl-on-sm",
    "gap_4xlOnSm": "pf-m-gap-4xl-on-sm",
    "gapOnMd": "pf-m-gap-on-md",
    "gapNoneOnMd": "pf-m-gap-none-on-md",
    "gapXsOnMd": "pf-m-gap-xs-on-md",
    "gapSmOnMd": "pf-m-gap-sm-on-md",
    "gapMdOnMd": "pf-m-gap-md-on-md",
    "gapLgOnMd": "pf-m-gap-lg-on-md",
    "gapXlOnMd": "pf-m-gap-xl-on-md",
    "gap_2xlOnMd": "pf-m-gap-2xl-on-md",
    "gap_3xlOnMd": "pf-m-gap-3xl-on-md",
    "gap_4xlOnMd": "pf-m-gap-4xl-on-md",
    "gapOnLg": "pf-m-gap-on-lg",
    "gapNoneOnLg": "pf-m-gap-none-on-lg",
    "gapXsOnLg": "pf-m-gap-xs-on-lg",
    "gapSmOnLg": "pf-m-gap-sm-on-lg",
    "gapMdOnLg": "pf-m-gap-md-on-lg",
    "gapLgOnLg": "pf-m-gap-lg-on-lg",
    "gapXlOnLg": "pf-m-gap-xl-on-lg",
    "gap_2xlOnLg": "pf-m-gap-2xl-on-lg",
    "gap_3xlOnLg": "pf-m-gap-3xl-on-lg",
    "gap_4xlOnLg": "pf-m-gap-4xl-on-lg",
    "gapOnXl": "pf-m-gap-on-xl",
    "gapNoneOnXl": "pf-m-gap-none-on-xl",
    "gapXsOnXl": "pf-m-gap-xs-on-xl",
    "gapSmOnXl": "pf-m-gap-sm-on-xl",
    "gapMdOnXl": "pf-m-gap-md-on-xl",
    "gapLgOnXl": "pf-m-gap-lg-on-xl",
    "gapXlOnXl": "pf-m-gap-xl-on-xl",
    "gap_2xlOnXl": "pf-m-gap-2xl-on-xl",
    "gap_3xlOnXl": "pf-m-gap-3xl-on-xl",
    "gap_4xlOnXl": "pf-m-gap-4xl-on-xl",
    "gapOn_2xl": "pf-m-gap-on-2xl",
    "gapNoneOn_2xl": "pf-m-gap-none-on-2xl",
    "gapXsOn_2xl": "pf-m-gap-xs-on-2xl",
    "gapSmOn_2xl": "pf-m-gap-sm-on-2xl",
    "gapMdOn_2xl": "pf-m-gap-md-on-2xl",
    "gapLgOn_2xl": "pf-m-gap-lg-on-2xl",
    "gapXlOn_2xl": "pf-m-gap-xl-on-2xl",
    "gap_2xlOn_2xl": "pf-m-gap-2xl-on-2xl",
    "gap_3xlOn_2xl": "pf-m-gap-3xl-on-2xl",
    "gap_4xlOn_2xl": "pf-m-gap-4xl-on-2xl",
    "rowGap": "pf-m-row-gap",
    "rowGapNone": "pf-m-row-gap-none",
    "rowGapXs": "pf-m-row-gap-xs",
    "rowGapSm": "pf-m-row-gap-sm",
    "rowGapMd": "pf-m-row-gap-md",
    "rowGapLg": "pf-m-row-gap-lg",
    "rowGapXl": "pf-m-row-gap-xl",
    "rowGap_2xl": "pf-m-row-gap-2xl",
    "rowGap_3xl": "pf-m-row-gap-3xl",
    "rowGap_4xl": "pf-m-row-gap-4xl",
    "rowGapOnSm": "pf-m-row-gap-on-sm",
    "rowGapNoneOnSm": "pf-m-row-gap-none-on-sm",
    "rowGapXsOnSm": "pf-m-row-gap-xs-on-sm",
    "rowGapSmOnSm": "pf-m-row-gap-sm-on-sm",
    "rowGapMdOnSm": "pf-m-row-gap-md-on-sm",
    "rowGapLgOnSm": "pf-m-row-gap-lg-on-sm",
    "rowGapXlOnSm": "pf-m-row-gap-xl-on-sm",
    "rowGap_2xlOnSm": "pf-m-row-gap-2xl-on-sm",
    "rowGap_3xlOnSm": "pf-m-row-gap-3xl-on-sm",
    "rowGap_4xlOnSm": "pf-m-row-gap-4xl-on-sm",
    "rowGapOnMd": "pf-m-row-gap-on-md",
    "rowGapNoneOnMd": "pf-m-row-gap-none-on-md",
    "rowGapXsOnMd": "pf-m-row-gap-xs-on-md",
    "rowGapSmOnMd": "pf-m-row-gap-sm-on-md",
    "rowGapMdOnMd": "pf-m-row-gap-md-on-md",
    "rowGapLgOnMd": "pf-m-row-gap-lg-on-md",
    "rowGapXlOnMd": "pf-m-row-gap-xl-on-md",
    "rowGap_2xlOnMd": "pf-m-row-gap-2xl-on-md",
    "rowGap_3xlOnMd": "pf-m-row-gap-3xl-on-md",
    "rowGap_4xlOnMd": "pf-m-row-gap-4xl-on-md",
    "rowGapOnLg": "pf-m-row-gap-on-lg",
    "rowGapNoneOnLg": "pf-m-row-gap-none-on-lg",
    "rowGapXsOnLg": "pf-m-row-gap-xs-on-lg",
    "rowGapSmOnLg": "pf-m-row-gap-sm-on-lg",
    "rowGapMdOnLg": "pf-m-row-gap-md-on-lg",
    "rowGapLgOnLg": "pf-m-row-gap-lg-on-lg",
    "rowGapXlOnLg": "pf-m-row-gap-xl-on-lg",
    "rowGap_2xlOnLg": "pf-m-row-gap-2xl-on-lg",
    "rowGap_3xlOnLg": "pf-m-row-gap-3xl-on-lg",
    "rowGap_4xlOnLg": "pf-m-row-gap-4xl-on-lg",
    "rowGapOnXl": "pf-m-row-gap-on-xl",
    "rowGapNoneOnXl": "pf-m-row-gap-none-on-xl",
    "rowGapXsOnXl": "pf-m-row-gap-xs-on-xl",
    "rowGapSmOnXl": "pf-m-row-gap-sm-on-xl",
    "rowGapMdOnXl": "pf-m-row-gap-md-on-xl",
    "rowGapLgOnXl": "pf-m-row-gap-lg-on-xl",
    "rowGapXlOnXl": "pf-m-row-gap-xl-on-xl",
    "rowGap_2xlOnXl": "pf-m-row-gap-2xl-on-xl",
    "rowGap_3xlOnXl": "pf-m-row-gap-3xl-on-xl",
    "rowGap_4xlOnXl": "pf-m-row-gap-4xl-on-xl",
    "rowGapOn_2xl": "pf-m-row-gap-on-2xl",
    "rowGapNoneOn_2xl": "pf-m-row-gap-none-on-2xl",
    "rowGapXsOn_2xl": "pf-m-row-gap-xs-on-2xl",
    "rowGapSmOn_2xl": "pf-m-row-gap-sm-on-2xl",
    "rowGapMdOn_2xl": "pf-m-row-gap-md-on-2xl",
    "rowGapLgOn_2xl": "pf-m-row-gap-lg-on-2xl",
    "rowGapXlOn_2xl": "pf-m-row-gap-xl-on-2xl",
    "rowGap_2xlOn_2xl": "pf-m-row-gap-2xl-on-2xl",
    "rowGap_3xlOn_2xl": "pf-m-row-gap-3xl-on-2xl",
    "rowGap_4xlOn_2xl": "pf-m-row-gap-4xl-on-2xl",
    "columnGap": "pf-m-column-gap",
    "columnGapNone": "pf-m-column-gap-none",
    "columnGapXs": "pf-m-column-gap-xs",
    "columnGapSm": "pf-m-column-gap-sm",
    "columnGapMd": "pf-m-column-gap-md",
    "columnGapLg": "pf-m-column-gap-lg",
    "columnGapXl": "pf-m-column-gap-xl",
    "columnGap_2xl": "pf-m-column-gap-2xl",
    "columnGap_3xl": "pf-m-column-gap-3xl",
    "columnGap_4xl": "pf-m-column-gap-4xl",
    "columnGapOnSm": "pf-m-column-gap-on-sm",
    "columnGapNoneOnSm": "pf-m-column-gap-none-on-sm",
    "columnGapXsOnSm": "pf-m-column-gap-xs-on-sm",
    "columnGapSmOnSm": "pf-m-column-gap-sm-on-sm",
    "columnGapMdOnSm": "pf-m-column-gap-md-on-sm",
    "columnGapLgOnSm": "pf-m-column-gap-lg-on-sm",
    "columnGapXlOnSm": "pf-m-column-gap-xl-on-sm",
    "columnGap_2xlOnSm": "pf-m-column-gap-2xl-on-sm",
    "columnGap_3xlOnSm": "pf-m-column-gap-3xl-on-sm",
    "columnGap_4xlOnSm": "pf-m-column-gap-4xl-on-sm",
    "columnGapOnMd": "pf-m-column-gap-on-md",
    "columnGapNoneOnMd": "pf-m-column-gap-none-on-md",
    "columnGapXsOnMd": "pf-m-column-gap-xs-on-md",
    "columnGapSmOnMd": "pf-m-column-gap-sm-on-md",
    "columnGapMdOnMd": "pf-m-column-gap-md-on-md",
    "columnGapLgOnMd": "pf-m-column-gap-lg-on-md",
    "columnGapXlOnMd": "pf-m-column-gap-xl-on-md",
    "columnGap_2xlOnMd": "pf-m-column-gap-2xl-on-md",
    "columnGap_3xlOnMd": "pf-m-column-gap-3xl-on-md",
    "columnGap_4xlOnMd": "pf-m-column-gap-4xl-on-md",
    "columnGapOnLg": "pf-m-column-gap-on-lg",
    "columnGapNoneOnLg": "pf-m-column-gap-none-on-lg",
    "columnGapXsOnLg": "pf-m-column-gap-xs-on-lg",
    "columnGapSmOnLg": "pf-m-column-gap-sm-on-lg",
    "columnGapMdOnLg": "pf-m-column-gap-md-on-lg",
    "columnGapLgOnLg": "pf-m-column-gap-lg-on-lg",
    "columnGapXlOnLg": "pf-m-column-gap-xl-on-lg",
    "columnGap_2xlOnLg": "pf-m-column-gap-2xl-on-lg",
    "columnGap_3xlOnLg": "pf-m-column-gap-3xl-on-lg",
    "columnGap_4xlOnLg": "pf-m-column-gap-4xl-on-lg",
    "columnGapOnXl": "pf-m-column-gap-on-xl",
    "columnGapNoneOnXl": "pf-m-column-gap-none-on-xl",
    "columnGapXsOnXl": "pf-m-column-gap-xs-on-xl",
    "columnGapSmOnXl": "pf-m-column-gap-sm-on-xl",
    "columnGapMdOnXl": "pf-m-column-gap-md-on-xl",
    "columnGapLgOnXl": "pf-m-column-gap-lg-on-xl",
    "columnGapXlOnXl": "pf-m-column-gap-xl-on-xl",
    "columnGap_2xlOnXl": "pf-m-column-gap-2xl-on-xl",
    "columnGap_3xlOnXl": "pf-m-column-gap-3xl-on-xl",
    "columnGap_4xlOnXl": "pf-m-column-gap-4xl-on-xl",
    "columnGapOn_2xl": "pf-m-column-gap-on-2xl",
    "columnGapNoneOn_2xl": "pf-m-column-gap-none-on-2xl",
    "columnGapXsOn_2xl": "pf-m-column-gap-xs-on-2xl",
    "columnGapSmOn_2xl": "pf-m-column-gap-sm-on-2xl",
    "columnGapMdOn_2xl": "pf-m-column-gap-md-on-2xl",
    "columnGapLgOn_2xl": "pf-m-column-gap-lg-on-2xl",
    "columnGapXlOn_2xl": "pf-m-column-gap-xl-on-2xl",
    "columnGap_2xlOn_2xl": "pf-m-column-gap-2xl-on-2xl",
    "columnGap_3xlOn_2xl": "pf-m-column-gap-3xl-on-2xl",
    "columnGap_4xlOn_2xl": "pf-m-column-gap-4xl-on-2xl"
  }
};

// node_modules/@patternfly/react-tokens/dist/esm/l_flex_item_Order.js
var l_flex_item_Order = {
  "name": "--pf-v6-l-flex--item--Order",
  "value": "0",
  "var": "var(--pf-v6-l-flex--item--Order)"
};

// node_modules/@patternfly/react-core/dist/esm/layouts/Flex/Flex.js
var Flex = (_a) => {
  var { children = null, className = "", component = "div", spacer, spaceItems, gap, rowGap, columnGap, grow, shrink, flex, direction, alignItems, alignContent, alignSelf, align, justifyContent, display, fullWidth, flexWrap, order, style } = _a, props = __rest(_a, ["children", "className", "component", "spacer", "spaceItems", "gap", "rowGap", "columnGap", "grow", "shrink", "flex", "direction", "alignItems", "alignContent", "alignSelf", "align", "justifyContent", "display", "fullWidth", "flexWrap", "order", "style"]);
  const Component32 = component;
  return (0, import_jsx_runtime272.jsx)(Component32, Object.assign({ className: css(flex_default.flex, formatBreakpointMods(spacer, flex_default), formatBreakpointMods(spaceItems, flex_default), formatBreakpointMods(grow, flex_default), formatBreakpointMods(shrink, flex_default), formatBreakpointMods(flex, flex_default), formatBreakpointMods(direction, flex_default), formatBreakpointMods(alignItems, flex_default), formatBreakpointMods(alignContent, flex_default), formatBreakpointMods(alignSelf, flex_default), formatBreakpointMods(align, flex_default), formatBreakpointMods(justifyContent, flex_default), formatBreakpointMods(display, flex_default), formatBreakpointMods(fullWidth, flex_default), formatBreakpointMods(flexWrap, flex_default), formatBreakpointMods(gap, flex_default), formatBreakpointMods(rowGap, flex_default), formatBreakpointMods(columnGap, flex_default), className), style: style || order ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order, l_flex_item_Order.name)) : void 0 }, props, { children }));
};
Flex.displayName = "Flex";

// node_modules/@patternfly/react-core/dist/esm/layouts/Flex/FlexItem.js
var import_jsx_runtime273 = __toESM(require_jsx_runtime());
var FlexItem = (_a) => {
  var { children = null, className = "", component = "div", spacer, grow, shrink, flex, alignSelf, align, fullWidth, order, style } = _a, props = __rest(_a, ["children", "className", "component", "spacer", "grow", "shrink", "flex", "alignSelf", "align", "fullWidth", "order", "style"]);
  const Component32 = component;
  return (0, import_jsx_runtime273.jsx)(Component32, Object.assign({}, props, { className: css(formatBreakpointMods(spacer, flex_default), formatBreakpointMods(grow, flex_default), formatBreakpointMods(shrink, flex_default), formatBreakpointMods(flex, flex_default), formatBreakpointMods(alignSelf, flex_default), formatBreakpointMods(align, flex_default), formatBreakpointMods(fullWidth, flex_default), className), style: style || order ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order, l_flex_item_Order.name)) : void 0, children }));
};
FlexItem.displayName = "FlexItem";

// node_modules/@patternfly/react-core/dist/esm/layouts/Gallery/Gallery.js
var import_jsx_runtime274 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/layouts/Gallery/gallery.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/layouts/Gallery/gallery.css";
var gallery_default = {
  "gallery": "pf-v6-l-gallery",
  "modifiers": {
    "gutter": "pf-m-gutter"
  }
};

// node_modules/@patternfly/react-tokens/dist/esm/l_gallery_GridTemplateColumns_min.js
var l_gallery_GridTemplateColumns_min = {
  "name": "--pf-v6-l-gallery--GridTemplateColumns--min",
  "value": "250px",
  "var": "var(--pf-v6-l-gallery--GridTemplateColumns--min)"
};
var l_gallery_GridTemplateColumns_min_default = l_gallery_GridTemplateColumns_min;

// node_modules/@patternfly/react-tokens/dist/esm/l_gallery_GridTemplateColumns_max.js
var l_gallery_GridTemplateColumns_max = {
  "name": "--pf-v6-l-gallery--GridTemplateColumns--max",
  "value": "1fr",
  "var": "var(--pf-v6-l-gallery--GridTemplateColumns--max)"
};
var l_gallery_GridTemplateColumns_max_default = l_gallery_GridTemplateColumns_max;

// node_modules/@patternfly/react-core/dist/esm/layouts/Gallery/Gallery.js
var Gallery = (_a) => {
  var { children = null, className = "", component = "div", hasGutter = false, minWidths, maxWidths } = _a, props = __rest(_a, ["children", "className", "component", "hasGutter", "minWidths", "maxWidths"]);
  const minWidthStyles = {};
  const Component32 = component;
  if (minWidths) {
    Object.entries(minWidths || {}).map(([breakpoint, value]) => minWidthStyles[`${l_gallery_GridTemplateColumns_min_default.name}${breakpoint !== "default" ? `-on-${breakpoint}` : ""}`] = value);
  }
  const maxWidthStyles = {};
  if (maxWidths) {
    Object.entries(maxWidths || {}).map(([breakpoint, value]) => maxWidthStyles[`${l_gallery_GridTemplateColumns_max_default.name}${breakpoint !== "default" ? `-on-${breakpoint}` : ""}`] = value);
  }
  const widthStyles = Object.assign(Object.assign({}, minWidthStyles), maxWidthStyles);
  return (0, import_jsx_runtime274.jsx)(Component32, Object.assign({ className: css(gallery_default.gallery, hasGutter && gallery_default.modifiers.gutter, className) }, props, (minWidths || maxWidths) && { style: Object.assign(Object.assign({}, widthStyles), props.style) }, { children }));
};
Gallery.displayName = "Gallery";

// node_modules/@patternfly/react-core/dist/esm/layouts/Gallery/GalleryItem.js
var import_jsx_runtime275 = __toESM(require_jsx_runtime());
var GalleryItem = (_a) => {
  var { children = null, component = "div" } = _a, props = __rest(_a, ["children", "component"]);
  const Component32 = component;
  return (0, import_jsx_runtime275.jsx)(Component32, Object.assign({}, props, { children }));
};
GalleryItem.displayName = "GalleryItem";

// node_modules/@patternfly/react-core/dist/esm/layouts/Grid/Grid.js
var import_jsx_runtime276 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/layouts/Grid/grid.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/layouts/Grid/grid.css";
var grid_default = {
  "grid": "pf-v6-l-grid",
  "gridItem": "pf-v6-l-grid__item",
  "modifiers": {
    "all_1Col": "pf-m-all-1-col",
    "all_2Col": "pf-m-all-2-col",
    "all_3Col": "pf-m-all-3-col",
    "all_4Col": "pf-m-all-4-col",
    "all_5Col": "pf-m-all-5-col",
    "all_6Col": "pf-m-all-6-col",
    "all_7Col": "pf-m-all-7-col",
    "all_8Col": "pf-m-all-8-col",
    "all_9Col": "pf-m-all-9-col",
    "all_10Col": "pf-m-all-10-col",
    "all_11Col": "pf-m-all-11-col",
    "all_12Col": "pf-m-all-12-col",
    "all_1ColOnSm": "pf-m-all-1-col-on-sm",
    "all_2ColOnSm": "pf-m-all-2-col-on-sm",
    "all_3ColOnSm": "pf-m-all-3-col-on-sm",
    "all_4ColOnSm": "pf-m-all-4-col-on-sm",
    "all_5ColOnSm": "pf-m-all-5-col-on-sm",
    "all_6ColOnSm": "pf-m-all-6-col-on-sm",
    "all_7ColOnSm": "pf-m-all-7-col-on-sm",
    "all_8ColOnSm": "pf-m-all-8-col-on-sm",
    "all_9ColOnSm": "pf-m-all-9-col-on-sm",
    "all_10ColOnSm": "pf-m-all-10-col-on-sm",
    "all_11ColOnSm": "pf-m-all-11-col-on-sm",
    "all_12ColOnSm": "pf-m-all-12-col-on-sm",
    "all_1ColOnMd": "pf-m-all-1-col-on-md",
    "all_2ColOnMd": "pf-m-all-2-col-on-md",
    "all_3ColOnMd": "pf-m-all-3-col-on-md",
    "all_4ColOnMd": "pf-m-all-4-col-on-md",
    "all_5ColOnMd": "pf-m-all-5-col-on-md",
    "all_6ColOnMd": "pf-m-all-6-col-on-md",
    "all_7ColOnMd": "pf-m-all-7-col-on-md",
    "all_8ColOnMd": "pf-m-all-8-col-on-md",
    "all_9ColOnMd": "pf-m-all-9-col-on-md",
    "all_10ColOnMd": "pf-m-all-10-col-on-md",
    "all_11ColOnMd": "pf-m-all-11-col-on-md",
    "all_12ColOnMd": "pf-m-all-12-col-on-md",
    "all_1ColOnLg": "pf-m-all-1-col-on-lg",
    "all_2ColOnLg": "pf-m-all-2-col-on-lg",
    "all_3ColOnLg": "pf-m-all-3-col-on-lg",
    "all_4ColOnLg": "pf-m-all-4-col-on-lg",
    "all_5ColOnLg": "pf-m-all-5-col-on-lg",
    "all_6ColOnLg": "pf-m-all-6-col-on-lg",
    "all_7ColOnLg": "pf-m-all-7-col-on-lg",
    "all_8ColOnLg": "pf-m-all-8-col-on-lg",
    "all_9ColOnLg": "pf-m-all-9-col-on-lg",
    "all_10ColOnLg": "pf-m-all-10-col-on-lg",
    "all_11ColOnLg": "pf-m-all-11-col-on-lg",
    "all_12ColOnLg": "pf-m-all-12-col-on-lg",
    "all_1ColOnXl": "pf-m-all-1-col-on-xl",
    "all_2ColOnXl": "pf-m-all-2-col-on-xl",
    "all_3ColOnXl": "pf-m-all-3-col-on-xl",
    "all_4ColOnXl": "pf-m-all-4-col-on-xl",
    "all_5ColOnXl": "pf-m-all-5-col-on-xl",
    "all_6ColOnXl": "pf-m-all-6-col-on-xl",
    "all_7ColOnXl": "pf-m-all-7-col-on-xl",
    "all_8ColOnXl": "pf-m-all-8-col-on-xl",
    "all_9ColOnXl": "pf-m-all-9-col-on-xl",
    "all_10ColOnXl": "pf-m-all-10-col-on-xl",
    "all_11ColOnXl": "pf-m-all-11-col-on-xl",
    "all_12ColOnXl": "pf-m-all-12-col-on-xl",
    "all_1ColOn_2xl": "pf-m-all-1-col-on-2xl",
    "all_2ColOn_2xl": "pf-m-all-2-col-on-2xl",
    "all_3ColOn_2xl": "pf-m-all-3-col-on-2xl",
    "all_4ColOn_2xl": "pf-m-all-4-col-on-2xl",
    "all_5ColOn_2xl": "pf-m-all-5-col-on-2xl",
    "all_6ColOn_2xl": "pf-m-all-6-col-on-2xl",
    "all_7ColOn_2xl": "pf-m-all-7-col-on-2xl",
    "all_8ColOn_2xl": "pf-m-all-8-col-on-2xl",
    "all_9ColOn_2xl": "pf-m-all-9-col-on-2xl",
    "all_10ColOn_2xl": "pf-m-all-10-col-on-2xl",
    "all_11ColOn_2xl": "pf-m-all-11-col-on-2xl",
    "all_12ColOn_2xl": "pf-m-all-12-col-on-2xl",
    "1Col": "pf-m-1-col",
    "2Col": "pf-m-2-col",
    "3Col": "pf-m-3-col",
    "4Col": "pf-m-4-col",
    "5Col": "pf-m-5-col",
    "6Col": "pf-m-6-col",
    "7Col": "pf-m-7-col",
    "8Col": "pf-m-8-col",
    "9Col": "pf-m-9-col",
    "10Col": "pf-m-10-col",
    "11Col": "pf-m-11-col",
    "12Col": "pf-m-12-col",
    "offset_1Col": "pf-m-offset-1-col",
    "offset_2Col": "pf-m-offset-2-col",
    "offset_3Col": "pf-m-offset-3-col",
    "offset_4Col": "pf-m-offset-4-col",
    "offset_5Col": "pf-m-offset-5-col",
    "offset_6Col": "pf-m-offset-6-col",
    "offset_7Col": "pf-m-offset-7-col",
    "offset_8Col": "pf-m-offset-8-col",
    "offset_9Col": "pf-m-offset-9-col",
    "offset_10Col": "pf-m-offset-10-col",
    "offset_11Col": "pf-m-offset-11-col",
    "offset_12Col": "pf-m-offset-12-col",
    "1Row": "pf-m-1-row",
    "2Row": "pf-m-2-row",
    "3Row": "pf-m-3-row",
    "4Row": "pf-m-4-row",
    "5Row": "pf-m-5-row",
    "6Row": "pf-m-6-row",
    "7Row": "pf-m-7-row",
    "8Row": "pf-m-8-row",
    "9Row": "pf-m-9-row",
    "10Row": "pf-m-10-row",
    "11Row": "pf-m-11-row",
    "12Row": "pf-m-12-row",
    "1ColOnSm": "pf-m-1-col-on-sm",
    "2ColOnSm": "pf-m-2-col-on-sm",
    "3ColOnSm": "pf-m-3-col-on-sm",
    "4ColOnSm": "pf-m-4-col-on-sm",
    "5ColOnSm": "pf-m-5-col-on-sm",
    "6ColOnSm": "pf-m-6-col-on-sm",
    "7ColOnSm": "pf-m-7-col-on-sm",
    "8ColOnSm": "pf-m-8-col-on-sm",
    "9ColOnSm": "pf-m-9-col-on-sm",
    "10ColOnSm": "pf-m-10-col-on-sm",
    "11ColOnSm": "pf-m-11-col-on-sm",
    "12ColOnSm": "pf-m-12-col-on-sm",
    "offset_1ColOnSm": "pf-m-offset-1-col-on-sm",
    "offset_2ColOnSm": "pf-m-offset-2-col-on-sm",
    "offset_3ColOnSm": "pf-m-offset-3-col-on-sm",
    "offset_4ColOnSm": "pf-m-offset-4-col-on-sm",
    "offset_5ColOnSm": "pf-m-offset-5-col-on-sm",
    "offset_6ColOnSm": "pf-m-offset-6-col-on-sm",
    "offset_7ColOnSm": "pf-m-offset-7-col-on-sm",
    "offset_8ColOnSm": "pf-m-offset-8-col-on-sm",
    "offset_9ColOnSm": "pf-m-offset-9-col-on-sm",
    "offset_10ColOnSm": "pf-m-offset-10-col-on-sm",
    "offset_11ColOnSm": "pf-m-offset-11-col-on-sm",
    "offset_12ColOnSm": "pf-m-offset-12-col-on-sm",
    "1RowOnSm": "pf-m-1-row-on-sm",
    "2RowOnSm": "pf-m-2-row-on-sm",
    "3RowOnSm": "pf-m-3-row-on-sm",
    "4RowOnSm": "pf-m-4-row-on-sm",
    "5RowOnSm": "pf-m-5-row-on-sm",
    "6RowOnSm": "pf-m-6-row-on-sm",
    "7RowOnSm": "pf-m-7-row-on-sm",
    "8RowOnSm": "pf-m-8-row-on-sm",
    "9RowOnSm": "pf-m-9-row-on-sm",
    "10RowOnSm": "pf-m-10-row-on-sm",
    "11RowOnSm": "pf-m-11-row-on-sm",
    "12RowOnSm": "pf-m-12-row-on-sm",
    "1ColOnMd": "pf-m-1-col-on-md",
    "2ColOnMd": "pf-m-2-col-on-md",
    "3ColOnMd": "pf-m-3-col-on-md",
    "4ColOnMd": "pf-m-4-col-on-md",
    "5ColOnMd": "pf-m-5-col-on-md",
    "6ColOnMd": "pf-m-6-col-on-md",
    "7ColOnMd": "pf-m-7-col-on-md",
    "8ColOnMd": "pf-m-8-col-on-md",
    "9ColOnMd": "pf-m-9-col-on-md",
    "10ColOnMd": "pf-m-10-col-on-md",
    "11ColOnMd": "pf-m-11-col-on-md",
    "12ColOnMd": "pf-m-12-col-on-md",
    "offset_1ColOnMd": "pf-m-offset-1-col-on-md",
    "offset_2ColOnMd": "pf-m-offset-2-col-on-md",
    "offset_3ColOnMd": "pf-m-offset-3-col-on-md",
    "offset_4ColOnMd": "pf-m-offset-4-col-on-md",
    "offset_5ColOnMd": "pf-m-offset-5-col-on-md",
    "offset_6ColOnMd": "pf-m-offset-6-col-on-md",
    "offset_7ColOnMd": "pf-m-offset-7-col-on-md",
    "offset_8ColOnMd": "pf-m-offset-8-col-on-md",
    "offset_9ColOnMd": "pf-m-offset-9-col-on-md",
    "offset_10ColOnMd": "pf-m-offset-10-col-on-md",
    "offset_11ColOnMd": "pf-m-offset-11-col-on-md",
    "offset_12ColOnMd": "pf-m-offset-12-col-on-md",
    "1RowOnMd": "pf-m-1-row-on-md",
    "2RowOnMd": "pf-m-2-row-on-md",
    "3RowOnMd": "pf-m-3-row-on-md",
    "4RowOnMd": "pf-m-4-row-on-md",
    "5RowOnMd": "pf-m-5-row-on-md",
    "6RowOnMd": "pf-m-6-row-on-md",
    "7RowOnMd": "pf-m-7-row-on-md",
    "8RowOnMd": "pf-m-8-row-on-md",
    "9RowOnMd": "pf-m-9-row-on-md",
    "10RowOnMd": "pf-m-10-row-on-md",
    "11RowOnMd": "pf-m-11-row-on-md",
    "12RowOnMd": "pf-m-12-row-on-md",
    "1ColOnLg": "pf-m-1-col-on-lg",
    "2ColOnLg": "pf-m-2-col-on-lg",
    "3ColOnLg": "pf-m-3-col-on-lg",
    "4ColOnLg": "pf-m-4-col-on-lg",
    "5ColOnLg": "pf-m-5-col-on-lg",
    "6ColOnLg": "pf-m-6-col-on-lg",
    "7ColOnLg": "pf-m-7-col-on-lg",
    "8ColOnLg": "pf-m-8-col-on-lg",
    "9ColOnLg": "pf-m-9-col-on-lg",
    "10ColOnLg": "pf-m-10-col-on-lg",
    "11ColOnLg": "pf-m-11-col-on-lg",
    "12ColOnLg": "pf-m-12-col-on-lg",
    "offset_1ColOnLg": "pf-m-offset-1-col-on-lg",
    "offset_2ColOnLg": "pf-m-offset-2-col-on-lg",
    "offset_3ColOnLg": "pf-m-offset-3-col-on-lg",
    "offset_4ColOnLg": "pf-m-offset-4-col-on-lg",
    "offset_5ColOnLg": "pf-m-offset-5-col-on-lg",
    "offset_6ColOnLg": "pf-m-offset-6-col-on-lg",
    "offset_7ColOnLg": "pf-m-offset-7-col-on-lg",
    "offset_8ColOnLg": "pf-m-offset-8-col-on-lg",
    "offset_9ColOnLg": "pf-m-offset-9-col-on-lg",
    "offset_10ColOnLg": "pf-m-offset-10-col-on-lg",
    "offset_11ColOnLg": "pf-m-offset-11-col-on-lg",
    "offset_12ColOnLg": "pf-m-offset-12-col-on-lg",
    "1RowOnLg": "pf-m-1-row-on-lg",
    "2RowOnLg": "pf-m-2-row-on-lg",
    "3RowOnLg": "pf-m-3-row-on-lg",
    "4RowOnLg": "pf-m-4-row-on-lg",
    "5RowOnLg": "pf-m-5-row-on-lg",
    "6RowOnLg": "pf-m-6-row-on-lg",
    "7RowOnLg": "pf-m-7-row-on-lg",
    "8RowOnLg": "pf-m-8-row-on-lg",
    "9RowOnLg": "pf-m-9-row-on-lg",
    "10RowOnLg": "pf-m-10-row-on-lg",
    "11RowOnLg": "pf-m-11-row-on-lg",
    "12RowOnLg": "pf-m-12-row-on-lg",
    "1ColOnXl": "pf-m-1-col-on-xl",
    "2ColOnXl": "pf-m-2-col-on-xl",
    "3ColOnXl": "pf-m-3-col-on-xl",
    "4ColOnXl": "pf-m-4-col-on-xl",
    "5ColOnXl": "pf-m-5-col-on-xl",
    "6ColOnXl": "pf-m-6-col-on-xl",
    "7ColOnXl": "pf-m-7-col-on-xl",
    "8ColOnXl": "pf-m-8-col-on-xl",
    "9ColOnXl": "pf-m-9-col-on-xl",
    "10ColOnXl": "pf-m-10-col-on-xl",
    "11ColOnXl": "pf-m-11-col-on-xl",
    "12ColOnXl": "pf-m-12-col-on-xl",
    "offset_1ColOnXl": "pf-m-offset-1-col-on-xl",
    "offset_2ColOnXl": "pf-m-offset-2-col-on-xl",
    "offset_3ColOnXl": "pf-m-offset-3-col-on-xl",
    "offset_4ColOnXl": "pf-m-offset-4-col-on-xl",
    "offset_5ColOnXl": "pf-m-offset-5-col-on-xl",
    "offset_6ColOnXl": "pf-m-offset-6-col-on-xl",
    "offset_7ColOnXl": "pf-m-offset-7-col-on-xl",
    "offset_8ColOnXl": "pf-m-offset-8-col-on-xl",
    "offset_9ColOnXl": "pf-m-offset-9-col-on-xl",
    "offset_10ColOnXl": "pf-m-offset-10-col-on-xl",
    "offset_11ColOnXl": "pf-m-offset-11-col-on-xl",
    "offset_12ColOnXl": "pf-m-offset-12-col-on-xl",
    "1RowOnXl": "pf-m-1-row-on-xl",
    "2RowOnXl": "pf-m-2-row-on-xl",
    "3RowOnXl": "pf-m-3-row-on-xl",
    "4RowOnXl": "pf-m-4-row-on-xl",
    "5RowOnXl": "pf-m-5-row-on-xl",
    "6RowOnXl": "pf-m-6-row-on-xl",
    "7RowOnXl": "pf-m-7-row-on-xl",
    "8RowOnXl": "pf-m-8-row-on-xl",
    "9RowOnXl": "pf-m-9-row-on-xl",
    "10RowOnXl": "pf-m-10-row-on-xl",
    "11RowOnXl": "pf-m-11-row-on-xl",
    "12RowOnXl": "pf-m-12-row-on-xl",
    "1ColOn_2xl": "pf-m-1-col-on-2xl",
    "2ColOn_2xl": "pf-m-2-col-on-2xl",
    "3ColOn_2xl": "pf-m-3-col-on-2xl",
    "4ColOn_2xl": "pf-m-4-col-on-2xl",
    "5ColOn_2xl": "pf-m-5-col-on-2xl",
    "6ColOn_2xl": "pf-m-6-col-on-2xl",
    "7ColOn_2xl": "pf-m-7-col-on-2xl",
    "8ColOn_2xl": "pf-m-8-col-on-2xl",
    "9ColOn_2xl": "pf-m-9-col-on-2xl",
    "10ColOn_2xl": "pf-m-10-col-on-2xl",
    "11ColOn_2xl": "pf-m-11-col-on-2xl",
    "12ColOn_2xl": "pf-m-12-col-on-2xl",
    "offset_1ColOn_2xl": "pf-m-offset-1-col-on-2xl",
    "offset_2ColOn_2xl": "pf-m-offset-2-col-on-2xl",
    "offset_3ColOn_2xl": "pf-m-offset-3-col-on-2xl",
    "offset_4ColOn_2xl": "pf-m-offset-4-col-on-2xl",
    "offset_5ColOn_2xl": "pf-m-offset-5-col-on-2xl",
    "offset_6ColOn_2xl": "pf-m-offset-6-col-on-2xl",
    "offset_7ColOn_2xl": "pf-m-offset-7-col-on-2xl",
    "offset_8ColOn_2xl": "pf-m-offset-8-col-on-2xl",
    "offset_9ColOn_2xl": "pf-m-offset-9-col-on-2xl",
    "offset_10ColOn_2xl": "pf-m-offset-10-col-on-2xl",
    "offset_11ColOn_2xl": "pf-m-offset-11-col-on-2xl",
    "offset_12ColOn_2xl": "pf-m-offset-12-col-on-2xl",
    "1RowOn_2xl": "pf-m-1-row-on-2xl",
    "2RowOn_2xl": "pf-m-2-row-on-2xl",
    "3RowOn_2xl": "pf-m-3-row-on-2xl",
    "4RowOn_2xl": "pf-m-4-row-on-2xl",
    "5RowOn_2xl": "pf-m-5-row-on-2xl",
    "6RowOn_2xl": "pf-m-6-row-on-2xl",
    "7RowOn_2xl": "pf-m-7-row-on-2xl",
    "8RowOn_2xl": "pf-m-8-row-on-2xl",
    "9RowOn_2xl": "pf-m-9-row-on-2xl",
    "10RowOn_2xl": "pf-m-10-row-on-2xl",
    "11RowOn_2xl": "pf-m-11-row-on-2xl",
    "12RowOn_2xl": "pf-m-12-row-on-2xl",
    "gutter": "pf-m-gutter"
  }
};

// node_modules/@patternfly/react-core/dist/esm/styles/sizes.js
var BaseSizes;
(function(BaseSizes2) {
  BaseSizes2["xs"] = "xs";
  BaseSizes2["sm"] = "sm";
  BaseSizes2["md"] = "md";
  BaseSizes2["lg"] = "lg";
  BaseSizes2["xl"] = "xl";
  BaseSizes2["2xl"] = "2xl";
  BaseSizes2["3xl"] = "3xl";
  BaseSizes2["4xl"] = "4xl";
})(BaseSizes || (BaseSizes = {}));
var DeviceSizes;
(function(DeviceSizes2) {
  DeviceSizes2["sm"] = "Sm";
  DeviceSizes2["md"] = "Md";
  DeviceSizes2["lg"] = "Lg";
  DeviceSizes2["xl"] = "Xl";
  DeviceSizes2["xl2"] = "_2xl";
})(DeviceSizes || (DeviceSizes = {}));

// node_modules/@patternfly/react-tokens/dist/esm/l_grid_item_Order.js
var l_grid_item_Order = {
  "name": "--pf-v6-l-grid--item--Order",
  "value": "0",
  "var": "var(--pf-v6-l-grid--item--Order)"
};

// node_modules/@patternfly/react-core/dist/esm/layouts/Grid/Grid.js
var Grid = (_a) => {
  var { children = null, className = "", component = "div", hasGutter, span = null, order, style } = _a, props = __rest(_a, ["children", "className", "component", "hasGutter", "span", "order", "style"]);
  const classes = [grid_default.grid, span && grid_default.modifiers[`all_${span}Col`]];
  const Component32 = component;
  Object.entries(DeviceSizes).forEach(([propKey, gridSpanModifier]) => {
    const key = propKey;
    const propValue = props[key];
    if (propValue) {
      classes.push(grid_default.modifiers[`all_${propValue}ColOn${gridSpanModifier}`]);
    }
    delete props[key];
  });
  return (0, import_jsx_runtime276.jsx)(Component32, Object.assign({ className: css(...classes, hasGutter && grid_default.modifiers.gutter, className), style: style || order ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order, l_grid_item_Order.name)) : void 0 }, props, { children }));
};
Grid.displayName = "Grid";

// node_modules/@patternfly/react-core/dist/esm/layouts/Grid/GridItem.js
var import_jsx_runtime277 = __toESM(require_jsx_runtime());
var GridItem = (_a) => {
  var { children = null, className = "", component = "div", span = null, rowSpan = null, offset = null, order, style } = _a, props = __rest(_a, ["children", "className", "component", "span", "rowSpan", "offset", "order", "style"]);
  const classes = [
    grid_default.gridItem,
    span && grid_default.modifiers[`${span}Col`],
    rowSpan && grid_default.modifiers[`${rowSpan}Row`],
    offset && grid_default.modifiers[`offset_${offset}Col`]
  ];
  const Component32 = component;
  Object.entries(DeviceSizes).forEach(([propKey, classModifier]) => {
    const key = propKey;
    const rowSpanKey = `${key}RowSpan`;
    const offsetKey = `${key}Offset`;
    const spanValue = props[key];
    const rowSpanValue = props[rowSpanKey];
    const offsetValue = props[offsetKey];
    if (spanValue) {
      classes.push(grid_default.modifiers[`${spanValue}ColOn${classModifier}`]);
    }
    if (rowSpanValue) {
      classes.push(grid_default.modifiers[`${rowSpanValue}RowOn${classModifier}`]);
    }
    if (offsetValue) {
      classes.push(grid_default.modifiers[`offset_${offsetValue}ColOn${classModifier}`]);
    }
    delete props[key];
    delete props[rowSpanKey];
    delete props[offsetKey];
  });
  return (0, import_jsx_runtime277.jsx)(Component32, Object.assign({ className: css(...classes, className), style: style || order ? Object.assign(Object.assign({}, style), setBreakpointCssVars(order, l_grid_item_Order.name)) : void 0 }, props, { children }));
};
GridItem.displayName = "GridItem";

// node_modules/@patternfly/react-core/dist/esm/layouts/Level/Level.js
var import_jsx_runtime278 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/layouts/Level/level.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/layouts/Level/level.css";
var level_default = {
  "level": "pf-v6-l-level",
  "modifiers": {
    "gutter": "pf-m-gutter"
  }
};

// node_modules/@patternfly/react-core/dist/esm/layouts/Level/Level.js
var Level = (_a) => {
  var { hasGutter, className = "", children = null } = _a, props = __rest(_a, ["hasGutter", "className", "children"]);
  return (0, import_jsx_runtime278.jsx)("div", Object.assign({}, props, { className: css(level_default.level, hasGutter && level_default.modifiers.gutter, className), children }));
};
Level.displayName = "Level";

// node_modules/@patternfly/react-core/dist/esm/layouts/Level/LevelItem.js
var import_jsx_runtime279 = __toESM(require_jsx_runtime());
var LevelItem = (_a) => {
  var { children = null } = _a, props = __rest(_a, ["children"]);
  return (0, import_jsx_runtime279.jsx)("div", Object.assign({}, props, { children }));
};
LevelItem.displayName = "LevelItem";

// node_modules/@patternfly/react-core/dist/esm/layouts/Split/Split.js
var import_jsx_runtime280 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/layouts/Split/split.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/layouts/Split/split.css";
var split_default = {
  "modifiers": {
    "wrap": "pf-m-wrap",
    "fill": "pf-m-fill",
    "gutter": "pf-m-gutter"
  },
  "split": "pf-v6-l-split",
  "splitItem": "pf-v6-l-split__item"
};

// node_modules/@patternfly/react-core/dist/esm/layouts/Split/Split.js
var Split = (_a) => {
  var { hasGutter = false, isWrappable = false, className = "", children = null, component = "div" } = _a, props = __rest(_a, ["hasGutter", "isWrappable", "className", "children", "component"]);
  const Component32 = component;
  return (0, import_jsx_runtime280.jsx)(Component32, Object.assign({}, props, { className: css(split_default.split, hasGutter && split_default.modifiers.gutter, isWrappable && split_default.modifiers.wrap, className), children }));
};
Split.displayName = "Split";

// node_modules/@patternfly/react-core/dist/esm/layouts/Split/SplitItem.js
var import_jsx_runtime281 = __toESM(require_jsx_runtime());
var SplitItem = (_a) => {
  var { isFilled = false, className = "", children = null, component = "div" } = _a, props = __rest(_a, ["isFilled", "className", "children", "component"]);
  const Component32 = component;
  return (0, import_jsx_runtime281.jsx)(Component32, Object.assign({}, props, { className: css(split_default.splitItem, isFilled && split_default.modifiers.fill, className), children }));
};
SplitItem.displayName = "SplitItem";

// node_modules/@patternfly/react-core/dist/esm/layouts/Stack/Stack.js
var import_jsx_runtime282 = __toESM(require_jsx_runtime());

// node_modules/@patternfly/react-styles/css/layouts/Stack/stack.mjs
import "/Users/pamparan/Desktop/Edge - AI Design support  /amplify-edge/frontend/node_modules/@patternfly/react-styles/css/layouts/Stack/stack.css";
var stack_default = {
  "modifiers": {
    "fill": "pf-m-fill",
    "gutter": "pf-m-gutter"
  },
  "stack": "pf-v6-l-stack",
  "stackItem": "pf-v6-l-stack__item"
};

// node_modules/@patternfly/react-core/dist/esm/layouts/Stack/Stack.js
var Stack = (_a) => {
  var { hasGutter = false, className = "", children = null, component = "div" } = _a, props = __rest(_a, ["hasGutter", "className", "children", "component"]);
  const Component32 = component;
  return (0, import_jsx_runtime282.jsx)(Component32, Object.assign({}, props, { className: css(stack_default.stack, hasGutter && stack_default.modifiers.gutter, className), children }));
};
Stack.displayName = "Stack";

// node_modules/@patternfly/react-core/dist/esm/layouts/Stack/StackItem.js
var import_jsx_runtime283 = __toESM(require_jsx_runtime());
var StackItem = (_a) => {
  var { isFilled = false, className = "", children = null, component = "div" } = _a, props = __rest(_a, ["isFilled", "className", "children", "component"]);
  const Component32 = component;
  return (0, import_jsx_runtime283.jsx)(Component32, Object.assign({}, props, { className: css(stack_default.stackItem, isFilled && stack_default.modifiers.fill, className), children }));
};
StackItem.displayName = "StackItem";
export {
  ASTERISK,
  AboutModal,
  Accordion,
  AccordionContent,
  AccordionExpandableContentBody,
  AccordionItem,
  AccordionToggle,
  ActionGroup,
  ActionList,
  ActionListGroup,
  ActionListItem,
  Alert,
  AlertActionCloseButton,
  AlertActionLink,
  AlertContext,
  AlertGroup,
  AlertVariant,
  Avatar,
  BackToTop,
  Backdrop,
  BackgroundImage,
  Badge,
  Banner,
  BaseSizes,
  Brand,
  Breadcrumb,
  BreadcrumbHeading,
  BreadcrumbItem,
  Bullseye,
  Button,
  ButtonSize,
  ButtonState,
  ButtonType,
  ButtonVariant,
  CalendarMonth,
  Card,
  CardBody,
  CardContext,
  CardExpandableContent,
  CardFooter,
  CardHeader,
  CardTitle,
  Checkbox,
  ClipboardCopy,
  ClipboardCopyAction,
  ClipboardCopyButton,
  ClipboardCopyVariant,
  CodeBlock,
  CodeBlockAction,
  CodeBlockCode,
  Content,
  ContentVariants,
  DataList,
  DataListAction,
  DataListBase,
  DataListCell,
  DataListCheck,
  DataListContent,
  DataListContext,
  DataListControl,
  DataListDragButton,
  DataListItem,
  DataListItemCells,
  DataListItemRow,
  DataListText,
  DataListToggle,
  DataListWrapModifier,
  DatePicker,
  DescriptionList,
  DescriptionListDescription,
  DescriptionListGroup,
  DescriptionListTerm,
  DescriptionListTermHelpText,
  DescriptionListTermHelpTextButton,
  DeviceSizes,
  Divider,
  DividerVariant,
  Drawer,
  DrawerActions,
  DrawerCloseButton,
  DrawerColorVariant,
  DrawerContent,
  DrawerContentBody,
  DrawerContentColorVariant,
  DrawerContext,
  DrawerHead,
  DrawerPanelBody,
  DrawerPanelContent,
  DrawerPanelDescription,
  DrawerSection,
  DrilldownMenu,
  Dropdown,
  DropdownGroup,
  DropdownItem,
  DropdownList,
  ErrorCode as DropzoneErrorCode,
  DualListSelector,
  DualListSelectorControl,
  DualListSelectorControlBase,
  DualListSelectorControlsWrapper,
  DualListSelectorControlsWrapperBase,
  DualListSelectorList,
  DualListSelectorListBase,
  DualListSelectorListItem,
  DualListSelectorListItemBase,
  DualListSelectorPane,
  DualListSelectorTree,
  EmptyState,
  EmptyStateActions,
  EmptyStateBody,
  EmptyStateFooter,
  EmptyStateStatus,
  EmptyStateVariant,
  ExpandableSection,
  ExpandableSectionToggle,
  ExpandableSectionVariant,
  FileUpload,
  FileUploadField,
  FileUploadHelperText,
  Flex,
  FlexItem,
  FocusTrap,
  Form,
  FormAlert,
  FormContextConsumer,
  FormContextProvider,
  FormFieldGroup,
  FormFieldGroupExpandable,
  FormFieldGroupHeader,
  FormGroup,
  FormGroupLabelHelp,
  FormHelperText,
  FormSection,
  FormSelect,
  FormSelectOption,
  FormSelectOptionGroup,
  Gallery,
  GalleryItem,
  GenerateId,
  Grid,
  GridItem,
  HelperText,
  HelperTextItem,
  HelperTextItemVariant,
  Hint,
  HintBody,
  HintFooter,
  HintTitle,
  Icon,
  InputGroup,
  InputGroupBase,
  InputGroupItem,
  InputGroupText,
  JumpLinks,
  JumpLinksItem,
  JumpLinksList,
  KEYHANDLER_DIRECTION,
  KeyTypes,
  KeyboardHandler,
  Label,
  LabelGroup,
  Level,
  LevelItem,
  List,
  ListComponent,
  ListItem,
  ListVariant,
  Login,
  LoginFooter,
  LoginFooterItem,
  LoginForm,
  LoginHeader,
  LoginMainBody,
  LoginMainFooter,
  LoginMainFooterBandItem,
  LoginMainFooterLinksItem,
  LoginMainHeader,
  LoginPage,
  Masthead,
  MastheadBrand,
  MastheadContent,
  MastheadLogo,
  MastheadMain,
  MastheadToggle,
  Menu,
  MenuBreadcrumb,
  MenuContainer,
  MenuContent,
  MenuFooter,
  MenuGroup,
  MenuItem,
  MenuItemAction,
  MenuList,
  MenuSearch,
  MenuSearchInput,
  MenuToggle,
  MenuToggleAction,
  MenuToggleCheckbox,
  MenuToggleSize,
  MenuToggleStatus,
  Modal,
  ModalBody,
  ModalFooter,
  ModalHeader,
  ModalVariant,
  MultipleFileUpload,
  MultipleFileUploadContext,
  MultipleFileUploadMain,
  MultipleFileUploadStatus,
  MultipleFileUploadStatusItem,
  Nav,
  NavContext,
  NavExpandable,
  NavGroup,
  NavItem,
  NavItemSeparator,
  NavList,
  NotificationBadge,
  NotificationBadgeVariant,
  NotificationDrawer,
  NotificationDrawerBody,
  NotificationDrawerGroup,
  NotificationDrawerGroupList,
  NotificationDrawerHeader,
  NotificationDrawerList,
  NotificationDrawerListItem,
  NotificationDrawerListItemBody,
  NotificationDrawerListItemHeader,
  NumberInput,
  OrderType,
  OverflowMenu,
  OverflowMenuContent,
  OverflowMenuControl,
  OverflowMenuDropdownItem,
  OverflowMenuGroup,
  OverflowMenuItem,
  Page,
  PageBody,
  PageBreadcrumb,
  PageContext,
  PageContextConsumer,
  PageContextProvider,
  PageGroup,
  PageLayouts,
  PageSection,
  PageSectionTypes,
  PageSectionVariants,
  PageSidebar,
  PageSidebarBody,
  PageSidebarContext,
  PageToggleButton,
  Pagination,
  PaginationVariant,
  Panel,
  PanelFooter,
  PanelHeader,
  PanelMain,
  PanelMainBody,
  Popover,
  PopoverPosition,
  Popper,
  Progress,
  ProgressBar,
  ProgressContainer,
  ProgressMeasureLocation,
  ProgressSize,
  ProgressStep,
  ProgressStepVariant,
  ProgressStepper,
  ProgressVariant,
  Radio,
  SIDE,
  SearchInput,
  Select,
  SelectGroup,
  SelectList,
  SelectOption,
  Sidebar,
  SidebarBackgroundVariant,
  SidebarContent,
  SidebarPanel,
  SidebarPanelWidthType,
  SimpleList,
  SimpleListContext,
  SimpleListGroup,
  SimpleListItem,
  Skeleton,
  SkipToContent,
  Slider,
  Spinner,
  Split,
  SplitItem,
  Stack,
  StackItem,
  Switch,
  Tab,
  TabAction,
  TabContent,
  TabContentBody,
  TabTitleIcon,
  TabTitleText,
  Tabs,
  TabsComponent,
  TabsContext,
  TabsContextConsumer,
  TabsContextProvider,
  TextAreResizeOrientation,
  TextArea,
  TextAreaReadOnlyVariant,
  TextInput,
  TextInputBase,
  TextInputGroup,
  TextInputGroupContext,
  TextInputGroupMain,
  TextInputGroupUtilities,
  TextInputReadOnlyVariant,
  TextInputTypes,
  TimePicker,
  Timestamp,
  TimestampFormat,
  TimestampTooltipVariant,
  Title,
  TitleSizes,
  ToggleGroup,
  ToggleGroupItem,
  ToggleTemplate,
  Toolbar,
  ToolbarColorVariant,
  ToolbarContent,
  ToolbarContentContext,
  ToolbarContext,
  ToolbarExpandIconWrapper,
  ToolbarExpandableContent,
  ToolbarFilter,
  ToolbarGroup,
  ToolbarGroupVariant,
  ToolbarItem,
  ToolbarItemVariant,
  ToolbarToggleGroup,
  Tooltip,
  TooltipPosition,
  TreeView,
  TreeViewSearch,
  Truncate,
  TruncatePosition,
  ValidatedOptions,
  Weekday,
  Wizard,
  WizardBody,
  WizardContext,
  WizardFooter,
  WizardFooterWrapper,
  WizardHeader,
  WizardNav,
  WizardNavItem,
  WizardNavItemStatus,
  WizardStep,
  WizardStepChangeScope,
  WizardToggle,
  canUseDOM,
  capitalize,
  clearTimeouts,
  clipboardCopyFunc,
  debounce,
  fillTemplate,
  findTabbableElements,
  formatBreakpointMods,
  getBreakpoint,
  getDefaultOUIAId,
  getInlineStartProperty,
  getLanguageDirection,
  getNextIndex,
  getOUIAProps,
  getOpacityTransition,
  getReferenceElement,
  getResizeObserver,
  getTextWidth,
  getUniqueId,
  getVerticalBreakpoint,
  globalBreakpoints,
  globalHeightBreakpoints,
  globalWidthBreakpoints,
  handleArrows,
  innerDimensions,
  isCustomWizardFooter,
  isCustomWizardNav,
  isCustomWizardNavItem,
  isElementInView,
  isValidDate,
  isWizardBasicStep,
  isWizardParentStep,
  isWizardSubStep,
  keyHandler,
  navContextDefaults,
  onToggleArrowKeydownDefault,
  pageContextDefaults,
  pageSidebarContextDefaults,
  pluralize,
  preventedEvents,
  setBreakpointCssVars,
  setTabIndex,
  sideElementIsOutOfView,
  spinnerSize,
  statusIcons,
  toCamel,
  trimLeft,
  useFormContext,
  useInterval,
  useIsomorphicLayoutEffect,
  useOUIAId,
  useOUIAProps,
  useWizardContext,
  useWizardFooter,
  variantIcons2 as variantIcons,
  yyyyMMddFormat
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=@patternfly_react-core.js.map
